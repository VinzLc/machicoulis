{"ast":null,"code":"// src/App.js\nimport React,{useEffect,useState}from'react';import{useGameLogic}from'./hooks/useGameLogic';import{Amplify}from'aws-amplify';import{getCurrentUser,signOut}from'aws-amplify/auth';import awsExports from'./aws-exports';import LoginScreen from'./components/LoginScreen';import HomeScreen from'./components/HomeScreen';import CollectionScreen from'./components/CollectionScreen';import NewImageModal from'./components/NewImageModal';import ImageDetailModal from'./components/ImageDetailModal';import'./styles/animations.css';// Import the animations\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";Amplify.configure(awsExports);const DailyImageCollector=()=>{const[authUser,setAuthUser]=useState(null);const[isAuthLoading,setIsAuthLoading]=useState(true);const[isCardNew,setIsCardNew]=useState(false);const{user,login,logout:gameLogout,currentView,setCurrentView,userCollection,todaysClaim,drawDailyImage,loading,getStreakCount,imageDatabase,showNewImage,setShowNewImage,todaysImage,shakeAnimation,setShakeAnimation,selectedImage,setSelectedImage,isFullscreen,setIsFullscreen,// New properties for 3 draws per day\ndailyDrawsRemaining,// How many draws left today (0-3)\ntotalDrawsToday,// How many draws used today (0-3)\ndrawsResetTime,// When draws reset (next midnight)\ncanDraw,// Function to check if user can draw\ngetDrawButtonText,// Function to get dynamic button text\ngetTimeUntilReset,// Function to get time until reset\nMAX_DRAWS_PER_DAY// Maximum draws per day (3)\n}=useGameLogic();// Check authentication state on app load\nuseEffect(()=>{checkAuthState();},[]);const checkAuthState=async()=>{try{var _cognitoUser$signInDe;const cognitoUser=await getCurrentUser();console.log('Authenticated user found:',cognitoUser);setAuthUser(cognitoUser);// Auto-login with Cognito user data\nconst username=cognitoUser.username;const email=((_cognitoUser$signInDe=cognitoUser.signInDetails)===null||_cognitoUser$signInDe===void 0?void 0:_cognitoUser$signInDe.loginId)||'';login(username,email);}catch(error){console.log('No authenticated user found');setAuthUser(null);}setIsAuthLoading(false);};// Check if the current card is new for the user when todaysImage changes\nuseEffect(()=>{if(todaysImage&&userCollection){// Extract base ID (part before underscore) from todaysImage\nconst todaysBaseId=todaysImage.id.toString().split('_')[0];// Exclude the last entry (just drawn card) when checking if it's new\nconst collectionWithoutLastCard=userCollection.slice(0,-1);// Check if user had any card with this base ID before drawing this one\nconst userHadCard=collectionWithoutLastCard.some(card=>{const cardBaseId=card.id.toString().split('_')[0];return cardBaseId===todaysBaseId;});console.log('=== Card Check Debug ===');console.log('todaysImage:',todaysImage);console.log('todaysImage full ID:',todaysImage.id);console.log('todaysImage base ID:',todaysBaseId);console.log('userCollection length:',userCollection.length);console.log('collection without last card:',collectionWithoutLastCard.map(card=>card.id.toString().split('_')[0]));console.log('userHadCard before:',userHadCard);console.log('Setting isCardNew to:',!userHadCard);console.log('dailyDrawsRemaining:',dailyDrawsRemaining);console.log('totalDrawsToday:',totalDrawsToday);console.log('drawsResetTime:',drawsResetTime);console.log('========================');setIsCardNew(!userHadCard);}},[todaysImage,userCollection,dailyDrawsRemaining,totalDrawsToday]);// Enhanced login function that handles both Cognito and demo users\nconst handleLogin=async(username,email)=>{// For admin users, skip Cognito authentication\nif(username==='admin'){login(username,email);setAuthUser({username,email,isAdminUser:true});return;}// For real users, they should already be authenticated through Cognito\n// This function is called after successful Cognito auth\nlogin(username,email);};// Enhanced logout function\nconst handleLogout=async()=>{try{// Only sign out from Cognito if it's not an admin user\nif(authUser&&!authUser.isAdminUser){await signOut();}setAuthUser(null);gameLogout();}catch(error){console.error('Error signing out:',error);// Force logout even if Cognito signout fails\nsetAuthUser(null);gameLogout();}};// Check if the current card is new for the user\nconst isNewCard=()=>{return isCardNew;};// Show loading screen while checking authentication\nif(isAuthLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 to-blue-600\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-32 w-32 border-b-4 border-white mb-4\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-white text-xl font-bold\",children:\"Chargement de Pocket Machicoulis...\"})]})});}// Show login screen if no authenticated user and no game user\nif(!authUser&&!user){return/*#__PURE__*/_jsx(LoginScreen,{login:handleLogin});}return/*#__PURE__*/_jsxs(\"div\",{children:[currentView==='home'&&/*#__PURE__*/_jsx(HomeScreen,{user:user,logout:handleLogout,drawDailyImage:drawDailyImage,loading:loading,todaysClaim:todaysClaim,userCollection:userCollection,getStreakCount:getStreakCount,imageDatabase:imageDatabase,setCurrentView:setCurrentView// All new 3-draws-per-day props\n,dailyDrawsRemaining:dailyDrawsRemaining,totalDrawsToday:totalDrawsToday,drawsResetTime:drawsResetTime,canDraw:canDraw,getDrawButtonText:getDrawButtonText,getTimeUntilReset:getTimeUntilReset,MAX_DRAWS_PER_DAY:MAX_DRAWS_PER_DAY}),currentView==='collection'&&/*#__PURE__*/_jsx(CollectionScreen,{userCollection:userCollection,imageDatabase:imageDatabase,setCurrentView:setCurrentView,setSelectedImage:setSelectedImage}),/*#__PURE__*/_jsx(NewImageModal,{showNewImage:showNewImage,setShowNewImage:setShowNewImage,todaysImage:todaysImage,shakeAnimation:shakeAnimation,setShakeAnimation:setShakeAnimation,isNewCard:isNewCard(),userCollection:userCollection}),/*#__PURE__*/_jsx(ImageDetailModal,{selectedImage:selectedImage,setSelectedImage:setSelectedImage,isFullscreen:isFullscreen,setIsFullscreen:setIsFullscreen})]});};export default DailyImageCollector;","map":{"version":3,"names":["React","useEffect","useState","useGameLogic","Amplify","getCurrentUser","signOut","awsExports","LoginScreen","HomeScreen","CollectionScreen","NewImageModal","ImageDetailModal","jsx","_jsx","jsxs","_jsxs","configure","DailyImageCollector","authUser","setAuthUser","isAuthLoading","setIsAuthLoading","isCardNew","setIsCardNew","user","login","logout","gameLogout","currentView","setCurrentView","userCollection","todaysClaim","drawDailyImage","loading","getStreakCount","imageDatabase","showNewImage","setShowNewImage","todaysImage","shakeAnimation","setShakeAnimation","selectedImage","setSelectedImage","isFullscreen","setIsFullscreen","dailyDrawsRemaining","totalDrawsToday","drawsResetTime","canDraw","getDrawButtonText","getTimeUntilReset","MAX_DRAWS_PER_DAY","checkAuthState","_cognitoUser$signInDe","cognitoUser","console","log","username","email","signInDetails","loginId","error","todaysBaseId","id","toString","split","collectionWithoutLastCard","slice","userHadCard","some","card","cardBaseId","length","map","handleLogin","isAdminUser","handleLogout","isNewCard","className","children"],"sources":["C:/Users/vinzl/workspace/machicoulis/daily-image-collector/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useGameLogic } from './hooks/useGameLogic';\nimport { Amplify } from 'aws-amplify';\nimport { getCurrentUser, signOut } from 'aws-amplify/auth';\nimport awsExports from './aws-exports';\nimport LoginScreen from './components/LoginScreen';\nimport HomeScreen from './components/HomeScreen';\nimport CollectionScreen from './components/CollectionScreen';\nimport NewImageModal from './components/NewImageModal';\nimport ImageDetailModal from './components/ImageDetailModal';\nimport './styles/animations.css'; // Import the animations\n\nAmplify.configure(awsExports);\n\nconst DailyImageCollector = () => {\n  const [authUser, setAuthUser] = useState(null);\n  const [isAuthLoading, setIsAuthLoading] = useState(true);\n  const [isCardNew, setIsCardNew] = useState(false);\n\n  const {\n    user,\n    login,\n    logout: gameLogout,\n    currentView,\n    setCurrentView,\n    userCollection,\n    todaysClaim,\n    drawDailyImage,\n    loading,\n    getStreakCount,\n    imageDatabase,\n    showNewImage,\n    setShowNewImage,\n    todaysImage,\n    shakeAnimation,\n    setShakeAnimation,\n    selectedImage,\n    setSelectedImage,\n    isFullscreen,\n    setIsFullscreen,\n    // New properties for 3 draws per day\n    dailyDrawsRemaining,  // How many draws left today (0-3)\n    totalDrawsToday,      // How many draws used today (0-3)\n    drawsResetTime,       // When draws reset (next midnight)\n    canDraw,              // Function to check if user can draw\n    getDrawButtonText,    // Function to get dynamic button text\n    getTimeUntilReset,    // Function to get time until reset\n    MAX_DRAWS_PER_DAY     // Maximum draws per day (3)\n  } = useGameLogic();\n\n  // Check authentication state on app load\n  useEffect(() => {\n    checkAuthState();\n  }, []);\n\n  const checkAuthState = async () => {\n    try {\n      const cognitoUser = await getCurrentUser();\n      console.log('Authenticated user found:', cognitoUser);\n      setAuthUser(cognitoUser);\n      \n      // Auto-login with Cognito user data\n      const username = cognitoUser.username;\n      const email = cognitoUser.signInDetails?.loginId || '';\n      login(username, email);\n    } catch (error) {\n      console.log('No authenticated user found');\n      setAuthUser(null);\n    }\n    setIsAuthLoading(false);\n  };\n\n  // Check if the current card is new for the user when todaysImage changes\n  useEffect(() => {\n    if (todaysImage && userCollection) {\n      // Extract base ID (part before underscore) from todaysImage\n      const todaysBaseId = todaysImage.id.toString().split('_')[0];\n      \n      // Exclude the last entry (just drawn card) when checking if it's new\n      const collectionWithoutLastCard = userCollection.slice(0, -1);\n      \n      // Check if user had any card with this base ID before drawing this one\n      const userHadCard = collectionWithoutLastCard.some(card => {\n        const cardBaseId = card.id.toString().split('_')[0];\n        return cardBaseId === todaysBaseId;\n      });\n      \n      console.log('=== Card Check Debug ===');\n      console.log('todaysImage:', todaysImage);\n      console.log('todaysImage full ID:', todaysImage.id);\n      console.log('todaysImage base ID:', todaysBaseId);\n      console.log('userCollection length:', userCollection.length);\n      console.log('collection without last card:', collectionWithoutLastCard.map(card => card.id.toString().split('_')[0]));\n      console.log('userHadCard before:', userHadCard);\n      console.log('Setting isCardNew to:', !userHadCard);\n      console.log('dailyDrawsRemaining:', dailyDrawsRemaining);\n      console.log('totalDrawsToday:', totalDrawsToday);\n      console.log('drawsResetTime:', drawsResetTime);\n      console.log('========================');\n      setIsCardNew(!userHadCard);\n    }\n  }, [todaysImage, userCollection, dailyDrawsRemaining, totalDrawsToday]);\n\n  // Enhanced login function that handles both Cognito and demo users\n  const handleLogin = async (username, email) => {\n    // For admin users, skip Cognito authentication\n    if (username === 'admin') {\n      login(username, email);\n      setAuthUser({ username, email, isAdminUser: true });\n      return;\n    }\n\n    // For real users, they should already be authenticated through Cognito\n    // This function is called after successful Cognito auth\n    login(username, email);\n  };\n\n  // Enhanced logout function\n  const handleLogout = async () => {\n    try {\n      // Only sign out from Cognito if it's not an admin user\n      if (authUser && !authUser.isAdminUser) {\n        await signOut();\n      }\n      setAuthUser(null);\n      gameLogout();\n    } catch (error) {\n      console.error('Error signing out:', error);\n      // Force logout even if Cognito signout fails\n      setAuthUser(null);\n      gameLogout();\n    }\n  };\n\n  // Check if the current card is new for the user\n  const isNewCard = () => {\n    return isCardNew;\n  };\n\n  // Show loading screen while checking authentication\n  if (isAuthLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 to-blue-600\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-4 border-white mb-4\"></div>\n          <p className=\"text-white text-xl font-bold\">Chargement de Pocket Machicoulis...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show login screen if no authenticated user and no game user\n  if (!authUser && !user) {\n    return <LoginScreen login={handleLogin} />;\n  }\n\n  return (\n    <div>\n      {currentView === 'home' && (\n        <HomeScreen\n          user={user}\n          logout={handleLogout}\n          drawDailyImage={drawDailyImage}\n          loading={loading}\n          todaysClaim={todaysClaim}\n          userCollection={userCollection}\n          getStreakCount={getStreakCount}\n          imageDatabase={imageDatabase}\n          setCurrentView={setCurrentView}\n          // All new 3-draws-per-day props\n          dailyDrawsRemaining={dailyDrawsRemaining}\n          totalDrawsToday={totalDrawsToday}\n          drawsResetTime={drawsResetTime}\n          canDraw={canDraw}\n          getDrawButtonText={getDrawButtonText}\n          getTimeUntilReset={getTimeUntilReset}\n          MAX_DRAWS_PER_DAY={MAX_DRAWS_PER_DAY}\n        />\n      )}\n      {currentView === 'collection' && (\n        <CollectionScreen\n          userCollection={userCollection}\n          imageDatabase={imageDatabase}\n          setCurrentView={setCurrentView}\n          setSelectedImage={setSelectedImage}\n        />\n      )}\n      <NewImageModal\n        showNewImage={showNewImage}\n        setShowNewImage={setShowNewImage}\n        todaysImage={todaysImage}\n        shakeAnimation={shakeAnimation}\n        setShakeAnimation={setShakeAnimation}\n        isNewCard={isNewCard()}\n        userCollection={userCollection}\n      />\n      <ImageDetailModal\n        selectedImage={selectedImage}\n        setSelectedImage={setSelectedImage}\n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n      />\n    </div>\n  );\n};\n\nexport default DailyImageCollector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}