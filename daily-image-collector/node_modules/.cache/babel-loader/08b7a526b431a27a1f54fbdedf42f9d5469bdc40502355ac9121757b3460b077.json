{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveEndpointId = void 0;\nconst errors_1 = require(\"../../../errors\");\nconst types_1 = require(\"../../../types\");\nconst updateEndpoint_1 = require(\"../apis/updateEndpoint\");\nconst getEndpointId_1 = require(\"./getEndpointId\");\n/**\n * Resolves an endpoint id from cache or prepare via updateEndpoint if one does not already exist,\n * which will generate and cache an endpoint id between calls.\n *\n * @internal\n */\nconst resolveEndpointId = async ({\n  address,\n  appId,\n  category,\n  channelType,\n  credentials,\n  identityId,\n  region,\n  userAgentValue\n}) => {\n  let endpointId = await (0, getEndpointId_1.getEndpointId)(appId, category);\n  if (!endpointId) {\n    await (0, updateEndpoint_1.updateEndpoint)({\n      address,\n      appId,\n      category,\n      channelType,\n      credentials,\n      identityId,\n      region,\n      userAgentValue\n    });\n    endpointId = await (0, getEndpointId_1.getEndpointId)(appId, category);\n  }\n  (0, errors_1.assert)(!!endpointId, types_1.AmplifyErrorCode.NoEndpointId);\n  return endpointId;\n};\nexports.resolveEndpointId = resolveEndpointId;","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveEndpointId","errors_1","require","types_1","updateEndpoint_1","getEndpointId_1","address","appId","category","channelType","credentials","identityId","region","userAgentValue","endpointId","getEndpointId","updateEndpoint","assert","AmplifyErrorCode","NoEndpointId"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\providers\\pinpoint\\utils\\resolveEndpointId.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveEndpointId = void 0;\nconst errors_1 = require(\"../../../errors\");\nconst types_1 = require(\"../../../types\");\nconst updateEndpoint_1 = require(\"../apis/updateEndpoint\");\nconst getEndpointId_1 = require(\"./getEndpointId\");\n/**\n * Resolves an endpoint id from cache or prepare via updateEndpoint if one does not already exist,\n * which will generate and cache an endpoint id between calls.\n *\n * @internal\n */\nconst resolveEndpointId = async ({ address, appId, category, channelType, credentials, identityId, region, userAgentValue, }) => {\n    let endpointId = await (0, getEndpointId_1.getEndpointId)(appId, category);\n    if (!endpointId) {\n        await (0, updateEndpoint_1.updateEndpoint)({\n            address,\n            appId,\n            category,\n            channelType,\n            credentials,\n            identityId,\n            region,\n            userAgentValue,\n        });\n        endpointId = await (0, getEndpointId_1.getEndpointId)(appId, category);\n    }\n    (0, errors_1.assert)(!!endpointId, types_1.AmplifyErrorCode.NoEndpointId);\n    return endpointId;\n};\nexports.resolveEndpointId = resolveEndpointId;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,MAAM;AAClC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAME,gBAAgB,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAC1D,MAAMG,eAAe,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,iBAAiB,GAAG,MAAAA,CAAO;EAAEM,OAAO;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,WAAW;EAAEC,UAAU;EAAEC,MAAM;EAAEC;AAAc,CAAG,KAAK;EAC7H,IAAIC,UAAU,GAAG,MAAM,IAAIT,eAAe,CAACU,aAAa,EAAER,KAAK,EAAEC,QAAQ,CAAC;EAC1E,IAAI,CAACM,UAAU,EAAE;IACb,MAAM,IAAIV,gBAAgB,CAACY,cAAc,EAAE;MACvCV,OAAO;MACPC,KAAK;MACLC,QAAQ;MACRC,WAAW;MACXC,WAAW;MACXC,UAAU;MACVC,MAAM;MACNC;IACZ,CAAS,CAAC;IACFC,UAAU,GAAG,MAAM,IAAIT,eAAe,CAACU,aAAa,EAAER,KAAK,EAAEC,QAAQ,CAAC;EAC9E;EACI,IAAIP,QAAQ,CAACgB,MAAM,EAAE,CAAC,CAACH,UAAU,EAAEX,OAAO,CAACe,gBAAgB,CAACC,YAAY,CAAC;EACzE,OAAOL,UAAU;AACrB,CAAC;AACDhB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}