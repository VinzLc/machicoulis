{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRetryDecider = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\n/**\n * Factory of a {@link RetryDecider} function.\n *\n * @param errorParser function to parse HTTP response wth XML payload to JS\n * \tError instance.\n * @returns A structure indicating if the response is retryable; And if it is a\n * \tCredentialsExpiredError\n */\nconst createRetryDecider = errorParser => async (response, error, middlewareContext) => {\n  const defaultRetryDecider = (0, aws_client_utils_1.getRetryDecider)(errorParser);\n  const defaultRetryDecision = await defaultRetryDecider(response, error);\n  if (!response) {\n    return {\n      retryable: defaultRetryDecision.retryable\n    };\n  }\n  const parsedError = await errorParser(response);\n  const errorCode = parsedError?.name;\n  const errorMessage = parsedError?.message;\n  const isCredentialsExpired = isCredentialsExpiredError(errorCode, errorMessage);\n  return {\n    retryable: defaultRetryDecision.retryable ||\n    // If we know the previous retry attempt sets isCredentialsExpired in the\n    // middleware context, we don't want to retry anymore.\n    !!(isCredentialsExpired && !middlewareContext?.isCredentialsExpired),\n    isCredentialsExpiredError: isCredentialsExpired\n  };\n};\nexports.createRetryDecider = createRetryDecider;\n// Ref: https://github.com/aws/aws-sdk-js/blob/54829e341181b41573c419bd870dd0e0f8f10632/lib/event_listeners.js#L522-L541\nconst INVALID_TOKEN_ERROR_CODES = ['RequestExpired', 'ExpiredTokenException', 'ExpiredToken'];\n/**\n * Given an error code, returns true if it is related to invalid credentials.\n *\n * @param errorCode String representation of some error.\n * @returns True if given error indicates the credentials used to authorize request\n * are invalid.\n */\nconst isCredentialsExpiredError = (errorCode, errorMessage) => {\n  const isExpiredTokenError = !!errorCode && INVALID_TOKEN_ERROR_CODES.includes(errorCode);\n  // Ref: https://github.com/aws/aws-sdk-js/blob/54829e341181b41573c419bd870dd0e0f8f10632/lib/event_listeners.js#L536-L539\n  const isExpiredSignatureError = !!errorCode && !!errorMessage && errorCode.includes('Signature') && errorMessage.includes('expired');\n  return isExpiredTokenError || isExpiredSignatureError;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","createRetryDecider","aws_client_utils_1","require","errorParser","response","error","middlewareContext","defaultRetryDecider","getRetryDecider","defaultRetryDecision","retryable","parsedError","errorCode","name","errorMessage","message","isCredentialsExpired","isCredentialsExpiredError","INVALID_TOKEN_ERROR_CODES","isExpiredTokenError","includes","isExpiredSignatureError"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\utils\\createRetryDecider.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createRetryDecider = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\n/**\n * Factory of a {@link RetryDecider} function.\n *\n * @param errorParser function to parse HTTP response wth XML payload to JS\n * \tError instance.\n * @returns A structure indicating if the response is retryable; And if it is a\n * \tCredentialsExpiredError\n */\nconst createRetryDecider = (errorParser) => async (response, error, middlewareContext) => {\n    const defaultRetryDecider = (0, aws_client_utils_1.getRetryDecider)(errorParser);\n    const defaultRetryDecision = await defaultRetryDecider(response, error);\n    if (!response) {\n        return { retryable: defaultRetryDecision.retryable };\n    }\n    const parsedError = await errorParser(response);\n    const errorCode = parsedError?.name;\n    const errorMessage = parsedError?.message;\n    const isCredentialsExpired = isCredentialsExpiredError(errorCode, errorMessage);\n    return {\n        retryable: defaultRetryDecision.retryable ||\n            // If we know the previous retry attempt sets isCredentialsExpired in the\n            // middleware context, we don't want to retry anymore.\n            !!(isCredentialsExpired && !middlewareContext?.isCredentialsExpired),\n        isCredentialsExpiredError: isCredentialsExpired,\n    };\n};\nexports.createRetryDecider = createRetryDecider;\n// Ref: https://github.com/aws/aws-sdk-js/blob/54829e341181b41573c419bd870dd0e0f8f10632/lib/event_listeners.js#L522-L541\nconst INVALID_TOKEN_ERROR_CODES = [\n    'RequestExpired',\n    'ExpiredTokenException',\n    'ExpiredToken',\n];\n/**\n * Given an error code, returns true if it is related to invalid credentials.\n *\n * @param errorCode String representation of some error.\n * @returns True if given error indicates the credentials used to authorize request\n * are invalid.\n */\nconst isCredentialsExpiredError = (errorCode, errorMessage) => {\n    const isExpiredTokenError = !!errorCode && INVALID_TOKEN_ERROR_CODES.includes(errorCode);\n    // Ref: https://github.com/aws/aws-sdk-js/blob/54829e341181b41573c419bd870dd0e0f8f10632/lib/event_listeners.js#L536-L539\n    const isExpiredSignatureError = !!errorCode &&\n        !!errorMessage &&\n        errorCode.includes('Signature') &&\n        errorMessage.includes('expired');\n    return isExpiredTokenError || isExpiredSignatureError;\n};\n"],"mappings":";;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,MAAM;AACnC;AACA;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,kBAAkB,GAAIG,WAAW,IAAK,OAAOC,QAAQ,EAAEC,KAAK,EAAEC,iBAAiB,KAAK;EACtF,MAAMC,mBAAmB,GAAG,IAAIN,kBAAkB,CAACO,eAAe,EAAEL,WAAW,CAAC;EAChF,MAAMM,oBAAoB,GAAG,MAAMF,mBAAmB,CAACH,QAAQ,EAAEC,KAAK,CAAC;EACvE,IAAI,CAACD,QAAQ,EAAE;IACX,OAAO;MAAEM,SAAS,EAAED,oBAAoB,CAACC;IAAS,CAAE;EAC5D;EACI,MAAMC,WAAW,GAAG,MAAMR,WAAW,CAACC,QAAQ,CAAC;EAC/C,MAAMQ,SAAS,GAAGD,WAAW,EAAEE,IAAI;EACnC,MAAMC,YAAY,GAAGH,WAAW,EAAEI,OAAO;EACzC,MAAMC,oBAAoB,GAAGC,yBAAyB,CAACL,SAAS,EAAEE,YAAY,CAAC;EAC/E,OAAO;IACHJ,SAAS,EAAED,oBAAoB,CAACC,SAAS;IACjD;IACA;IACY,CAAC,EAAEM,oBAAoB,IAAI,CAACV,iBAAiB,EAAEU,oBAAoB,CAAC;IACxEC,yBAAyB,EAAED;EACnC,CAAK;AACL,CAAC;AACDlB,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA,MAAMkB,yBAAyB,GAAG,CAC9B,gBAAgB,EAChB,uBAAuB,EACvB,cAAc,CACjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,yBAAyB,GAAGA,CAACL,SAAS,EAAEE,YAAY,KAAK;EAC3D,MAAMK,mBAAmB,GAAG,CAAC,CAACP,SAAS,IAAIM,yBAAyB,CAACE,QAAQ,CAACR,SAAS,CAAC;EAC5F;EACI,MAAMS,uBAAuB,GAAG,CAAC,CAACT,SAAS,IACvC,CAAC,CAACE,YAAY,IACdF,SAAS,CAACQ,QAAQ,CAAC,WAAW,CAAC,IAC/BN,YAAY,CAACM,QAAQ,CAAC,SAAS,CAAC;EACpC,OAAOD,mBAAmB,IAAIE,uBAAuB;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}