{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useGameLogic.js\n\nimport { useState, useEffect, useCallback } from 'react';\nimport imageData from '../imageDatabase.json';\nconst imageDatabase = imageData.images;\nexport const useGameLogic = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [currentView, setCurrentView] = useState('home');\n  const [userCollection, setUserCollection] = useState([]);\n  const [todaysClaim, setTodaysClaim] = useState(false);\n  const [showNewImage, setShowNewImage] = useState(false);\n  const [todaysImage, setTodaysImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [collectionView, setCollectionView] = useState('obtained');\n  const [shakeAnimation, setShakeAnimation] = useState(true);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const loadUserData = useCallback(() => {\n    if (user) {\n      const collection = JSON.parse(localStorage.getItem(`collection_${user.username}`) || '[]');\n      setUserCollection(collection);\n    }\n  }, [user]);\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n      if (user.username === 'admin') {\n        setTodaysClaim(false);\n      } else {\n        const today = new Date().toDateString();\n        const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\n        setTodaysClaim(lastClaim === today);\n      }\n    }\n  }, [user, loadUserData]);\n  const getStreakCount = useCallback(() => {\n    if (!user) return 0;\n    return parseInt(localStorage.getItem(`streak_${user.username}`) || '0');\n  }, [user]);\n  const updateStreak = useCallback(() => {\n    if (!user) return;\n    const today = new Date().toDateString();\n    const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\n    let newStreak = lastClaim === yesterday ? getStreakCount() + 1 : 1;\n    localStorage.setItem(`streak_${user.username}`, newStreak.toString());\n  }, [user, getStreakCount]);\n  const login = (username, email) => {\n    const userData = {\n      username,\n      email,\n      joinDate: new Date().toISOString()\n    };\n    setUser(userData);\n    setCurrentView('home');\n  };\n  const logout = () => {\n    setUser(null);\n    setCurrentView('home');\n    setUserCollection([]);\n    setTodaysClaim(false);\n  };\n  const drawDailyImage = useCallback(() => {\n    if (todaysClaim || loading) return;\n    setLoading(true);\n    setTimeout(() => {\n      try {\n        if (!imageDatabase || imageDatabase.length === 0) {\n          throw new Error('No images available in database');\n        }\n        const weights = {\n          Common: 50,\n          Rare: 30,\n          Epic: 15,\n          Legendary: 5\n        };\n        const totalWeight = Object.values(weights).reduce((a, b) => a + b, 0);\n        const random = Math.random() * totalWeight;\n        let currentWeight = 0;\n        let selectedRarity = 'Common';\n        for (const [rarity, weight] of Object.entries(weights)) {\n          currentWeight += weight;\n          if (random <= currentWeight) {\n            selectedRarity = rarity;\n            break;\n          }\n        }\n        let availableImages = imageDatabase.filter(img => img.rarity === selectedRarity);\n        if (availableImages.length === 0) {\n          availableImages = imageDatabase.filter(img => img.rarity === 'Common');\n          if (availableImages.length === 0) throw new Error('No images available');\n        }\n        const drawnImage = availableImages[Math.floor(Math.random() * availableImages.length)];\n        const newCollection = [...userCollection, {\n          ...drawnImage,\n          dateObtained: new Date().toISOString(),\n          id: `${drawnImage.id}_${Date.now()}`,\n          imageUrl: drawnImage.url,\n          imageName: drawnImage.name\n        }];\n        setUserCollection(newCollection);\n        localStorage.setItem(`collection_${user.username}`, JSON.stringify(newCollection));\n        if (user.username !== 'admin') {\n          updateStreak();\n          const today = new Date().toDateString();\n          localStorage.setItem(`lastClaim_${user.username}`, today);\n          setTodaysClaim(true);\n        }\n        setTodaysImage(drawnImage);\n        setShakeAnimation(true);\n        setShowNewImage(true);\n        setTimeout(() => setShakeAnimation(false), 5000);\n      } catch (error) {\n        console.error('Error drawing daily image:', error);\n        alert(`Error: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    }, 1500);\n  }, [todaysClaim, loading, userCollection, user, updateStreak]);\n  return {\n    user,\n    currentView,\n    setCurrentView,\n    userCollection,\n    todaysClaim,\n    showNewImage,\n    setShowNewImage,\n    todaysImage,\n    loading,\n    selectedImage,\n    setSelectedImage,\n    collectionView,\n    setCollectionView,\n    shakeAnimation,\n    setShakeAnimation,\n    isFullscreen,\n    setIsFullscreen,\n    imageDatabase,\n    login,\n    logout,\n    drawDailyImage,\n    getStreakCount\n  };\n};\n_s(useGameLogic, \"PTIq3p47EPNGMZBD9+BP/yVyHZM=\");","map":{"version":3,"names":["useState","useEffect","useCallback","imageData","imageDatabase","images","useGameLogic","_s","user","setUser","currentView","setCurrentView","userCollection","setUserCollection","todaysClaim","setTodaysClaim","showNewImage","setShowNewImage","todaysImage","setTodaysImage","loading","setLoading","selectedImage","setSelectedImage","collectionView","setCollectionView","shakeAnimation","setShakeAnimation","isFullscreen","setIsFullscreen","loadUserData","collection","JSON","parse","localStorage","getItem","username","today","Date","toDateString","lastClaim","getStreakCount","parseInt","updateStreak","yesterday","now","newStreak","setItem","toString","login","email","userData","joinDate","toISOString","logout","drawDailyImage","setTimeout","length","Error","weights","Common","Rare","Epic","Legendary","totalWeight","Object","values","reduce","a","b","random","Math","currentWeight","selectedRarity","rarity","weight","entries","availableImages","filter","img","drawnImage","floor","newCollection","dateObtained","id","imageUrl","url","imageName","name","stringify","error","console","alert","message"],"sources":["C:/Users/vinzl/workspace/machicoulis/daily-image-collector/src/hooks/useGameLogic.js"],"sourcesContent":["// src/hooks/useGameLogic.js\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport imageData from '../imageDatabase.json';\r\n\r\nconst imageDatabase = imageData.images;\r\n\r\nexport const useGameLogic = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [currentView, setCurrentView] = useState('home');\r\n  const [userCollection, setUserCollection] = useState([]);\r\n  const [todaysClaim, setTodaysClaim] = useState(false);\r\n  const [showNewImage, setShowNewImage] = useState(false);\r\n  const [todaysImage, setTodaysImage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [collectionView, setCollectionView] = useState('obtained');\r\n  const [shakeAnimation, setShakeAnimation] = useState(true);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n\r\n  const loadUserData = useCallback(() => {\r\n    if (user) {\r\n      const collection = JSON.parse(localStorage.getItem(`collection_${user.username}`) || '[]');\r\n      setUserCollection(collection);\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadUserData();\r\n      if (user.username === 'admin') {\r\n        setTodaysClaim(false);\r\n      } else {\r\n        const today = new Date().toDateString();\r\n        const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\r\n        setTodaysClaim(lastClaim === today);\r\n      }\r\n    }\r\n  }, [user, loadUserData]);\r\n\r\n  const getStreakCount = useCallback(() => {\r\n    if (!user) return 0;\r\n    return parseInt(localStorage.getItem(`streak_${user.username}`) || '0');\r\n  }, [user]);\r\n\r\n  const updateStreak = useCallback(() => {\r\n    if (!user) return;\r\n    const today = new Date().toDateString();\r\n    const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\r\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\r\n    \r\n    let newStreak = (lastClaim === yesterday) ? getStreakCount() + 1 : 1;\r\n    localStorage.setItem(`streak_${user.username}`, newStreak.toString());\r\n  }, [user, getStreakCount]);\r\n\r\n  const login = (username, email) => {\r\n    const userData = { username, email, joinDate: new Date().toISOString() };\r\n    setUser(userData);\r\n    setCurrentView('home');\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setCurrentView('home');\r\n    setUserCollection([]);\r\n    setTodaysClaim(false);\r\n  };\r\n\r\n  const drawDailyImage = useCallback(() => {\r\n    if (todaysClaim || loading) return;\r\n    setLoading(true);\r\n    \r\n    setTimeout(() => {\r\n      try {\r\n        if (!imageDatabase || imageDatabase.length === 0) {\r\n          throw new Error('No images available in database');\r\n        }\r\n        \r\n        const weights = { Common: 50, Rare: 30, Epic: 15, Legendary: 5 };\r\n        const totalWeight = Object.values(weights).reduce((a, b) => a + b, 0);\r\n        const random = Math.random() * totalWeight;\r\n        \r\n        let currentWeight = 0;\r\n        let selectedRarity = 'Common';\r\n        for (const [rarity, weight] of Object.entries(weights)) {\r\n          currentWeight += weight;\r\n          if (random <= currentWeight) {\r\n            selectedRarity = rarity;\r\n            break;\r\n          }\r\n        }\r\n\r\n        let availableImages = imageDatabase.filter(img => img.rarity === selectedRarity);\r\n        if (availableImages.length === 0) {\r\n            availableImages = imageDatabase.filter(img => img.rarity === 'Common');\r\n            if(availableImages.length === 0) throw new Error('No images available');\r\n        }\r\n\r\n        const drawnImage = availableImages[Math.floor(Math.random() * availableImages.length)];\r\n        \r\n        const newCollection = [...userCollection, { \r\n          ...drawnImage, \r\n          dateObtained: new Date().toISOString(),\r\n          id: `${drawnImage.id}_${Date.now()}`,\r\n          imageUrl: drawnImage.url,\r\n          imageName: drawnImage.name\r\n        }];\r\n        \r\n        setUserCollection(newCollection);\r\n        localStorage.setItem(`collection_${user.username}`, JSON.stringify(newCollection));\r\n        \r\n        if (user.username !== 'admin') {\r\n          updateStreak();\r\n          const today = new Date().toDateString();\r\n          localStorage.setItem(`lastClaim_${user.username}`, today);\r\n          setTodaysClaim(true);\r\n        }\r\n        \r\n        setTodaysImage(drawnImage);\r\n        setShakeAnimation(true);\r\n        setShowNewImage(true);\r\n        \r\n        setTimeout(() => setShakeAnimation(false), 5000);\r\n      } catch (error) {\r\n        console.error('Error drawing daily image:', error);\r\n        alert(`Error: ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, 1500);\r\n  }, [todaysClaim, loading, userCollection, user, updateStreak]);\r\n\r\n  return {\r\n    user,\r\n    currentView,\r\n    setCurrentView,\r\n    userCollection,\r\n    todaysClaim,\r\n    showNewImage,\r\n    setShowNewImage,\r\n    todaysImage,\r\n    loading,\r\n    selectedImage,\r\n    setSelectedImage,\r\n    collectionView,\r\n    setCollectionView,\r\n    shakeAnimation,\r\n    setShakeAnimation,\r\n    isFullscreen,\r\n    setIsFullscreen,\r\n    imageDatabase,\r\n    login,\r\n    logout,\r\n    drawDailyImage,\r\n    getStreakCount,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}