{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthClass = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst Logger_1 = require(\"../../Logger\");\nconst logger = new Logger_1.ConsoleLogger('Auth');\nclass AuthClass {\n  /**\n   * Configure Auth category\n   *\n   * @internal\n   *\n   * @param authResourcesConfig - Resources configurations required by Auth providers.\n   * @param authOptions - Client options used by library\n   *\n   * @returns void\n   */\n  configure(authResourcesConfig, authOptions) {\n    this.authConfig = authResourcesConfig;\n    this.authOptions = authOptions;\n    if (authResourcesConfig && authResourcesConfig.Cognito?.userPoolEndpoint) {\n      logger.warn(getCustomEndpointWarningMessage('Amazon Cognito User Pool'));\n    }\n    if (authResourcesConfig && authResourcesConfig.Cognito?.identityPoolEndpoint) {\n      logger.warn(getCustomEndpointWarningMessage('Amazon Cognito Identity Pool'));\n    }\n  }\n  /**\n   * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it\n   * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh\n   * with `{ forceRefresh: true }` input.\n   *\n   * @param options - Options configuring the fetch behavior.\n   *\n   * @returns Promise of current auth session {@link AuthSession}.\n   */\n  async fetchAuthSession(options = {}) {\n    let credentialsAndIdentityId;\n    let userSub;\n    // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n    const tokens = await this.getTokens(options);\n    if (tokens) {\n      userSub = tokens.accessToken?.payload?.sub;\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        tokens,\n        authenticated: true,\n        forceRefresh: options.forceRefresh\n      });\n    } else {\n      // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n      credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n        authConfig: this.authConfig,\n        authenticated: false,\n        forceRefresh: options.forceRefresh\n      });\n    }\n    return {\n      tokens,\n      credentials: credentialsAndIdentityId?.credentials,\n      identityId: credentialsAndIdentityId?.identityId,\n      userSub\n    };\n  }\n  async clearCredentials() {\n    await this.authOptions?.credentialsProvider?.clearCredentialsAndIdentityId();\n  }\n  async getTokens(options) {\n    return (await this.authOptions?.tokenProvider?.getTokens(options)) ?? undefined;\n  }\n}\nexports.AuthClass = AuthClass;\nconst getCustomEndpointWarningMessage = target => `You are using a custom Amazon ${target} endpoint, ensure the endpoint is correct.`;","map":{"version":3,"names":["Object","defineProperty","exports","value","AuthClass","Logger_1","require","logger","ConsoleLogger","configure","authResourcesConfig","authOptions","authConfig","Cognito","userPoolEndpoint","warn","getCustomEndpointWarningMessage","identityPoolEndpoint","fetchAuthSession","options","credentialsAndIdentityId","userSub","tokens","getTokens","accessToken","payload","sub","credentialsProvider","getCredentialsAndIdentityId","authenticated","forceRefresh","credentials","identityId","clearCredentials","clearCredentialsAndIdentityId","tokenProvider","undefined","target"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\singleton\\Auth\\index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClass = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst Logger_1 = require(\"../../Logger\");\nconst logger = new Logger_1.ConsoleLogger('Auth');\nclass AuthClass {\n    /**\n     * Configure Auth category\n     *\n     * @internal\n     *\n     * @param authResourcesConfig - Resources configurations required by Auth providers.\n     * @param authOptions - Client options used by library\n     *\n     * @returns void\n     */\n    configure(authResourcesConfig, authOptions) {\n        this.authConfig = authResourcesConfig;\n        this.authOptions = authOptions;\n        if (authResourcesConfig && authResourcesConfig.Cognito?.userPoolEndpoint) {\n            logger.warn(getCustomEndpointWarningMessage('Amazon Cognito User Pool'));\n        }\n        if (authResourcesConfig &&\n            authResourcesConfig.Cognito?.identityPoolEndpoint) {\n            logger.warn(getCustomEndpointWarningMessage('Amazon Cognito Identity Pool'));\n        }\n    }\n    /**\n     * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it\n     * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh\n     * with `{ forceRefresh: true }` input.\n     *\n     * @param options - Options configuring the fetch behavior.\n     *\n     * @returns Promise of current auth session {@link AuthSession}.\n     */\n    async fetchAuthSession(options = {}) {\n        let credentialsAndIdentityId;\n        let userSub;\n        // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n        const tokens = await this.getTokens(options);\n        if (tokens) {\n            userSub = tokens.accessToken?.payload?.sub;\n            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n            credentialsAndIdentityId =\n                await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n                    authConfig: this.authConfig,\n                    tokens,\n                    authenticated: true,\n                    forceRefresh: options.forceRefresh,\n                });\n        }\n        else {\n            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n            credentialsAndIdentityId =\n                await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n                    authConfig: this.authConfig,\n                    authenticated: false,\n                    forceRefresh: options.forceRefresh,\n                });\n        }\n        return {\n            tokens,\n            credentials: credentialsAndIdentityId?.credentials,\n            identityId: credentialsAndIdentityId?.identityId,\n            userSub,\n        };\n    }\n    async clearCredentials() {\n        await this.authOptions?.credentialsProvider?.clearCredentialsAndIdentityId();\n    }\n    async getTokens(options) {\n        return ((await this.authOptions?.tokenProvider?.getTokens(options)) ?? undefined);\n    }\n}\nexports.AuthClass = AuthClass;\nconst getCustomEndpointWarningMessage = (target) => `You are using a custom Amazon ${target} endpoint, ensure the endpoint is correct.`;\n"],"mappings":";;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,MAAM;AAC1B;AACA;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMC,MAAM,GAAG,IAAIF,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;AACjD,MAAMJ,SAAS,CAAC;EAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,SAASA,CAACC,mBAAmB,EAAEC,WAAW,EAAE;IACxC,IAAI,CAACC,UAAU,GAAGF,mBAAmB;IACrC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAID,mBAAmB,IAAIA,mBAAmB,CAACG,OAAO,EAAEC,gBAAgB,EAAE;MACtEP,MAAM,CAACQ,IAAI,CAACC,+BAA+B,CAAC,0BAA0B,CAAC,CAAC;IACpF;IACQ,IAAIN,mBAAmB,IACnBA,mBAAmB,CAACG,OAAO,EAAEI,oBAAoB,EAAE;MACnDV,MAAM,CAACQ,IAAI,CAACC,+BAA+B,CAAC,8BAA8B,CAAC,CAAC;IACxF;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,gBAAgBA,CAACC,OAAO,GAAG,EAAE,EAAE;IACjC,IAAIC,wBAAwB;IAC5B,IAAIC,OAAO;IACnB;IACQ,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC;IAC5C,IAAIG,MAAM,EAAE;MACRD,OAAO,GAAGC,MAAM,CAACE,WAAW,EAAEC,OAAO,EAAEC,GAAG;MACtD;MACYN,wBAAwB,GACpB,MAAM,IAAI,CAACT,WAAW,EAAEgB,mBAAmB,EAAEC,2BAA2B,CAAC;QACrEhB,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BU,MAAM;QACNO,aAAa,EAAE,IAAI;QACnBC,YAAY,EAAEX,OAAO,CAACW;MAC1C,CAAiB,CAAC;IAClB,OACa;MACb;MACYV,wBAAwB,GACpB,MAAM,IAAI,CAACT,WAAW,EAAEgB,mBAAmB,EAAEC,2BAA2B,CAAC;QACrEhB,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BiB,aAAa,EAAE,KAAK;QACpBC,YAAY,EAAEX,OAAO,CAACW;MAC1C,CAAiB,CAAC;IAClB;IACQ,OAAO;MACHR,MAAM;MACNS,WAAW,EAAEX,wBAAwB,EAAEW,WAAW;MAClDC,UAAU,EAAEZ,wBAAwB,EAAEY,UAAU;MAChDX;IACZ,CAAS;EACT;EACI,MAAMY,gBAAgBA,CAAA,EAAG;IACrB,MAAM,IAAI,CAACtB,WAAW,EAAEgB,mBAAmB,EAAEO,6BAA6B,EAAE;EACpF;EACI,MAAMX,SAASA,CAACJ,OAAO,EAAE;IACrB,OAAQ,CAAC,MAAM,IAAI,CAACR,WAAW,EAAEwB,aAAa,EAAEZ,SAAS,CAACJ,OAAO,CAAC,KAAKiB,SAAS;EACxF;AACA;AACAlC,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7B,MAAMY,+BAA+B,GAAIqB,MAAM,IAAK,iCAAiCA,MAAM,4CAA4C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}