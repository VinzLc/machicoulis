{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCancelError = exports.CanceledError = void 0;\nconst StorageError_1 = require(\"./StorageError\");\n/**\n * Internal-only class for CanceledError thrown by XHR handler or multipart upload when cancellation is invoked\n * without overwriting behavior.\n *\n * @internal\n */\nclass CanceledError extends StorageError_1.StorageError {\n  constructor(params = {}) {\n    super({\n      name: 'CanceledError',\n      message: 'Upload is canceled by user',\n      ...params\n    });\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = CanceledError;\n    Object.setPrototypeOf(this, CanceledError.prototype);\n  }\n}\nexports.CanceledError = CanceledError;\n/**\n * Check if an error is caused by user calling `cancel()` on a upload/download task. If an overwriting error is\n * supplied to `task.cancel(errorOverwrite)`, this function will return `false`.\n * @param {unknown} error The unknown exception to be checked.\n * @returns - A boolean indicating if the error was from an upload cancellation\n */\nconst isCancelError = error => !!error && error instanceof CanceledError;\nexports.isCancelError = isCancelError;","map":{"version":3,"names":["Object","defineProperty","exports","value","isCancelError","CanceledError","StorageError_1","require","StorageError","constructor","params","name","message","setPrototypeOf","prototype","error"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\errors\\CanceledError.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCancelError = exports.CanceledError = void 0;\nconst StorageError_1 = require(\"./StorageError\");\n/**\n * Internal-only class for CanceledError thrown by XHR handler or multipart upload when cancellation is invoked\n * without overwriting behavior.\n *\n * @internal\n */\nclass CanceledError extends StorageError_1.StorageError {\n    constructor(params = {}) {\n        super({\n            name: 'CanceledError',\n            message: 'Upload is canceled by user',\n            ...params,\n        });\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = CanceledError;\n        Object.setPrototypeOf(this, CanceledError.prototype);\n    }\n}\nexports.CanceledError = CanceledError;\n/**\n * Check if an error is caused by user calling `cancel()` on a upload/download task. If an overwriting error is\n * supplied to `task.cancel(errorOverwrite)`, this function will return `false`.\n * @param {unknown} error The unknown exception to be checked.\n * @returns - A boolean indicating if the error was from an upload cancellation\n */\nconst isCancelError = (error) => !!error && error instanceof CanceledError;\nexports.isCancelError = isCancelError;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,aAAa,GAAG,MAAM;AACtD,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,aAAa,SAASC,cAAc,CAACE,YAAY,CAAC;EACpDC,WAAWA,CAACC,MAAM,GAAG,EAAE,EAAE;IACrB,KAAK,CAAC;MACFC,IAAI,EAAE,eAAe;MACrBC,OAAO,EAAE,4BAA4B;MACrC,GAAGF;IACf,CAAS,CAAC;IACV;IACQ,IAAI,CAACD,WAAW,GAAGJ,aAAa;IAChCL,MAAM,CAACa,cAAc,CAAC,IAAI,EAAER,aAAa,CAACS,SAAS,CAAC;EAC5D;AACA;AACAZ,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,aAAa,GAAIW,KAAK,IAAK,CAAC,CAACA,KAAK,IAAIA,KAAK,YAAYV,aAAa;AAC1EH,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}