{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateEndpoint = void 0;\nconst pinpoint_1 = require(\"../../../awsClients/pinpoint\");\nconst amplifyUuid_1 = require(\"../../../utils/amplifyUuid\");\nconst getClientInfo_1 = require(\"../../../utils/getClientInfo\");\nconst cacheEndpointId_1 = require(\"../utils/cacheEndpointId\");\nconst createEndpointId_1 = require(\"../utils/createEndpointId\");\nconst getEndpointId_1 = require(\"../utils/getEndpointId\");\n/**\n * @internal\n */\nconst updateEndpoint = async ({\n  address,\n  appId,\n  category,\n  channelType,\n  credentials,\n  identityId,\n  optOut,\n  region,\n  userAttributes,\n  userId,\n  userProfile,\n  userAgentValue\n}) => {\n  const endpointId = await (0, getEndpointId_1.getEndpointId)(appId, category);\n  // only generate a new endpoint id if one was not found in cache\n  const createdEndpointId = !endpointId ? (0, createEndpointId_1.createEndpointId)(appId, category) : undefined;\n  const {\n    customProperties,\n    demographic,\n    email,\n    location,\n    metrics,\n    name,\n    plan\n  } = userProfile ?? {};\n  // only automatically populate the endpoint with client info and identity id upon endpoint creation to\n  // avoid overwriting the endpoint with these values every time the endpoint is updated\n  const demographicsFromClientInfo = {};\n  const resolvedUserId = createdEndpointId ? userId ?? identityId : userId;\n  if (createdEndpointId) {\n    const clientInfo = (0, getClientInfo_1.getClientInfo)();\n    demographicsFromClientInfo.appVersion = clientInfo.appVersion;\n    demographicsFromClientInfo.make = clientInfo.make;\n    demographicsFromClientInfo.model = clientInfo.model;\n    demographicsFromClientInfo.modelVersion = clientInfo.version;\n    demographicsFromClientInfo.platform = clientInfo.platform;\n  }\n  const mergedDemographic = {\n    ...demographicsFromClientInfo,\n    ...demographic\n  };\n  const attributes = {\n    ...(email && {\n      email: [email]\n    }),\n    ...(name && {\n      name: [name]\n    }),\n    ...(plan && {\n      plan: [plan]\n    }),\n    ...customProperties\n  };\n  const shouldAddDemographics = createdEndpointId || demographic;\n  const shouldAddAttributes = email || customProperties || name || plan;\n  const shouldAddUser = resolvedUserId || userAttributes;\n  const input = {\n    ApplicationId: appId,\n    EndpointId: endpointId ?? createdEndpointId,\n    EndpointRequest: {\n      RequestId: (0, amplifyUuid_1.amplifyUuid)(),\n      EffectiveDate: new Date().toISOString(),\n      ChannelType: channelType,\n      Address: address,\n      ...(shouldAddAttributes && {\n        Attributes: attributes\n      }),\n      ...(shouldAddDemographics && {\n        Demographic: {\n          AppVersion: mergedDemographic.appVersion,\n          Locale: mergedDemographic.locale,\n          Make: mergedDemographic.make,\n          Model: mergedDemographic.model,\n          ModelVersion: mergedDemographic.modelVersion,\n          Platform: mergedDemographic.platform,\n          PlatformVersion: mergedDemographic.platformVersion,\n          Timezone: mergedDemographic.timezone\n        }\n      }),\n      ...(location && {\n        Location: {\n          City: location.city,\n          Country: location.country,\n          Latitude: location.latitude,\n          Longitude: location.longitude,\n          PostalCode: location.postalCode,\n          Region: location.region\n        }\n      }),\n      Metrics: metrics,\n      OptOut: optOut,\n      ...(shouldAddUser && {\n        User: {\n          UserId: resolvedUserId,\n          UserAttributes: userAttributes\n        }\n      })\n    }\n  };\n  try {\n    await (0, pinpoint_1.updateEndpoint)({\n      credentials,\n      region,\n      userAgentValue\n    }, input);\n    // if we had to create an endpoint id, we need to now cache it\n    if (createdEndpointId) {\n      await (0, cacheEndpointId_1.cacheEndpointId)(appId, category, createdEndpointId);\n    }\n  } finally {\n    // at this point, we completely reset the behavior so even if the update was unsuccessful\n    // we can just start over with a newly created endpoint id\n    if (createdEndpointId) {\n      (0, createEndpointId_1.clearCreatedEndpointId)(appId, category);\n    }\n  }\n};\nexports.updateEndpoint = updateEndpoint;","map":{"version":3,"names":["Object","defineProperty","exports","value","updateEndpoint","pinpoint_1","require","amplifyUuid_1","getClientInfo_1","cacheEndpointId_1","createEndpointId_1","getEndpointId_1","address","appId","category","channelType","credentials","identityId","optOut","region","userAttributes","userId","userProfile","userAgentValue","endpointId","getEndpointId","createdEndpointId","createEndpointId","undefined","customProperties","demographic","email","location","metrics","name","plan","demographicsFromClientInfo","resolvedUserId","clientInfo","getClientInfo","appVersion","make","model","modelVersion","version","platform","mergedDemographic","attributes","shouldAddDemographics","shouldAddAttributes","shouldAddUser","input","ApplicationId","EndpointId","EndpointRequest","RequestId","amplifyUuid","EffectiveDate","Date","toISOString","ChannelType","Address","Attributes","Demographic","AppVersion","Locale","locale","Make","Model","ModelVersion","Platform","PlatformVersion","platformVersion","Timezone","timezone","Location","City","city","Country","country","Latitude","latitude","Longitude","longitude","PostalCode","postalCode","Region","Metrics","OptOut","User","UserId","UserAttributes","cacheEndpointId","clearCreatedEndpointId"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\providers\\pinpoint\\apis\\updateEndpoint.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateEndpoint = void 0;\nconst pinpoint_1 = require(\"../../../awsClients/pinpoint\");\nconst amplifyUuid_1 = require(\"../../../utils/amplifyUuid\");\nconst getClientInfo_1 = require(\"../../../utils/getClientInfo\");\nconst cacheEndpointId_1 = require(\"../utils/cacheEndpointId\");\nconst createEndpointId_1 = require(\"../utils/createEndpointId\");\nconst getEndpointId_1 = require(\"../utils/getEndpointId\");\n/**\n * @internal\n */\nconst updateEndpoint = async ({ address, appId, category, channelType, credentials, identityId, optOut, region, userAttributes, userId, userProfile, userAgentValue, }) => {\n    const endpointId = await (0, getEndpointId_1.getEndpointId)(appId, category);\n    // only generate a new endpoint id if one was not found in cache\n    const createdEndpointId = !endpointId\n        ? (0, createEndpointId_1.createEndpointId)(appId, category)\n        : undefined;\n    const { customProperties, demographic, email, location, metrics, name, plan, } = userProfile ?? {};\n    // only automatically populate the endpoint with client info and identity id upon endpoint creation to\n    // avoid overwriting the endpoint with these values every time the endpoint is updated\n    const demographicsFromClientInfo = {};\n    const resolvedUserId = createdEndpointId ? (userId ?? identityId) : userId;\n    if (createdEndpointId) {\n        const clientInfo = (0, getClientInfo_1.getClientInfo)();\n        demographicsFromClientInfo.appVersion = clientInfo.appVersion;\n        demographicsFromClientInfo.make = clientInfo.make;\n        demographicsFromClientInfo.model = clientInfo.model;\n        demographicsFromClientInfo.modelVersion = clientInfo.version;\n        demographicsFromClientInfo.platform = clientInfo.platform;\n    }\n    const mergedDemographic = {\n        ...demographicsFromClientInfo,\n        ...demographic,\n    };\n    const attributes = {\n        ...(email && { email: [email] }),\n        ...(name && { name: [name] }),\n        ...(plan && { plan: [plan] }),\n        ...customProperties,\n    };\n    const shouldAddDemographics = createdEndpointId || demographic;\n    const shouldAddAttributes = email || customProperties || name || plan;\n    const shouldAddUser = resolvedUserId || userAttributes;\n    const input = {\n        ApplicationId: appId,\n        EndpointId: endpointId ?? createdEndpointId,\n        EndpointRequest: {\n            RequestId: (0, amplifyUuid_1.amplifyUuid)(),\n            EffectiveDate: new Date().toISOString(),\n            ChannelType: channelType,\n            Address: address,\n            ...(shouldAddAttributes && { Attributes: attributes }),\n            ...(shouldAddDemographics && {\n                Demographic: {\n                    AppVersion: mergedDemographic.appVersion,\n                    Locale: mergedDemographic.locale,\n                    Make: mergedDemographic.make,\n                    Model: mergedDemographic.model,\n                    ModelVersion: mergedDemographic.modelVersion,\n                    Platform: mergedDemographic.platform,\n                    PlatformVersion: mergedDemographic.platformVersion,\n                    Timezone: mergedDemographic.timezone,\n                },\n            }),\n            ...(location && {\n                Location: {\n                    City: location.city,\n                    Country: location.country,\n                    Latitude: location.latitude,\n                    Longitude: location.longitude,\n                    PostalCode: location.postalCode,\n                    Region: location.region,\n                },\n            }),\n            Metrics: metrics,\n            OptOut: optOut,\n            ...(shouldAddUser && {\n                User: {\n                    UserId: resolvedUserId,\n                    UserAttributes: userAttributes,\n                },\n            }),\n        },\n    };\n    try {\n        await (0, pinpoint_1.updateEndpoint)({ credentials, region, userAgentValue }, input);\n        // if we had to create an endpoint id, we need to now cache it\n        if (createdEndpointId) {\n            await (0, cacheEndpointId_1.cacheEndpointId)(appId, category, createdEndpointId);\n        }\n    }\n    finally {\n        // at this point, we completely reset the behavior so even if the update was unsuccessful\n        // we can just start over with a newly created endpoint id\n        if (createdEndpointId) {\n            (0, createEndpointId_1.clearCreatedEndpointId)(appId, category);\n        }\n    }\n};\nexports.updateEndpoint = updateEndpoint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}