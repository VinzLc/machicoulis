{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultipartUpload = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n  const headers = {\n    ...(await (0, utils_2.serializeObjectConfigsToHeaders)(input)),\n    ...(0, utils_2.assignStringVariables)({\n      'x-amz-checksum-algorithm': input.ChecksumAlgorithm,\n      'x-amz-checksum-type': input.ChecksumType,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n    })\n  };\n  const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n  (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n  url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n  url.search = 'uploads';\n  (0, validateObjectUrl_1.validateObjectUrl)({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'POST',\n    headers,\n    url\n  };\n};\nconst createMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw (0, utils_2.buildStorageServiceError)(await (0, base_1.parseXmlError)(response));\n  } else {\n    const parsed = await (0, utils_2.parseXmlBody)(response);\n    const contents = (0, utils_2.map)(parsed, {\n      UploadId: 'UploadId'\n    });\n    return {\n      $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n      ...contents\n    };\n  }\n};\nexports.createMultipartUpload = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, {\n  ...base_1.defaultConfig,\n  responseType: 'text'\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","createMultipartUpload","aws_client_utils_1","require","utils_1","composers_1","utils_2","validateObjectUrl_1","base_1","createMultipartUploadSerializer","input","endpoint","headers","serializeObjectConfigsToHeaders","assignStringVariables","ChecksumAlgorithm","ChecksumType","ExpectedBucketOwner","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","validateObjectUrl","bucketName","Bucket","key","objectURL","method","createMultipartUploadDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","parsed","parseXmlBody","contents","map","UploadId","$metadata","parseMetadata","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\createMultipartUpload.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMultipartUpload = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst createMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await (0, utils_2.serializeObjectConfigsToHeaders)(input)),\n        ...(0, utils_2.assignStringVariables)({\n            'x-amz-checksum-algorithm': input.ChecksumAlgorithm,\n            'x-amz-checksum-type': input.ChecksumType,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n    (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n    url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n    url.search = 'uploads';\n    (0, validateObjectUrl_1.validateObjectUrl)({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'POST',\n        headers,\n        url,\n    };\n};\nconst createMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw (0, utils_2.buildStorageServiceError)((await (0, base_1.parseXmlError)(response)));\n    }\n    else {\n        const parsed = await (0, utils_2.parseXmlBody)(response);\n        const contents = (0, utils_2.map)(parsed, {\n            UploadId: 'UploadId',\n        });\n        return {\n            $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n            ...contents,\n        };\n    }\n};\nexports.createMultipartUpload = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, { ...base_1.defaultConfig, responseType: 'text' });\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,MAAM;AACtC,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAClF,MAAMC,OAAO,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAC5D,MAAME,WAAW,GAAGF,OAAO,CAAC,wDAAwD,CAAC;AACrF,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMI,mBAAmB,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAC9D,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMM,+BAA+B,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC/D,MAAMC,OAAO,GAAG;IACZ,IAAI,MAAM,IAAIN,OAAO,CAACO,+BAA+B,EAAEH,KAAK,CAAC,CAAC;IAC9D,GAAG,IAAIJ,OAAO,CAACQ,qBAAqB,EAAE;MAClC,0BAA0B,EAAEJ,KAAK,CAACK,iBAAiB;MACnD,qBAAqB,EAAEL,KAAK,CAACM,YAAY;MACzC,6BAA6B,EAAEN,KAAK,CAACO;IACjD,CAAS;EACT,CAAK;EACD,MAAMC,GAAG,GAAG,IAAId,OAAO,CAACe,UAAU,CAACR,QAAQ,CAACO,GAAG,CAACE,QAAQ,EAAE,CAAC;EAC3D,IAAId,OAAO,CAACe,2BAA2B,EAAE,CAAC,CAACX,KAAK,CAACY,GAAG,EAAE,KAAK,CAAC;EAC5DJ,GAAG,CAACK,QAAQ,GAAG,IAAIjB,OAAO,CAACkB,0BAA0B,EAAEN,GAAG,EAAER,KAAK,CAACY,GAAG,CAAC;EACtEJ,GAAG,CAACO,MAAM,GAAG,SAAS;EACtB,IAAIlB,mBAAmB,CAACmB,iBAAiB,EAAE;IACvCC,UAAU,EAAEjB,KAAK,CAACkB,MAAM;IACxBC,GAAG,EAAEnB,KAAK,CAACY,GAAG;IACdQ,SAAS,EAAEZ;EACnB,CAAK,CAAC;EACF,OAAO;IACHa,MAAM,EAAE,MAAM;IACdnB,OAAO;IACPM;EACR,CAAK;AACL,CAAC;AACD,MAAMc,iCAAiC,GAAG,MAAOC,QAAQ,IAAK;EAC1D,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAM,IAAI5B,OAAO,CAAC6B,wBAAwB,EAAG,MAAM,IAAI3B,MAAM,CAAC4B,aAAa,EAAEH,QAAQ,CAAC,CAAE;EAChG,OACS;IACD,MAAMI,MAAM,GAAG,MAAM,IAAI/B,OAAO,CAACgC,YAAY,EAAEL,QAAQ,CAAC;IACxD,MAAMM,QAAQ,GAAG,IAAIjC,OAAO,CAACkC,GAAG,EAAEH,MAAM,EAAE;MACtCI,QAAQ,EAAE;IACtB,CAAS,CAAC;IACF,OAAO;MACHC,SAAS,EAAE,IAAIxC,kBAAkB,CAACyC,aAAa,EAAEV,QAAQ,CAAC;MAC1D,GAAGM;IACf,CAAS;EACT;AACA,CAAC;AACDxC,OAAO,CAACE,qBAAqB,GAAG,IAAII,WAAW,CAACuC,iBAAiB,EAAEtC,OAAO,CAACuC,iBAAiB,EAAEpC,+BAA+B,EAAEuB,iCAAiC,EAAE;EAAE,GAAGxB,MAAM,CAACsC,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}