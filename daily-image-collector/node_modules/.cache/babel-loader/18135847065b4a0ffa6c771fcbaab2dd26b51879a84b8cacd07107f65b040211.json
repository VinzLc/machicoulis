{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signRequest = void 0;\nconst getSignedHeaders_1 = require(\"./utils/getSignedHeaders\");\nconst getSigningValues_1 = require(\"./utils/getSigningValues\");\nconst constants_1 = require(\"./constants\");\nconst getSignature_1 = require(\"./utils/getSignature\");\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nconst signRequest = (request, options) => {\n  const signingValues = (0, getSigningValues_1.getSigningValues)(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const headers = {\n    ...request.headers\n  };\n  headers[constants_1.HOST_HEADER] = request.url.host;\n  headers[constants_1.AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[constants_1.TOKEN_HEADER] = sessionToken;\n  }\n  const requestToSign = {\n    ...request,\n    headers\n  };\n  // calculate and add the signature to the request\n  const signature = (0, getSignature_1.getSignature)(requestToSign, signingValues);\n  const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n  const signedHeadersEntry = `SignedHeaders=${(0, getSignedHeaders_1.getSignedHeaders)(headers)}`;\n  const signatureEntry = `Signature=${signature}`;\n  headers[constants_1.AUTH_HEADER] = `${constants_1.SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n  return requestToSign;\n};\nexports.signRequest = signRequest;","map":{"version":3,"names":["Object","defineProperty","exports","value","signRequest","getSignedHeaders_1","require","getSigningValues_1","constants_1","getSignature_1","request","options","signingValues","getSigningValues","accessKeyId","credentialScope","longDate","sessionToken","headers","HOST_HEADER","url","host","AMZ_DATE_HEADER","TOKEN_HEADER","requestToSign","signature","getSignature","credentialEntry","signedHeadersEntry","getSignedHeaders","signatureEntry","AUTH_HEADER","SHA256_ALGORITHM_IDENTIFIER"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\signRequest.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signRequest = void 0;\nconst getSignedHeaders_1 = require(\"./utils/getSignedHeaders\");\nconst getSigningValues_1 = require(\"./utils/getSigningValues\");\nconst constants_1 = require(\"./constants\");\nconst getSignature_1 = require(\"./utils/getSignature\");\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nconst signRequest = (request, options) => {\n    const signingValues = (0, getSigningValues_1.getSigningValues)(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const headers = { ...request.headers };\n    headers[constants_1.HOST_HEADER] = request.url.host;\n    headers[constants_1.AMZ_DATE_HEADER] = longDate;\n    if (sessionToken) {\n        headers[constants_1.TOKEN_HEADER] = sessionToken;\n    }\n    const requestToSign = { ...request, headers };\n    // calculate and add the signature to the request\n    const signature = (0, getSignature_1.getSignature)(requestToSign, signingValues);\n    const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n    const signedHeadersEntry = `SignedHeaders=${(0, getSignedHeaders_1.getSignedHeaders)(headers)}`;\n    const signatureEntry = `Signature=${signature}`;\n    headers[constants_1.AUTH_HEADER] =\n        `${constants_1.SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n    return requestToSign;\n};\nexports.signRequest = signRequest;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,MAAM;AAC5B,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAC9D,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAC9D,MAAME,WAAW,GAAGF,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMG,cAAc,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,WAAW,GAAGA,CAACM,OAAO,EAAEC,OAAO,KAAK;EACtC,MAAMC,aAAa,GAAG,IAAIL,kBAAkB,CAACM,gBAAgB,EAAEF,OAAO,CAAC;EACvE,MAAM;IAAEG,WAAW;IAAEC,eAAe;IAAEC,QAAQ;IAAEC;EAAY,CAAE,GAAGL,aAAa;EAClF;EACI,MAAMM,OAAO,GAAG;IAAE,GAAGR,OAAO,CAACQ;EAAO,CAAE;EACtCA,OAAO,CAACV,WAAW,CAACW,WAAW,CAAC,GAAGT,OAAO,CAACU,GAAG,CAACC,IAAI;EACnDH,OAAO,CAACV,WAAW,CAACc,eAAe,CAAC,GAAGN,QAAQ;EAC/C,IAAIC,YAAY,EAAE;IACdC,OAAO,CAACV,WAAW,CAACe,YAAY,CAAC,GAAGN,YAAY;EACxD;EACI,MAAMO,aAAa,GAAG;IAAE,GAAGd,OAAO;IAAEQ;EAAO,CAAE;EACjD;EACI,MAAMO,SAAS,GAAG,IAAIhB,cAAc,CAACiB,YAAY,EAAEF,aAAa,EAAEZ,aAAa,CAAC;EAChF,MAAMe,eAAe,GAAG,cAAcb,WAAW,IAAIC,eAAe,EAAE;EACtE,MAAMa,kBAAkB,GAAG,iBAAiB,IAAIvB,kBAAkB,CAACwB,gBAAgB,EAAEX,OAAO,CAAC,EAAE;EAC/F,MAAMY,cAAc,GAAG,aAAaL,SAAS,EAAE;EAC/CP,OAAO,CAACV,WAAW,CAACuB,WAAW,CAAC,GAC5B,GAAGvB,WAAW,CAACwB,2BAA2B,IAAIL,eAAe,KAAKC,kBAAkB,KAAKE,cAAc,EAAE;EAC7G,OAAON,aAAa;AACxB,CAAC;AACDtB,OAAO,CAACE,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}