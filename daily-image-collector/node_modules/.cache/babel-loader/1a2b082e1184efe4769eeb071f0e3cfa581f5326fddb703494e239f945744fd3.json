{"ast":null,"code":"import _objectSpread from\"C:/Users/vinzl/workspace/machicoulis/daily-image-collector/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/hooks/useGameLogic.js - FIXED VERSION\nimport{useState,useEffect,useCallback}from'react';import imageData from'../imageDatabase.json';const imageDatabase=imageData.images;export const useGameLogic=()=>{const[user,setUser]=useState(null);const[currentView,setCurrentView]=useState('home');const[userCollection,setUserCollection]=useState([]);const[todaysClaim,setTodaysClaim]=useState(false);const[showNewImage,setShowNewImage]=useState(false);const[todaysImage,setTodaysImage]=useState(null);const[loading,setLoading]=useState(false);const[selectedImage,setSelectedImage]=useState(null);const[collectionView,setCollectionView]=useState('obtained');const[shakeAnimation,setShakeAnimation]=useState(true);const[isFullscreen,setIsFullscreen]=useState(false);// NEW: 3 draws per day state\nconst[dailyDrawsRemaining,setDailyDrawsRemaining]=useState(3);const[totalDrawsToday,setTotalDrawsToday]=useState(0);const[drawsResetTime,setDrawsResetTime]=useState(null);// Maximum draws per day\nconst MAX_DRAWS_PER_DAY=3;const loadUserData=useCallback(()=>{if(user){const collection=JSON.parse(localStorage.getItem(\"collection_\".concat(user.username))||'[]');setUserCollection(collection);}},[user]);// NEW: Initialize daily draws system\nconst initializeDailyDraws=useCallback(()=>{if(!user)return;const today=new Date().toDateString();const savedData=localStorage.getItem(\"dailyDraws_\".concat(user.username));console.log('Initializing draws for date:',today);console.log('Saved data:',savedData);if(savedData){try{const{date,drawsUsed}=JSON.parse(savedData);if(date===today){// Same day - restore progress\nconsole.log('Same day, restoring progress. Draws used:',drawsUsed);setTotalDrawsToday(drawsUsed);setDailyDrawsRemaining(MAX_DRAWS_PER_DAY-drawsUsed);// Don't set todaysClaim based on drawsUsed anymore - use new system\n}else{// New day - reset draws\nconsole.log('New day detected, resetting draws');resetDailyDraws();}}catch(error){console.error('Error parsing saved data:',error);resetDailyDraws();}}else{// First time - initialize\nconsole.log('No saved data, initializing fresh');resetDailyDraws();}// Set reset time to next midnight\nconst tomorrow=new Date();tomorrow.setDate(tomorrow.getDate()+1);tomorrow.setHours(0,0,0,0);setDrawsResetTime(tomorrow);},[user]);// NEW: Reset daily draws function\nconst resetDailyDraws=useCallback(()=>{console.log('Resetting daily draws');setTotalDrawsToday(0);setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);setTodaysClaim(false);// Save to localStorage\nif(user){const today=new Date().toDateString();localStorage.setItem(\"dailyDraws_\".concat(user.username),JSON.stringify({date:today,drawsUsed:0}));}},[user]);// NEW: Save daily draw progress\nconst saveDailyDrawProgress=useCallback(drawsUsed=>{if(!user)return;const today=new Date().toDateString();const dataToSave={date:today,drawsUsed:drawsUsed};console.log('Saving daily draw progress:',dataToSave);localStorage.setItem(\"dailyDraws_\".concat(user.username),JSON.stringify(dataToSave));},[user]);useEffect(()=>{if(user){loadUserData();initializeDailyDraws();// NEW: Initialize draw system\n// Keep existing legacy logic for backward compatibility but don't let it block draws\nif(user.username==='admin'){setTodaysClaim(false);}// Remove the todaysClaim logic that was blocking multiple draws\n}},[user,loadUserData,initializeDailyDraws]);// NEW: Check for daily reset periodically\nconst checkDailyReset=useCallback(()=>{if(!user)return;const now=new Date();const today=now.toDateString();const savedData=localStorage.getItem(\"dailyDraws_\".concat(user.username));if(savedData){try{const{date}=JSON.parse(savedData);// If date changed, reset draws\nif(date!==today){console.log('Daily reset detected');resetDailyDraws();}}catch(error){console.error('Error checking daily reset:',error);}}},[user,resetDailyDraws]);// NEW: Check for reset every minute\nuseEffect(()=>{if(user){const interval=setInterval(checkDailyReset,60000);return()=>clearInterval(interval);}},[user,checkDailyReset]);const getStreakCount=useCallback(()=>{if(!user)return 0;return parseInt(localStorage.getItem(\"streak_\".concat(user.username))||'0');},[user]);const updateStreak=useCallback(()=>{if(!user)return;const today=new Date().toDateString();const lastClaim=localStorage.getItem(\"lastClaim_\".concat(user.username));const yesterday=new Date(Date.now()-86400000).toDateString();let newStreak=lastClaim===yesterday?getStreakCount()+1:1;localStorage.setItem(\"streak_\".concat(user.username),newStreak.toString());},[user,getStreakCount]);const login=(username,email)=>{const userData={username,email,joinDate:new Date().toISOString()};setUser(userData);setCurrentView('home');};const logout=()=>{setUser(null);setCurrentView('home');setUserCollection([]);setTodaysClaim(false);// NEW: Reset draw state on logout\nsetDailyDrawsRemaining(3);setTotalDrawsToday(0);setDrawsResetTime(null);};// FIXED: Enhanced drawDailyImage with proper 3-draws-per-day logic\nconst drawDailyImage=useCallback(()=>{console.log('=== DRAW DAILY IMAGE CALLED ===');console.log('User:',user===null||user===void 0?void 0:user.username);console.log('dailyDrawsRemaining:',dailyDrawsRemaining);console.log('totalDrawsToday:',totalDrawsToday);console.log('loading:',loading);console.log('todaysClaim (legacy):',todaysClaim);// NEW: Primary check - use the new draw system\nif((user===null||user===void 0?void 0:user.username)!=='admin'&&dailyDrawsRemaining<=0){console.log('No draws remaining today (new system)');alert('No draws remaining today!');return;}// Remove the legacy todaysClaim check that was blocking draws\n// if (todaysClaim && user?.username !== 'admin') return; // REMOVED!\nif(loading){console.log('Already loading, returning');return;}console.log('Starting draw process...');setLoading(true);setTimeout(()=>{try{if(!imageDatabase||imageDatabase.length===0){throw new Error('No images available in database');}console.log('Selecting image from database of',imageDatabase.length,'images');const weights={Common:50,Rare:30,Epic:15,Legendary:5};const totalWeight=Object.values(weights).reduce((a,b)=>a+b,0);const random=Math.random()*totalWeight;let currentWeight=0;let selectedRarity='Common';for(const[rarity,weight]of Object.entries(weights)){currentWeight+=weight;if(random<=currentWeight){selectedRarity=rarity;break;}}let availableImages=imageDatabase.filter(img=>img.rarity===selectedRarity);if(availableImages.length===0){availableImages=imageDatabase.filter(img=>img.rarity==='Common');if(availableImages.length===0)throw new Error('No images available');}const drawnImage=availableImages[Math.floor(Math.random()*availableImages.length)];console.log('Selected image:',drawnImage);const newCollection=[...userCollection,_objectSpread(_objectSpread({},drawnImage),{},{dateObtained:new Date().toISOString(),id:\"\".concat(drawnImage.id,\"_\").concat(Date.now()),imageUrl:drawnImage.url,imageName:drawnImage.name})];setUserCollection(newCollection);localStorage.setItem(\"collection_\".concat(user.username),JSON.stringify(newCollection));// NEW: Update draw counts (skip for admin)\nif((user===null||user===void 0?void 0:user.username)!=='admin'){const newDrawsUsed=totalDrawsToday+1;const newDrawsRemaining=MAX_DRAWS_PER_DAY-newDrawsUsed;console.log('Updating draw counts:',{newDrawsUsed,newDrawsRemaining});setTotalDrawsToday(newDrawsUsed);setDailyDrawsRemaining(newDrawsRemaining);saveDailyDrawProgress(newDrawsUsed);// Keep existing legacy logic\nupdateStreak();const today=new Date().toDateString();localStorage.setItem(\"lastClaim_\".concat(user.username),today);// Only set todaysClaim to true if we've used all draws\nif(newDrawsRemaining===0){setTodaysClaim(true);}}setTodaysImage(drawnImage);setShakeAnimation(true);setShowNewImage(true);setTimeout(()=>setShakeAnimation(false),5000);console.log('Draw completed successfully!');}catch(error){console.error('Error drawing daily image:',error);alert(\"Error: \".concat(error.message));}finally{setLoading(false);}},1500);},[loading,userCollection,user,updateStreak,dailyDrawsRemaining,totalDrawsToday,saveDailyDrawProgress,todaysClaim]);// NEW: Check if user can draw\nconst canDraw=useCallback(()=>{const result=(user===null||user===void 0?void 0:user.username)==='admin'||dailyDrawsRemaining>0;console.log('canDraw called:',{username:user===null||user===void 0?void 0:user.username,dailyDrawsRemaining,result});return result;},[user,dailyDrawsRemaining]);// NEW: Get dynamic button text\nconst getDrawButtonText=useCallback(()=>{if((user===null||user===void 0?void 0:user.username)==='admin'){return'🎯 Tirer une Image (Illimité)';}if(dailyDrawsRemaining===0){return'⏰ Plus de tirages';}return\"\\uD83C\\uDFAF Tirer (\".concat(dailyDrawsRemaining,\"/\").concat(MAX_DRAWS_PER_DAY,\")\");},[user,dailyDrawsRemaining]);// NEW: Get time until reset\nconst getTimeUntilReset=useCallback(()=>{if(!drawsResetTime)return null;const now=new Date();const diff=drawsResetTime-now;if(diff<=0)return null;const hours=Math.floor(diff/(1000*60*60));const minutes=Math.floor(diff%(1000*60*60)/(1000*60));return{hours,minutes};},[drawsResetTime]);return{// Existing exports\nuser,currentView,setCurrentView,userCollection,todaysClaim,showNewImage,setShowNewImage,todaysImage,loading,selectedImage,setSelectedImage,collectionView,setCollectionView,shakeAnimation,setShakeAnimation,isFullscreen,setIsFullscreen,imageDatabase,login,logout,drawDailyImage,getStreakCount,// NEW: 3-draws-per-day exports\ndailyDrawsRemaining,totalDrawsToday,drawsResetTime,canDraw,getDrawButtonText,getTimeUntilReset,MAX_DRAWS_PER_DAY};};","map":{"version":3,"names":["useState","useEffect","useCallback","imageData","imageDatabase","images","useGameLogic","user","setUser","currentView","setCurrentView","userCollection","setUserCollection","todaysClaim","setTodaysClaim","showNewImage","setShowNewImage","todaysImage","setTodaysImage","loading","setLoading","selectedImage","setSelectedImage","collectionView","setCollectionView","shakeAnimation","setShakeAnimation","isFullscreen","setIsFullscreen","dailyDrawsRemaining","setDailyDrawsRemaining","totalDrawsToday","setTotalDrawsToday","drawsResetTime","setDrawsResetTime","MAX_DRAWS_PER_DAY","loadUserData","collection","JSON","parse","localStorage","getItem","concat","username","initializeDailyDraws","today","Date","toDateString","savedData","console","log","date","drawsUsed","resetDailyDraws","error","tomorrow","setDate","getDate","setHours","setItem","stringify","saveDailyDrawProgress","dataToSave","checkDailyReset","now","interval","setInterval","clearInterval","getStreakCount","parseInt","updateStreak","lastClaim","yesterday","newStreak","toString","login","email","userData","joinDate","toISOString","logout","drawDailyImage","alert","setTimeout","length","Error","weights","Common","Rare","Epic","Legendary","totalWeight","Object","values","reduce","a","b","random","Math","currentWeight","selectedRarity","rarity","weight","entries","availableImages","filter","img","drawnImage","floor","newCollection","_objectSpread","dateObtained","id","imageUrl","url","imageName","name","newDrawsUsed","newDrawsRemaining","message","canDraw","result","getDrawButtonText","getTimeUntilReset","diff","hours","minutes"],"sources":["C:/Users/vinzl/workspace/machicoulis/daily-image-collector/src/hooks/useGameLogic.js"],"sourcesContent":["// src/hooks/useGameLogic.js - FIXED VERSION\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport imageData from '../imageDatabase.json';\r\n\r\nconst imageDatabase = imageData.images;\r\n\r\nexport const useGameLogic = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [currentView, setCurrentView] = useState('home');\r\n  const [userCollection, setUserCollection] = useState([]);\r\n  const [todaysClaim, setTodaysClaim] = useState(false);\r\n  const [showNewImage, setShowNewImage] = useState(false);\r\n  const [todaysImage, setTodaysImage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [collectionView, setCollectionView] = useState('obtained');\r\n  const [shakeAnimation, setShakeAnimation] = useState(true);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n\r\n  // NEW: 3 draws per day state\r\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\r\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\r\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\r\n\r\n  // Maximum draws per day\r\n  const MAX_DRAWS_PER_DAY = 3;\r\n\r\n  const loadUserData = useCallback(() => {\r\n    if (user) {\r\n      const collection = JSON.parse(localStorage.getItem(`collection_${user.username}`) || '[]');\r\n      setUserCollection(collection);\r\n    }\r\n  }, [user]);\r\n\r\n  // NEW: Initialize daily draws system\r\n  const initializeDailyDraws = useCallback(() => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date().toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    console.log('Initializing draws for date:', today);\r\n    console.log('Saved data:', savedData);\r\n    \r\n    if (savedData) {\r\n      try {\r\n        const { date, drawsUsed } = JSON.parse(savedData);\r\n        \r\n        if (date === today) {\r\n          // Same day - restore progress\r\n          console.log('Same day, restoring progress. Draws used:', drawsUsed);\r\n          setTotalDrawsToday(drawsUsed);\r\n          setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\r\n          // Don't set todaysClaim based on drawsUsed anymore - use new system\r\n        } else {\r\n          // New day - reset draws\r\n          console.log('New day detected, resetting draws');\r\n          resetDailyDraws();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing saved data:', error);\r\n        resetDailyDraws();\r\n      }\r\n    } else {\r\n      // First time - initialize\r\n      console.log('No saved data, initializing fresh');\r\n      resetDailyDraws();\r\n    }\r\n    \r\n    // Set reset time to next midnight\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n    setDrawsResetTime(tomorrow);\r\n  }, [user]);\r\n\r\n  // NEW: Reset daily draws function\r\n  const resetDailyDraws = useCallback(() => {\r\n    console.log('Resetting daily draws');\r\n    setTotalDrawsToday(0);\r\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\r\n    setTodaysClaim(false);\r\n    \r\n    // Save to localStorage\r\n    if (user) {\r\n      const today = new Date().toDateString();\r\n      localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\r\n        date: today,\r\n        drawsUsed: 0\r\n      }));\r\n    }\r\n  }, [user]);\r\n\r\n  // NEW: Save daily draw progress\r\n  const saveDailyDrawProgress = useCallback((drawsUsed) => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date().toDateString();\r\n    const dataToSave = {\r\n      date: today,\r\n      drawsUsed: drawsUsed\r\n    };\r\n    console.log('Saving daily draw progress:', dataToSave);\r\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify(dataToSave));\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadUserData();\r\n      initializeDailyDraws(); // NEW: Initialize draw system\r\n      \r\n      // Keep existing legacy logic for backward compatibility but don't let it block draws\r\n      if (user.username === 'admin') {\r\n        setTodaysClaim(false);\r\n      }\r\n      // Remove the todaysClaim logic that was blocking multiple draws\r\n    }\r\n  }, [user, loadUserData, initializeDailyDraws]);\r\n\r\n  // NEW: Check for daily reset periodically\r\n  const checkDailyReset = useCallback(() => {\r\n    if (!user) return;\r\n    \r\n    const now = new Date();\r\n    const today = now.toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    if (savedData) {\r\n      try {\r\n        const { date } = JSON.parse(savedData);\r\n        \r\n        // If date changed, reset draws\r\n        if (date !== today) {\r\n          console.log('Daily reset detected');\r\n          resetDailyDraws();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking daily reset:', error);\r\n      }\r\n    }\r\n  }, [user, resetDailyDraws]);\r\n\r\n  // NEW: Check for reset every minute\r\n  useEffect(() => {\r\n    if (user) {\r\n      const interval = setInterval(checkDailyReset, 60000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user, checkDailyReset]);\r\n\r\n  const getStreakCount = useCallback(() => {\r\n    if (!user) return 0;\r\n    return parseInt(localStorage.getItem(`streak_${user.username}`) || '0');\r\n  }, [user]);\r\n\r\n  const updateStreak = useCallback(() => {\r\n    if (!user) return;\r\n    const today = new Date().toDateString();\r\n    const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\r\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\r\n    \r\n    let newStreak = (lastClaim === yesterday) ? getStreakCount() + 1 : 1;\r\n    localStorage.setItem(`streak_${user.username}`, newStreak.toString());\r\n  }, [user, getStreakCount]);\r\n\r\n  const login = (username, email) => {\r\n    const userData = { username, email, joinDate: new Date().toISOString() };\r\n    setUser(userData);\r\n    setCurrentView('home');\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setCurrentView('home');\r\n    setUserCollection([]);\r\n    setTodaysClaim(false);\r\n    // NEW: Reset draw state on logout\r\n    setDailyDrawsRemaining(3);\r\n    setTotalDrawsToday(0);\r\n    setDrawsResetTime(null);\r\n  };\r\n\r\n  // FIXED: Enhanced drawDailyImage with proper 3-draws-per-day logic\r\n  const drawDailyImage = useCallback(() => {\r\n    console.log('=== DRAW DAILY IMAGE CALLED ===');\r\n    console.log('User:', user?.username);\r\n    console.log('dailyDrawsRemaining:', dailyDrawsRemaining);\r\n    console.log('totalDrawsToday:', totalDrawsToday);\r\n    console.log('loading:', loading);\r\n    console.log('todaysClaim (legacy):', todaysClaim);\r\n    \r\n    // NEW: Primary check - use the new draw system\r\n    if (user?.username !== 'admin' && dailyDrawsRemaining <= 0) {\r\n      console.log('No draws remaining today (new system)');\r\n      alert('No draws remaining today!');\r\n      return;\r\n    }\r\n    \r\n    // Remove the legacy todaysClaim check that was blocking draws\r\n    // if (todaysClaim && user?.username !== 'admin') return; // REMOVED!\r\n    \r\n    if (loading) {\r\n      console.log('Already loading, returning');\r\n      return;\r\n    }\r\n    \r\n    console.log('Starting draw process...');\r\n    setLoading(true);\r\n    \r\n    setTimeout(() => {\r\n      try {\r\n        if (!imageDatabase || imageDatabase.length === 0) {\r\n          throw new Error('No images available in database');\r\n        }\r\n        \r\n        console.log('Selecting image from database of', imageDatabase.length, 'images');\r\n        \r\n        const weights = { Common: 50, Rare: 30, Epic: 15, Legendary: 5 };\r\n        const totalWeight = Object.values(weights).reduce((a, b) => a + b, 0);\r\n        const random = Math.random() * totalWeight;\r\n        \r\n        let currentWeight = 0;\r\n        let selectedRarity = 'Common';\r\n        for (const [rarity, weight] of Object.entries(weights)) {\r\n          currentWeight += weight;\r\n          if (random <= currentWeight) {\r\n            selectedRarity = rarity;\r\n            break;\r\n          }\r\n        }\r\n\r\n        let availableImages = imageDatabase.filter(img => img.rarity === selectedRarity);\r\n        if (availableImages.length === 0) {\r\n            availableImages = imageDatabase.filter(img => img.rarity === 'Common');\r\n            if(availableImages.length === 0) throw new Error('No images available');\r\n        }\r\n\r\n        const drawnImage = availableImages[Math.floor(Math.random() * availableImages.length)];\r\n        console.log('Selected image:', drawnImage);\r\n        \r\n        const newCollection = [...userCollection, { \r\n          ...drawnImage, \r\n          dateObtained: new Date().toISOString(),\r\n          id: `${drawnImage.id}_${Date.now()}`,\r\n          imageUrl: drawnImage.url,\r\n          imageName: drawnImage.name\r\n        }];\r\n        \r\n        setUserCollection(newCollection);\r\n        localStorage.setItem(`collection_${user.username}`, JSON.stringify(newCollection));\r\n        \r\n        // NEW: Update draw counts (skip for admin)\r\n        if (user?.username !== 'admin') {\r\n          const newDrawsUsed = totalDrawsToday + 1;\r\n          const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\r\n          \r\n          console.log('Updating draw counts:', { newDrawsUsed, newDrawsRemaining });\r\n          \r\n          setTotalDrawsToday(newDrawsUsed);\r\n          setDailyDrawsRemaining(newDrawsRemaining);\r\n          saveDailyDrawProgress(newDrawsUsed);\r\n          \r\n          // Keep existing legacy logic\r\n          updateStreak();\r\n          const today = new Date().toDateString();\r\n          localStorage.setItem(`lastClaim_${user.username}`, today);\r\n          \r\n          // Only set todaysClaim to true if we've used all draws\r\n          if (newDrawsRemaining === 0) {\r\n            setTodaysClaim(true);\r\n          }\r\n        }\r\n        \r\n        setTodaysImage(drawnImage);\r\n        setShakeAnimation(true);\r\n        setShowNewImage(true);\r\n        \r\n        setTimeout(() => setShakeAnimation(false), 5000);\r\n        \r\n        console.log('Draw completed successfully!');\r\n      } catch (error) {\r\n        console.error('Error drawing daily image:', error);\r\n        alert(`Error: ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, 1500);\r\n  }, [loading, userCollection, user, updateStreak, dailyDrawsRemaining, totalDrawsToday, saveDailyDrawProgress, todaysClaim]);\r\n\r\n  // NEW: Check if user can draw\r\n  const canDraw = useCallback(() => {\r\n    const result = user?.username === 'admin' || dailyDrawsRemaining > 0;\r\n    console.log('canDraw called:', { username: user?.username, dailyDrawsRemaining, result });\r\n    return result;\r\n  }, [user, dailyDrawsRemaining]);\r\n\r\n  // NEW: Get dynamic button text\r\n  const getDrawButtonText = useCallback(() => {\r\n    if (user?.username === 'admin') {\r\n      return '🎯 Tirer une Image (Illimité)';\r\n    }\r\n    \r\n    if (dailyDrawsRemaining === 0) {\r\n      return '⏰ Plus de tirages';\r\n    }\r\n    \r\n    return `🎯 Tirer (${dailyDrawsRemaining}/${MAX_DRAWS_PER_DAY})`;\r\n  }, [user, dailyDrawsRemaining]);\r\n\r\n  // NEW: Get time until reset\r\n  const getTimeUntilReset = useCallback(() => {\r\n    if (!drawsResetTime) return null;\r\n    \r\n    const now = new Date();\r\n    const diff = drawsResetTime - now;\r\n    \r\n    if (diff <= 0) return null;\r\n    \r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    return { hours, minutes };\r\n  }, [drawsResetTime]);\r\n\r\n  return {\r\n    // Existing exports\r\n    user,\r\n    currentView,\r\n    setCurrentView,\r\n    userCollection,\r\n    todaysClaim,\r\n    showNewImage,\r\n    setShowNewImage,\r\n    todaysImage,\r\n    loading,\r\n    selectedImage,\r\n    setSelectedImage,\r\n    collectionView,\r\n    setCollectionView,\r\n    shakeAnimation,\r\n    setShakeAnimation,\r\n    isFullscreen,\r\n    setIsFullscreen,\r\n    imageDatabase,\r\n    login,\r\n    logout,\r\n    drawDailyImage,\r\n    getStreakCount,\r\n    \r\n    // NEW: 3-draws-per-day exports\r\n    dailyDrawsRemaining,\r\n    totalDrawsToday,\r\n    drawsResetTime,\r\n    canDraw,\r\n    getDrawButtonText,\r\n    getTimeUntilReset,\r\n    MAX_DRAWS_PER_DAY\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}