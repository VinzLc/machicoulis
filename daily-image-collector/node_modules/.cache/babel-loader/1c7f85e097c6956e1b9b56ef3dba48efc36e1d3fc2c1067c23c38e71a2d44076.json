{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyObject = exports.validateCopyObjectHeaders = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst IntegrityError_1 = require(\"../../../../../errors/IntegrityError\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst copyObjectSerializer = async (input, endpoint) => {\n  const headers = {\n    ...(await (0, utils_2.serializeObjectConfigsToHeaders)(input)),\n    ...(0, utils_2.assignStringVariables)({\n      'x-amz-copy-source': input.CopySource,\n      'x-amz-metadata-directive': input.MetadataDirective,\n      'x-amz-copy-source-if-match': input.CopySourceIfMatch,\n      'x-amz-copy-source-if-unmodified-since': input.CopySourceIfUnmodifiedSince?.toUTCString(),\n      'x-amz-source-expected-bucket-owner': input.ExpectedSourceBucketOwner,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n    })\n  };\n  (0, exports.validateCopyObjectHeaders)(input, headers);\n  const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n  (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n  url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n  url.search = new utils_1.AmplifyUrlSearchParams({\n    'x-id': 'CopyObject'\n  }).toString();\n  (0, validateObjectUrl_1.validateObjectUrl)({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'PUT',\n    headers,\n    url\n  };\n};\nconst validateCopyObjectHeaders = (input, headers) => {\n  const validations = [headers['x-amz-copy-source'] === input.CopySource, (0, utils_2.bothNilOrEqual)(input.MetadataDirective, headers['x-amz-metadata-directive']), (0, utils_2.bothNilOrEqual)(input.CopySourceIfMatch, headers['x-amz-copy-source-if-match']), (0, utils_2.bothNilOrEqual)(input.CopySourceIfUnmodifiedSince?.toUTCString(), headers['x-amz-copy-source-if-unmodified-since'])];\n  if (validations.some(validation => !validation)) {\n    throw new IntegrityError_1.IntegrityError();\n  }\n};\nexports.validateCopyObjectHeaders = validateCopyObjectHeaders;\nconst copyObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw (0, utils_2.buildStorageServiceError)(await (0, base_1.parseXmlError)(response));\n  } else {\n    await (0, utils_2.parseXmlBody)(response);\n    return {\n      $metadata: (0, aws_client_utils_1.parseMetadata)(response)\n    };\n  }\n};\nexports.copyObject = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, {\n  ...base_1.defaultConfig,\n  responseType: 'text'\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","copyObject","validateCopyObjectHeaders","aws_client_utils_1","require","utils_1","composers_1","utils_2","IntegrityError_1","validateObjectUrl_1","base_1","copyObjectSerializer","input","endpoint","headers","serializeObjectConfigsToHeaders","assignStringVariables","CopySource","MetadataDirective","CopySourceIfMatch","CopySourceIfUnmodifiedSince","toUTCString","ExpectedSourceBucketOwner","ExpectedBucketOwner","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","AmplifyUrlSearchParams","validateObjectUrl","bucketName","Bucket","key","objectURL","method","validations","bothNilOrEqual","some","validation","IntegrityError","copyObjectDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","parseXmlBody","$metadata","parseMetadata","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\copyObject.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.copyObject = exports.validateCopyObjectHeaders = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst IntegrityError_1 = require(\"../../../../../errors/IntegrityError\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst copyObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await (0, utils_2.serializeObjectConfigsToHeaders)(input)),\n        ...(0, utils_2.assignStringVariables)({\n            'x-amz-copy-source': input.CopySource,\n            'x-amz-metadata-directive': input.MetadataDirective,\n            'x-amz-copy-source-if-match': input.CopySourceIfMatch,\n            'x-amz-copy-source-if-unmodified-since': input.CopySourceIfUnmodifiedSince?.toUTCString(),\n            'x-amz-source-expected-bucket-owner': input.ExpectedSourceBucketOwner,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    (0, exports.validateCopyObjectHeaders)(input, headers);\n    const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n    (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n    url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n    url.search = new utils_1.AmplifyUrlSearchParams({\n        'x-id': 'CopyObject',\n    }).toString();\n    (0, validateObjectUrl_1.validateObjectUrl)({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n    };\n};\nconst validateCopyObjectHeaders = (input, headers) => {\n    const validations = [\n        headers['x-amz-copy-source'] === input.CopySource,\n        (0, utils_2.bothNilOrEqual)(input.MetadataDirective, headers['x-amz-metadata-directive']),\n        (0, utils_2.bothNilOrEqual)(input.CopySourceIfMatch, headers['x-amz-copy-source-if-match']),\n        (0, utils_2.bothNilOrEqual)(input.CopySourceIfUnmodifiedSince?.toUTCString(), headers['x-amz-copy-source-if-unmodified-since']),\n    ];\n    if (validations.some(validation => !validation)) {\n        throw new IntegrityError_1.IntegrityError();\n    }\n};\nexports.validateCopyObjectHeaders = validateCopyObjectHeaders;\nconst copyObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw (0, utils_2.buildStorageServiceError)((await (0, base_1.parseXmlError)(response)));\n    }\n    else {\n        await (0, utils_2.parseXmlBody)(response);\n        return {\n            $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n        };\n    }\n};\nexports.copyObject = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, { ...base_1.defaultConfig, responseType: 'text' });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}