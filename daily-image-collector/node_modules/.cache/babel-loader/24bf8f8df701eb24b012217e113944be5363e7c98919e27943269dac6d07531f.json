{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseJsonBody = exports.parseJsonError = void 0;\nconst responseInfo_1 = require(\"./responseInfo\");\n/**\n * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)\n */\n/**\n * Error parser for AWS JSON protocol.\n */\nconst parseJsonError = async response => {\n  if (!response || response.statusCode < 300) {\n    return;\n  }\n  const body = await (0, exports.parseJsonBody)(response);\n  const sanitizeErrorCode = rawValue => {\n    const [cleanValue] = rawValue.toString().split(/[,:]+/);\n    if (cleanValue.includes('#')) {\n      return cleanValue.split('#')[1];\n    }\n    return cleanValue;\n  };\n  const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ?? body.code ?? body.__type ?? 'UnknownError');\n  const message = body.message ?? body.Message ?? 'Unknown error';\n  const error = new Error(message);\n  return Object.assign(error, {\n    name: code,\n    $metadata: (0, responseInfo_1.parseMetadata)(response)\n  });\n};\nexports.parseJsonError = parseJsonError;\n/**\n * Parse JSON response body to JavaScript object.\n */\nconst parseJsonBody = async response => {\n  if (!response.body) {\n    throw new Error('Missing response payload');\n  }\n  const output = await response.body.json();\n  return Object.assign(output, {\n    $metadata: (0, responseInfo_1.parseMetadata)(response)\n  });\n};\nexports.parseJsonBody = parseJsonBody;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseJsonBody","parseJsonError","responseInfo_1","require","response","statusCode","body","sanitizeErrorCode","rawValue","cleanValue","toString","split","includes","code","headers","__type","message","Message","error","Error","assign","name","$metadata","parseMetadata","output","json"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\clients\\serde\\json.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseJsonBody = exports.parseJsonError = void 0;\nconst responseInfo_1 = require(\"./responseInfo\");\n/**\n * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)\n */\n/**\n * Error parser for AWS JSON protocol.\n */\nconst parseJsonError = async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const body = await (0, exports.parseJsonBody)(response);\n    const sanitizeErrorCode = (rawValue) => {\n        const [cleanValue] = rawValue.toString().split(/[,:]+/);\n        if (cleanValue.includes('#')) {\n            return cleanValue.split('#')[1];\n        }\n        return cleanValue;\n    };\n    const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ??\n        body.code ??\n        body.__type ??\n        'UnknownError');\n    const message = body.message ?? body.Message ?? 'Unknown error';\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: (0, responseInfo_1.parseMetadata)(response),\n    });\n};\nexports.parseJsonError = parseJsonError;\n/**\n * Parse JSON response body to JavaScript object.\n */\nconst parseJsonBody = async (response) => {\n    if (!response.body) {\n        throw new Error('Missing response payload');\n    }\n    const output = await response.body.json();\n    return Object.assign(output, {\n        $metadata: (0, responseInfo_1.parseMetadata)(response),\n    });\n};\nexports.parseJsonBody = parseJsonBody;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,cAAc,GAAG,MAAM;AACvD,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,cAAc,GAAG,MAAOG,QAAQ,IAAK;EACvC,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACC,UAAU,GAAG,GAAG,EAAE;IACxC;EACR;EACI,MAAMC,IAAI,GAAG,MAAM,IAAIR,OAAO,CAACE,aAAa,EAAEI,QAAQ,CAAC;EACvD,MAAMG,iBAAiB,GAAIC,QAAQ,IAAK;IACpC,MAAM,CAACC,UAAU,CAAC,GAAGD,QAAQ,CAACE,QAAQ,EAAE,CAACC,KAAK,CAAC,OAAO,CAAC;IACvD,IAAIF,UAAU,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC1B,OAAOH,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C;IACQ,OAAOF,UAAU;EACzB,CAAK;EACD,MAAMI,IAAI,GAAGN,iBAAiB,CAACH,QAAQ,CAACU,OAAO,CAAC,kBAAkB,CAAC,IAC/DR,IAAI,CAACO,IAAI,IACTP,IAAI,CAACS,MAAM,IACX,cAAc,CAAC;EACnB,MAAMC,OAAO,GAAGV,IAAI,CAACU,OAAO,IAAIV,IAAI,CAACW,OAAO,IAAI,eAAe;EAC/D,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACH,OAAO,CAAC;EAChC,OAAOpB,MAAM,CAACwB,MAAM,CAACF,KAAK,EAAE;IACxBG,IAAI,EAAER,IAAI;IACVS,SAAS,EAAE,IAAIpB,cAAc,CAACqB,aAAa,EAAEnB,QAAQ;EAC7D,CAAK,CAAC;AACN,CAAC;AACDN,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA,MAAMD,aAAa,GAAG,MAAOI,QAAQ,IAAK;EACtC,IAAI,CAACA,QAAQ,CAACE,IAAI,EAAE;IAChB,MAAM,IAAIa,KAAK,CAAC,0BAA0B,CAAC;EACnD;EACI,MAAMK,MAAM,GAAG,MAAMpB,QAAQ,CAACE,IAAI,CAACmB,IAAI,EAAE;EACzC,OAAO7B,MAAM,CAACwB,MAAM,CAACI,MAAM,EAAE;IACzBF,SAAS,EAAE,IAAIpB,cAAc,CAACqB,aAAa,EAAEnB,QAAQ;EAC7D,CAAK,CAAC;AACN,CAAC;AACDN,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}