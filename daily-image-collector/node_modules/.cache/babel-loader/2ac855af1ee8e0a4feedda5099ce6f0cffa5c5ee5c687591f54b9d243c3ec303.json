{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport '../runtime/s3TransferHandler/fetch.mjs';\nimport { parser } from '../runtime/xmlParser/pureJs.mjs';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nconst createXmlErrorParser = ({\n  noErrorWrapping = false\n} = {}) => async response => {\n  if (!response || response.statusCode < 300) {\n    return;\n  }\n  const {\n    statusCode\n  } = response;\n  const body = await parseXmlBody(response);\n  const errorLocation = noErrorWrapping ? body : body.Error;\n  const code = errorLocation?.Code ? errorLocation.Code : statusCode === 404 ? 'NotFound' : statusCode.toString();\n  const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n  const error = new Error(message);\n  return Object.assign(error, {\n    name: code,\n    $metadata: parseMetadata(response)\n  });\n};\nconst parseXmlBody = async response => {\n  if (!response.body) {\n    // S3 can return 200 without a body indicating failure.\n    throw new Error('S3 aborted request.');\n  }\n  const data = await response.body.text();\n  if (data?.length > 0) {\n    try {\n      return parser.parse(data);\n    } catch (error) {\n      throw new Error(`Failed to parse XML response: ${error}`);\n    }\n  }\n  return {};\n};\nexport { createXmlErrorParser, parseXmlBody };","map":{"version":3,"names":["createXmlErrorParser","noErrorWrapping","response","statusCode","body","parseXmlBody","errorLocation","Error","code","Code","toString","message","Message","error","Object","assign","name","$metadata","parseMetadata","data","text","length","parser","parse"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\utils\\parsePayload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { parser } from '../runtime';\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nexport const createXmlErrorParser = ({ noErrorWrapping = false, } = {}) => async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const { statusCode } = response;\n    const body = await parseXmlBody(response);\n    const errorLocation = noErrorWrapping ? body : body.Error;\n    const code = errorLocation?.Code\n        ? errorLocation.Code\n        : statusCode === 404\n            ? 'NotFound'\n            : statusCode.toString();\n    const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: parseMetadata(response),\n    });\n};\nexport const parseXmlBody = async (response) => {\n    if (!response.body) {\n        // S3 can return 200 without a body indicating failure.\n        throw new Error('S3 aborted request.');\n    }\n    const data = await response.body.text();\n    if (data?.length > 0) {\n        try {\n            return parser.parse(data);\n        }\n        catch (error) {\n            throw new Error(`Failed to parse XML response: ${error}`);\n        }\n    }\n    return {};\n};\n"],"mappings":";;;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,oBAAoB,GAAGA,CAAC;EAAEC,eAAe,GAAG;AAAK,CAAG,GAAG,EAAE,KAAK,MAAOC,QAAQ,IAAK;EAC3F,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACC,UAAU,GAAG,GAAG,EAAE;IACxC;EACR;EACI,MAAM;IAAEA;EAAU,CAAE,GAAGD,QAAQ;EAC/B,MAAME,IAAI,GAAG,MAAMC,YAAY,CAACH,QAAQ,CAAC;EACzC,MAAMI,aAAa,GAAGL,eAAe,GAAGG,IAAI,GAAGA,IAAI,CAACG,KAAK;EACzD,MAAMC,IAAI,GAAGF,aAAa,EAAEG,IAAA,GACtBH,aAAa,CAACG,IAAA,GACdN,UAAU,KAAK,MACX,aACAA,UAAU,CAACO,QAAQ,EAAE;EAC/B,MAAMC,OAAO,GAAGL,aAAa,EAAEK,OAAO,IAAIL,aAAa,EAAEM,OAAO,IAAIJ,IAAI;EACxE,MAAMK,KAAK,GAAG,IAAIN,KAAK,CAACI,OAAO,CAAC;EAChC,OAAOG,MAAM,CAACC,MAAM,CAACF,KAAK,EAAE;IACxBG,IAAI,EAAER,IAAI;IACVS,SAAS,EAAEC,aAAa,CAAChB,QAAQ;EACzC,CAAK,CAAC;AACN;AACY,MAACG,YAAY,GAAG,MAAOH,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,CAACE,IAAI,EAAE;IACxB;IACQ,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EAC9C;EACI,MAAMY,IAAI,GAAG,MAAMjB,QAAQ,CAACE,IAAI,CAACgB,IAAI,EAAE;EACvC,IAAID,IAAI,EAAEE,MAAM,GAAG,CAAC,EAAE;IAClB,IAAI;MACA,OAAOC,MAAM,CAACC,KAAK,CAACJ,IAAI,CAAC;IACrC,EACQ,OAAON,KAAK,EAAE;MACV,MAAM,IAAIN,KAAK,CAAC,iCAAiCM,KAAK,EAAE,CAAC;IACrE;EACA;EACI,OAAO,EAAE;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}