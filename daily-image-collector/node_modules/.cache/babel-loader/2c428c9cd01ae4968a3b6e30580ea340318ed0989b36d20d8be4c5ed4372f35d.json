{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.completeMultipartUpload = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst validateMultipartUploadXML_1 = require(\"../../validateMultipartUploadXML\");\nconst base_1 = require(\"./base\");\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for CompleteMultipartUpload API';\nconst MISSING_ETAG_ERROR_MSG = 'ETag missing from multipart upload';\nconst MISSING_ETAG_ERROR_SUGGESTION = 'Please ensure S3 bucket CORS configuration includes ETag as part of its `ExposeHeaders` element';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n  const headers = {\n    'content-type': 'application/xml',\n    ...(0, utils_2.assignStringVariables)({\n      'x-amz-checksum-crc32': input.ChecksumCRC32,\n      'x-amz-checksum-type': input.ChecksumType,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n      'If-None-Match': input.IfNoneMatch\n    })\n  };\n  const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n  (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n  url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n  (0, utils_2.validateS3RequiredParameter)(!!input.UploadId, 'UploadId');\n  url.search = new utils_1.AmplifyUrlSearchParams({\n    uploadId: input.UploadId\n  }).toString();\n  (0, utils_2.validateS3RequiredParameter)(!!input.MultipartUpload, 'MultipartUpload');\n  (0, validateObjectUrl_1.validateObjectUrl)({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  const xml = serializeCompletedMultipartUpload(input.MultipartUpload);\n  (0, validateMultipartUploadXML_1.validateMultipartUploadXML)(input.MultipartUpload, xml);\n  return {\n    method: 'POST',\n    headers,\n    url,\n    body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + xml\n  };\n};\nconst serializeCompletedMultipartUpload = input => {\n  if (!input.Parts?.length) {\n    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n  }\n  return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = input => {\n  if (input.PartNumber == null) {\n    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n  }\n  if (!input.ETag) {\n    throw new Error(`${MISSING_ETAG_ERROR_MSG}: ${JSON.stringify(input)}. ${MISSING_ETAG_ERROR_SUGGESTION}`);\n  }\n  const eTag = `<ETag>${input.ETag}</ETag>`;\n  const partNumber = `<PartNumber>${input.PartNumber}</PartNumber>`;\n  const checksumCRC32 = input.ChecksumCRC32 ? `<ChecksumCRC32>${input.ChecksumCRC32}</ChecksumCRC32>` : '';\n  return `<Part>${eTag}${partNumber}${checksumCRC32}</Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async response => {\n  const parsed = await (0, utils_2.parseXmlBody)(response); // Handles empty body case\n  if (parsed.Code !== undefined && parsed.Message !== undefined) {\n    const error = await (0, base_1.parseXmlError)({\n      ...response,\n      statusCode: 500 // To workaround the >=300 status code check common to other APIs.\n    });\n    error.$metadata.httpStatusCode = response.statusCode;\n    throw (0, utils_2.buildStorageServiceError)(error);\n  }\n  return parsed;\n};\nconst completeMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw (0, utils_2.buildStorageServiceError)(await (0, base_1.parseXmlError)(response));\n  } else {\n    const parsed = await parseXmlBodyOrThrow(response);\n    const contents = (0, utils_2.map)(parsed, {\n      ETag: 'ETag',\n      Key: 'Key',\n      Location: 'Location'\n    });\n    return {\n      $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n      ...contents\n    };\n  }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error, middlewareContext) => {\n  if (!response) {\n    return {\n      retryable: false\n    };\n  }\n  if (response.statusCode === 200) {\n    if (!response.body) {\n      return {\n        retryable: true\n      };\n    }\n    const parsed = await (0, utils_2.parseXmlBody)(response);\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n      return {\n        retryable: true\n      };\n    }\n    return {\n      retryable: false\n    };\n  }\n  return (0, base_1.retryDecider)(response, error, middlewareContext);\n};\nexports.completeMultipartUpload = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n  ...base_1.defaultConfig,\n  responseType: 'text',\n  retryDecider: retryWhenErrorWith200StatusCode\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","completeMultipartUpload","aws_client_utils_1","require","utils_1","composers_1","utils_2","validateObjectUrl_1","validateMultipartUploadXML_1","base_1","INVALID_PARAMETER_ERROR_MSG","MISSING_ETAG_ERROR_MSG","MISSING_ETAG_ERROR_SUGGESTION","completeMultipartUploadSerializer","input","endpoint","headers","assignStringVariables","ChecksumCRC32","ChecksumType","ExpectedBucketOwner","IfNoneMatch","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","UploadId","search","AmplifyUrlSearchParams","uploadId","MultipartUpload","validateObjectUrl","bucketName","Bucket","key","objectURL","xml","serializeCompletedMultipartUpload","validateMultipartUploadXML","method","body","Parts","length","Error","JSON","stringify","map","serializeCompletedPartList","join","PartNumber","ETag","eTag","partNumber","checksumCRC32","parseXmlBodyOrThrow","response","parsed","parseXmlBody","Code","undefined","Message","error","parseXmlError","statusCode","$metadata","httpStatusCode","buildStorageServiceError","completeMultipartUploadDeserializer","contents","Location","parseMetadata","retryWhenErrorWith200StatusCode","middlewareContext","retryable","retryDecider","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\completeMultipartUpload.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.completeMultipartUpload = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst validateMultipartUploadXML_1 = require(\"../../validateMultipartUploadXML\");\nconst base_1 = require(\"./base\");\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for CompleteMultipartUpload API';\nconst MISSING_ETAG_ERROR_MSG = 'ETag missing from multipart upload';\nconst MISSING_ETAG_ERROR_SUGGESTION = 'Please ensure S3 bucket CORS configuration includes ETag as part of its `ExposeHeaders` element';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        'content-type': 'application/xml',\n        ...(0, utils_2.assignStringVariables)({\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'x-amz-checksum-type': input.ChecksumType,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            'If-None-Match': input.IfNoneMatch,\n        }),\n    };\n    const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n    (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n    url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n    (0, utils_2.validateS3RequiredParameter)(!!input.UploadId, 'UploadId');\n    url.search = new utils_1.AmplifyUrlSearchParams({\n        uploadId: input.UploadId,\n    }).toString();\n    (0, utils_2.validateS3RequiredParameter)(!!input.MultipartUpload, 'MultipartUpload');\n    (0, validateObjectUrl_1.validateObjectUrl)({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const xml = serializeCompletedMultipartUpload(input.MultipartUpload);\n    (0, validateMultipartUploadXML_1.validateMultipartUploadXML)(input.MultipartUpload, xml);\n    return {\n        method: 'POST',\n        headers,\n        url,\n        body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + xml,\n    };\n};\nconst serializeCompletedMultipartUpload = (input) => {\n    if (!input.Parts?.length) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n    }\n    return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = (input) => {\n    if (input.PartNumber == null) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n    }\n    if (!input.ETag) {\n        throw new Error(`${MISSING_ETAG_ERROR_MSG}: ${JSON.stringify(input)}. ${MISSING_ETAG_ERROR_SUGGESTION}`);\n    }\n    const eTag = `<ETag>${input.ETag}</ETag>`;\n    const partNumber = `<PartNumber>${input.PartNumber}</PartNumber>`;\n    const checksumCRC32 = input.ChecksumCRC32\n        ? `<ChecksumCRC32>${input.ChecksumCRC32}</ChecksumCRC32>`\n        : '';\n    return `<Part>${eTag}${partNumber}${checksumCRC32}</Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async (response) => {\n    const parsed = await (0, utils_2.parseXmlBody)(response); // Handles empty body case\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n        const error = await (0, base_1.parseXmlError)({\n            ...response,\n            statusCode: 500, // To workaround the >=300 status code check common to other APIs.\n        });\n        error.$metadata.httpStatusCode = response.statusCode;\n        throw (0, utils_2.buildStorageServiceError)(error);\n    }\n    return parsed;\n};\nconst completeMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw (0, utils_2.buildStorageServiceError)((await (0, base_1.parseXmlError)(response)));\n    }\n    else {\n        const parsed = await parseXmlBodyOrThrow(response);\n        const contents = (0, utils_2.map)(parsed, {\n            ETag: 'ETag',\n            Key: 'Key',\n            Location: 'Location',\n        });\n        return {\n            $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n            ...contents,\n        };\n    }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error, middlewareContext) => {\n    if (!response) {\n        return { retryable: false };\n    }\n    if (response.statusCode === 200) {\n        if (!response.body) {\n            return { retryable: true };\n        }\n        const parsed = await (0, utils_2.parseXmlBody)(response);\n        if (parsed.Code !== undefined && parsed.Message !== undefined) {\n            return { retryable: true };\n        }\n        return { retryable: false };\n    }\n    return (0, base_1.retryDecider)(response, error, middlewareContext);\n};\nexports.completeMultipartUpload = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n    ...base_1.defaultConfig,\n    responseType: 'text',\n    retryDecider: retryWhenErrorWith200StatusCode,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}