{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCanonicalRequest = void 0;\nconst getCanonicalHeaders_1 = require(\"./getCanonicalHeaders\");\nconst getCanonicalQueryString_1 = require(\"./getCanonicalQueryString\");\nconst getCanonicalUri_1 = require(\"./getCanonicalUri\");\nconst getHashedPayload_1 = require(\"./getHashedPayload\");\nconst getSignedHeaders_1 = require(\"./getSignedHeaders\");\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nconst getCanonicalRequest = ({\n  body,\n  headers,\n  method,\n  url\n}, uriEscapePath = true) => [method, (0, getCanonicalUri_1.getCanonicalUri)(url.pathname, uriEscapePath), (0, getCanonicalQueryString_1.getCanonicalQueryString)(url.searchParams), (0, getCanonicalHeaders_1.getCanonicalHeaders)(headers), (0, getSignedHeaders_1.getSignedHeaders)(headers), (0, getHashedPayload_1.getHashedPayload)(body)].join('\\n');\nexports.getCanonicalRequest = getCanonicalRequest;","map":{"version":3,"names":["Object","defineProperty","exports","value","getCanonicalRequest","getCanonicalHeaders_1","require","getCanonicalQueryString_1","getCanonicalUri_1","getHashedPayload_1","getSignedHeaders_1","body","headers","method","url","uriEscapePath","getCanonicalUri","pathname","getCanonicalQueryString","searchParams","getCanonicalHeaders","getSignedHeaders","getHashedPayload","join"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getCanonicalRequest.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCanonicalRequest = void 0;\nconst getCanonicalHeaders_1 = require(\"./getCanonicalHeaders\");\nconst getCanonicalQueryString_1 = require(\"./getCanonicalQueryString\");\nconst getCanonicalUri_1 = require(\"./getCanonicalUri\");\nconst getHashedPayload_1 = require(\"./getHashedPayload\");\nconst getSignedHeaders_1 = require(\"./getSignedHeaders\");\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nconst getCanonicalRequest = ({ body, headers, method, url }, uriEscapePath = true) => [\n    method,\n    (0, getCanonicalUri_1.getCanonicalUri)(url.pathname, uriEscapePath),\n    (0, getCanonicalQueryString_1.getCanonicalQueryString)(url.searchParams),\n    (0, getCanonicalHeaders_1.getCanonicalHeaders)(headers),\n    (0, getSignedHeaders_1.getSignedHeaders)(headers),\n    (0, getHashedPayload_1.getHashedPayload)(body),\n].join('\\n');\nexports.getCanonicalRequest = getCanonicalRequest;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,MAAM;AACpC,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC9D,MAAMC,yBAAyB,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACtE,MAAME,iBAAiB,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACtD,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,mBAAmB,GAAGA,CAAC;EAAEO,IAAI;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAG,CAAE,EAAEC,aAAa,GAAG,IAAI,KAAK,CAClFF,MAAM,EACN,IAAIL,iBAAiB,CAACQ,eAAe,EAAEF,GAAG,CAACG,QAAQ,EAAEF,aAAa,CAAC,EACnE,IAAIR,yBAAyB,CAACW,uBAAuB,EAAEJ,GAAG,CAACK,YAAY,CAAC,EACxE,IAAId,qBAAqB,CAACe,mBAAmB,EAAER,OAAO,CAAC,EACvD,IAAIF,kBAAkB,CAACW,gBAAgB,EAAET,OAAO,CAAC,EACjD,IAAIH,kBAAkB,CAACa,gBAAgB,EAAEX,IAAI,CAAC,CACjD,CAACY,IAAI,CAAC,IAAI,CAAC;AACZrB,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}