{"ast":null,"code":"import _objectSpread from \"C:/Users/vinzl/workspace/machicoulis/daily-image-collector/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { USER_AGENT_HEADER, getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { MESSAGE_TYPES, DEFAULT_KEEP_ALIVE_TIMEOUT } from '../constants.mjs';\nimport { AWSWebSocketProvider } from '../AWSWebSocketProvider/index.mjs';\nimport { awsRealTimeHeaderBasedAuth } from '../AWSWebSocketProvider/authHeaders.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst PROVIDER_NAME = 'AWSAppSyncRealTimeProvider';\nconst WS_PROTOCOL_NAME = 'graphql-ws';\nconst CONNECT_URI = '/connect';\nclass AWSAppSyncRealTimeProvider extends AWSWebSocketProvider {\n  constructor() {\n    super({\n      providerName: PROVIDER_NAME,\n      wsProtocolName: WS_PROTOCOL_NAME,\n      connectUri: CONNECT_URI\n    });\n  }\n  getProviderName() {\n    return PROVIDER_NAME;\n  }\n  subscribe(options, customUserAgentDetails) {\n    return super.subscribe(options, customUserAgentDetails);\n  }\n  async _prepareSubscriptionPayload(_ref) {\n    let {\n      options,\n      subscriptionId,\n      customUserAgentDetails,\n      additionalCustomHeaders,\n      libraryConfigHeaders\n    } = _ref;\n    const {\n      appSyncGraphqlEndpoint,\n      authenticationType,\n      query,\n      variables,\n      apiKey,\n      region\n    } = options;\n    const data = {\n      query,\n      variables\n    };\n    const serializedData = JSON.stringify(data);\n    const headers = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, await awsRealTimeHeaderBasedAuth({\n      apiKey,\n      appSyncGraphqlEndpoint,\n      authenticationType,\n      payload: serializedData,\n      canonicalUri: '',\n      region,\n      additionalCustomHeaders\n    })), libraryConfigHeaders), additionalCustomHeaders), {}, {\n      [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails)\n    });\n    const subscriptionMessage = {\n      id: subscriptionId,\n      payload: {\n        data: serializedData,\n        extensions: {\n          authorization: _objectSpread({}, headers)\n        }\n      },\n      type: MESSAGE_TYPES.GQL_START\n    };\n    const serializedSubscriptionMessage = JSON.stringify(subscriptionMessage);\n    return serializedSubscriptionMessage;\n  }\n  _handleSubscriptionData(message) {\n    this.logger.debug(\"subscription message from AWS AppSync RealTime: \".concat(message.data));\n    const {\n      id = '',\n      payload,\n      type\n    } = JSON.parse(String(message.data));\n    const {\n      observer = null,\n      query = '',\n      variables = {}\n    } = this.subscriptionObserverMap.get(id) || {};\n    this.logger.debug({\n      id,\n      observer,\n      query,\n      variables\n    });\n    if (type === MESSAGE_TYPES.DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        this.logger.debug(\"observer not found for id: \".concat(id));\n      }\n      return [true, {\n        id,\n        type,\n        payload\n      }];\n    }\n    return [false, {\n      id,\n      type,\n      payload\n    }];\n  }\n  _unsubscribeMessage(subscriptionId) {\n    return {\n      id: subscriptionId,\n      type: MESSAGE_TYPES.GQL_STOP\n    };\n  }\n  _extractConnectionTimeout(data) {\n    const {\n      payload: {\n        connectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT\n      } = {}\n    } = data;\n    return connectionTimeoutMs;\n  }\n  _extractErrorCodeAndType(data) {\n    const {\n      payload: {\n        errors: [{\n          errorType = '',\n          errorCode = 0\n        } = {}] = []\n      } = {}\n    } = data;\n    return {\n      errorCode,\n      errorType\n    };\n  }\n}\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"names":["PROVIDER_NAME","WS_PROTOCOL_NAME","CONNECT_URI","AWSAppSyncRealTimeProvider","AWSWebSocketProvider","constructor","providerName","wsProtocolName","connectUri","getProviderName","subscribe","options","customUserAgentDetails","_prepareSubscriptionPayload","_ref","subscriptionId","additionalCustomHeaders","libraryConfigHeaders","appSyncGraphqlEndpoint","authenticationType","query","variables","apiKey","region","data","serializedData","JSON","stringify","headers","_objectSpread","awsRealTimeHeaderBasedAuth","payload","canonicalUri","USER_AGENT_HEADER","getAmplifyUserAgent","subscriptionMessage","id","extensions","authorization","type","MESSAGE_TYPES","GQL_START","serializedSubscriptionMessage","_handleSubscriptionData","message","logger","debug","concat","parse","String","observer","subscriptionObserverMap","get","DATA","next","_unsubscribeMessage","GQL_STOP","_extractConnectionTimeout","connectionTimeoutMs","DEFAULT_KEEP_ALIVE_TIMEOUT","_extractErrorCodeAndType","errors","errorType","errorCode"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\api-graphql\\src\\Providers\\AWSAppSyncRealTimeProvider\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { USER_AGENT_HEADER, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nimport { DEFAULT_KEEP_ALIVE_TIMEOUT, MESSAGE_TYPES } from '../constants';\nimport { AWSWebSocketProvider } from '../AWSWebSocketProvider';\nimport { awsRealTimeHeaderBasedAuth } from '../AWSWebSocketProvider/authHeaders';\nconst PROVIDER_NAME = 'AWSAppSyncRealTimeProvider';\nconst WS_PROTOCOL_NAME = 'graphql-ws';\nconst CONNECT_URI = '/connect';\nexport class AWSAppSyncRealTimeProvider extends AWSWebSocketProvider {\n    constructor() {\n        super({\n            providerName: PROVIDER_NAME,\n            wsProtocolName: WS_PROTOCOL_NAME,\n            connectUri: CONNECT_URI,\n        });\n    }\n    getProviderName() {\n        return PROVIDER_NAME;\n    }\n    subscribe(options, customUserAgentDetails) {\n        return super.subscribe(options, customUserAgentDetails);\n    }\n    async _prepareSubscriptionPayload({ options, subscriptionId, customUserAgentDetails, additionalCustomHeaders, libraryConfigHeaders, }) {\n        const { appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, } = options;\n        const data = {\n            query,\n            variables,\n        };\n        const serializedData = JSON.stringify(data);\n        const headers = {\n            ...(await awsRealTimeHeaderBasedAuth({\n                apiKey,\n                appSyncGraphqlEndpoint,\n                authenticationType,\n                payload: serializedData,\n                canonicalUri: '',\n                region,\n                additionalCustomHeaders,\n            })),\n            ...libraryConfigHeaders,\n            ...additionalCustomHeaders,\n            [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n        };\n        const subscriptionMessage = {\n            id: subscriptionId,\n            payload: {\n                data: serializedData,\n                extensions: {\n                    authorization: {\n                        ...headers,\n                    },\n                },\n            },\n            type: MESSAGE_TYPES.GQL_START,\n        };\n        const serializedSubscriptionMessage = JSON.stringify(subscriptionMessage);\n        return serializedSubscriptionMessage;\n    }\n    _handleSubscriptionData(message) {\n        this.logger.debug(`subscription message from AWS AppSync RealTime: ${message.data}`);\n        const { id = '', payload, type } = JSON.parse(String(message.data));\n        const { observer = null, query = '', variables = {}, } = this.subscriptionObserverMap.get(id) || {};\n        this.logger.debug({ id, observer, query, variables });\n        if (type === MESSAGE_TYPES.DATA && payload && payload.data) {\n            if (observer) {\n                observer.next(payload);\n            }\n            else {\n                this.logger.debug(`observer not found for id: ${id}`);\n            }\n            return [true, { id, type, payload }];\n        }\n        return [false, { id, type, payload }];\n    }\n    _unsubscribeMessage(subscriptionId) {\n        return {\n            id: subscriptionId,\n            type: MESSAGE_TYPES.GQL_STOP,\n        };\n    }\n    _extractConnectionTimeout(data) {\n        const { payload: { connectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT } = {}, } = data;\n        return connectionTimeoutMs;\n    }\n    _extractErrorCodeAndType(data) {\n        const { payload: { errors: [{ errorType = '', errorCode = 0 } = {}] = [] } = {}, } = data;\n        return { errorCode, errorType };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}