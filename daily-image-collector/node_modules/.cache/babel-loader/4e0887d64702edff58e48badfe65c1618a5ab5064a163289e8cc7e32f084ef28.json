{"ast":null,"code":"import _objectSpread from \"C:/Users/vinzl/workspace/machicoulis/daily-image-collector/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { generateGraphQLDocument, buildGraphQLVariables, authModeParams, getCustomHeaders, flattenItems, initializeModel } from '../APIClient.mjs';\nimport { handleSingularGraphQlError } from './utils.mjs';\nimport { selfAwareAsync } from '../../utils/selfAwareAsync.mjs';\nimport { extendCancellability } from '../cancellation.mjs';\nimport { createUserAgentOverride } from '../ai/getCustomUserAgentDetails.mjs';\nfunction getFactory(client, modelIntrospection, model, operation, getInternals) {\n  let useContext = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let customUserAgentDetails = arguments.length > 6 ? arguments[6] : undefined;\n  const getWithContext = (contextSpec, arg, options) => {\n    return _get(client, modelIntrospection, model, arg, options, operation, getInternals, contextSpec, customUserAgentDetails);\n  };\n  const get = (arg, options) => {\n    return _get(client, modelIntrospection, model, arg, options, operation, getInternals, undefined, customUserAgentDetails);\n  };\n  return useContext ? getWithContext : get;\n}\nfunction _get(client, modelIntrospection, model, arg, options, operation, getInternals, context, customUserAgentDetails) {\n  return selfAwareAsync(async resultPromise => {\n    const {\n      name\n    } = model;\n    const query = generateGraphQLDocument(modelIntrospection, model, operation, options);\n    const variables = buildGraphQLVariables(model, operation, arg, modelIntrospection);\n    const auth = authModeParams(client, getInternals, options);\n    const headers = getCustomHeaders(client, getInternals, options === null || options === void 0 ? void 0 : options.headers);\n    const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n    try {\n      const basePromise = context ? client.graphql(context, _objectSpread(_objectSpread({}, auth), {}, {\n        query,\n        variables\n      }), headers) : client.graphql(_objectSpread(_objectSpread({}, auth), {}, {\n        query,\n        variables\n      }, userAgentOverride), headers);\n      const extendedPromise = extendCancellability(basePromise, resultPromise);\n      const {\n        data,\n        extensions\n      } = await extendedPromise;\n      // flatten response\n      if (data) {\n        const [key] = Object.keys(data);\n        const flattenedResult = flattenItems(modelIntrospection, name, data[key]);\n        if (flattenedResult === null) {\n          return {\n            data: null,\n            extensions\n          };\n        } else if (options !== null && options !== void 0 && options.selectionSet) {\n          return {\n            data: flattenedResult,\n            extensions\n          };\n        } else {\n          // TODO: refactor to avoid destructuring here\n          const [initialized] = initializeModel(client, name, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context);\n          return {\n            data: initialized,\n            extensions\n          };\n        }\n      } else {\n        return {\n          data: null,\n          extensions\n        };\n      }\n    } catch (error) {\n      /**\n       * The `data` type returned by `error` here could be:\n       * 1) `null`\n       * 2) an empty object\n       * 3) \"populated\" but with a `null` value `{ getPost: null }`\n       * 4) an actual record `{ getPost: { id: '1', title: 'Hello, World!' } }`\n       */\n      const {\n        data,\n        errors\n      } = error;\n      /**\n       * `data` is not `null`, and is not an empty object:\n       */\n      if (data && Object.keys(data).length !== 0 && errors) {\n        const [key] = Object.keys(data);\n        const flattenedResult = flattenItems(modelIntrospection, name, data[key]);\n        /**\n         * `flattenedResult` could be `null` here (e.g. `data: { getPost: null }`)\n         * if `flattenedResult`, result is an actual record:\n         */\n        if (flattenedResult) {\n          if (options !== null && options !== void 0 && options.selectionSet) {\n            return {\n              data: flattenedResult,\n              errors\n            };\n          } else {\n            // TODO: refactor to avoid destructuring here\n            const [initialized] = initializeModel(client, name, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context);\n            return {\n              data: initialized,\n              errors\n            };\n          }\n        } else {\n          // was `data: { getPost: null }`)\n          return handleSingularGraphQlError(error);\n        }\n      } else {\n        // `data` is `null`:\n        return handleSingularGraphQlError(error);\n      }\n    }\n  });\n}\nexport { getFactory };","map":{"version":3,"names":["getFactory","client","modelIntrospection","model","operation","getInternals","useContext","arguments","length","undefined","customUserAgentDetails","getWithContext","contextSpec","arg","options","_get","get","context","selfAwareAsync","resultPromise","name","query","generateGraphQLDocument","variables","buildGraphQLVariables","auth","authModeParams","headers","getCustomHeaders","userAgentOverride","createUserAgentOverride","basePromise","graphql","_objectSpread","extendedPromise","extendCancellability","data","extensions","key","Object","keys","flattenedResult","flattenItems","selectionSet","initialized","initializeModel","authMode","authToken","error","errors","handleSingularGraphQlError"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\data-schema\\src\\runtime\\internals\\operations\\get.ts"],"sourcesContent":["import { authModeParams, buildGraphQLVariables, flattenItems, generateGraphQLDocument, getCustomHeaders, initializeModel, } from '../APIClient';\nimport { handleSingularGraphQlError } from './utils';\nimport { selfAwareAsync } from '../../utils';\nimport { extendCancellability } from '../cancellation';\nimport { createUserAgentOverride } from '../ai/getCustomUserAgentDetails';\nexport function getFactory(client, modelIntrospection, model, operation, getInternals, useContext = false, customUserAgentDetails) {\n    const getWithContext = (contextSpec, arg, options) => {\n        return _get(client, modelIntrospection, model, arg, options, operation, getInternals, contextSpec, customUserAgentDetails);\n    };\n    const get = (arg, options) => {\n        return _get(client, modelIntrospection, model, arg, options, operation, getInternals, undefined, customUserAgentDetails);\n    };\n    return useContext ? getWithContext : get;\n}\nfunction _get(client, modelIntrospection, model, arg, options, operation, getInternals, context, customUserAgentDetails) {\n    return selfAwareAsync(async (resultPromise) => {\n        const { name } = model;\n        const query = generateGraphQLDocument(modelIntrospection, model, operation, options);\n        const variables = buildGraphQLVariables(model, operation, arg, modelIntrospection);\n        const auth = authModeParams(client, getInternals, options);\n        const headers = getCustomHeaders(client, getInternals, options?.headers);\n        const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n        try {\n            const basePromise = context\n                ? client.graphql(context, {\n                    ...auth,\n                    query,\n                    variables,\n                }, headers)\n                : client.graphql({\n                    ...auth,\n                    query,\n                    variables,\n                    ...userAgentOverride,\n                }, headers);\n            const extendedPromise = extendCancellability(basePromise, resultPromise);\n            const { data, extensions } = await extendedPromise;\n            // flatten response\n            if (data) {\n                const [key] = Object.keys(data);\n                const flattenedResult = flattenItems(modelIntrospection, name, data[key]);\n                if (flattenedResult === null) {\n                    return { data: null, extensions };\n                }\n                else if (options?.selectionSet) {\n                    return { data: flattenedResult, extensions };\n                }\n                else {\n                    // TODO: refactor to avoid destructuring here\n                    const [initialized] = initializeModel(client, name, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context);\n                    return { data: initialized, extensions };\n                }\n            }\n            else {\n                return { data: null, extensions };\n            }\n        }\n        catch (error) {\n            /**\n             * The `data` type returned by `error` here could be:\n             * 1) `null`\n             * 2) an empty object\n             * 3) \"populated\" but with a `null` value `{ getPost: null }`\n             * 4) an actual record `{ getPost: { id: '1', title: 'Hello, World!' } }`\n             */\n            const { data, errors } = error;\n            /**\n             * `data` is not `null`, and is not an empty object:\n             */\n            if (data && Object.keys(data).length !== 0 && errors) {\n                const [key] = Object.keys(data);\n                const flattenedResult = flattenItems(modelIntrospection, name, data[key]);\n                /**\n                 * `flattenedResult` could be `null` here (e.g. `data: { getPost: null }`)\n                 * if `flattenedResult`, result is an actual record:\n                 */\n                if (flattenedResult) {\n                    if (options?.selectionSet) {\n                        return { data: flattenedResult, errors };\n                    }\n                    else {\n                        // TODO: refactor to avoid destructuring here\n                        const [initialized] = initializeModel(client, name, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context);\n                        return { data: initialized, errors };\n                    }\n                }\n                else {\n                    // was `data: { getPost: null }`)\n                    return handleSingularGraphQlError(error);\n                }\n            }\n            else {\n                // `data` is `null`:\n                return handleSingularGraphQlError(error);\n            }\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}