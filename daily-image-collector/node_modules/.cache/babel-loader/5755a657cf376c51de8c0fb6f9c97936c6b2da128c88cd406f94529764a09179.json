{"ast":null,"code":"var _s = $RefreshSig$();\n// Complete useGameLogic hook with 3 draws per day\n\nimport { useState, useEffect, useCallback } from 'react';\nexport const useGameLogic = () => {\n  _s();\n  // User and authentication state\n  const [user, setUser] = useState(null);\n  const [currentView, setCurrentView] = useState('home');\n\n  // Collection and image state\n  const [userCollection, setUserCollection] = useState([]);\n  const [imageDatabase, setImageDatabase] = useState([]);\n  const [todaysImage, setTodaysImage] = useState(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  // UI state\n  const [showNewImage, setShowNewImage] = useState(false);\n  const [shakeAnimation, setShakeAnimation] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  // Daily draws state - NEW\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\n  const [lastDrawDate, setLastDrawDate] = useState(null);\n\n  // Legacy state for compatibility\n  const [todaysClaim, setTodaysClaim] = useState(false);\n\n  // Maximum draws per day\n  const MAX_DRAWS_PER_DAY = 3;\n\n  // Sample image database - replace with your actual data\n  useEffect(() => {\n    // Load your image database here\n    setImageDatabase([\n      // Your image database from the JSON you provided earlier\n    ]);\n  }, []);\n\n  // Initialize daily draws system\n  useEffect(() => {\n    if (user) {\n      initializeDailyDraws();\n    }\n  }, [user]);\n  const initializeDailyDraws = () => {\n    const today = new Date().toDateString();\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\n    if (savedData) {\n      const {\n        date,\n        drawsUsed\n      } = JSON.parse(savedData);\n      if (date === today) {\n        // Same day - restore progress\n        setTotalDrawsToday(drawsUsed);\n        setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\n        setTodaysClaim(drawsUsed > 0); // Legacy compatibility\n      } else {\n        // New day - reset draws\n        resetDailyDraws();\n      }\n    } else {\n      // First time - initialize\n      resetDailyDraws();\n    }\n\n    // Set reset time to next midnight\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    setDrawsResetTime(tomorrow);\n  };\n  const resetDailyDraws = () => {\n    setTotalDrawsToday(0);\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\n    setTodaysClaim(false); // Legacy compatibility\n\n    // Save to localStorage\n    const today = new Date().toDateString();\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\n      date: today,\n      drawsUsed: 0\n    }));\n  };\n  const saveDailyDrawProgress = drawsUsed => {\n    const today = new Date().toDateString();\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\n      date: today,\n      drawsUsed: drawsUsed\n    }));\n  };\n\n  // Image drawing logic\n  const performImageDraw = async () => {\n    // Simulate API call or random selection from imageDatabase\n    const randomIndex = Math.floor(Math.random() * imageDatabase.length);\n    const selectedImage = imageDatabase[randomIndex];\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return selectedImage;\n  };\n\n  // Modified drawDailyImage function\n  const drawDailyImage = useCallback(async () => {\n    // Check if user has draws remaining (admin override)\n    if (dailyDrawsRemaining <= 0 && user.username !== 'admin') {\n      console.log('No draws remaining today');\n      return;\n    }\n    setLoading(true);\n    try {\n      // Perform the draw\n      const drawnImage = await performImageDraw();\n\n      // Update draw counts (skip for admin)\n      if (user.username !== 'admin') {\n        const newDrawsUsed = totalDrawsToday + 1;\n        const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\n        setTotalDrawsToday(newDrawsUsed);\n        setDailyDrawsRemaining(newDrawsRemaining);\n        setTodaysClaim(true); // Legacy compatibility\n\n        // Save progress\n        saveDailyDrawProgress(newDrawsUsed);\n      }\n\n      // Update UI state\n      setTodaysImage(drawnImage);\n      setShowNewImage(true);\n      setShakeAnimation(true);\n\n      // Add to collection\n      const newCard = {\n        ...drawnImage,\n        id: `${drawnImage.id}_${Date.now()}`,\n        dateObtained: new Date().toISOString()\n      };\n      setUserCollection(prev => [...prev, newCard]);\n    } catch (error) {\n      console.error('Error drawing image:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [dailyDrawsRemaining, totalDrawsToday, user, imageDatabase]);\n\n  // Check for daily reset (call this periodically)\n  const checkDailyReset = useCallback(() => {\n    if (!user) return;\n    const now = new Date();\n    const today = now.toDateString();\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\n    if (savedData) {\n      const {\n        date\n      } = JSON.parse(savedData);\n\n      // If date changed, reset draws\n      if (date !== today) {\n        resetDailyDraws();\n      }\n    }\n  }, [user]);\n\n  // Check for reset every minute\n  useEffect(() => {\n    if (user) {\n      const interval = setInterval(checkDailyReset, 60000); // Check every minute\n      return () => clearInterval(interval);\n    }\n  }, [user, checkDailyReset]);\n\n  // For admin users, give unlimited draws\n  const canDraw = () => {\n    if (user && user.username === 'admin') {\n      return true; // Admin has unlimited draws\n    }\n    return dailyDrawsRemaining > 0;\n  };\n  const getDrawButtonText = () => {\n    if (user && user.username === 'admin') {\n      return '🎯 Draw Card (Unlimited)';\n    }\n    if (dailyDrawsRemaining === 0) {\n      return '⏰ No Draws Left Today';\n    }\n    return `🎯 Draw Card (${dailyDrawsRemaining} left)`;\n  };\n  const getTimeUntilReset = () => {\n    if (!drawsResetTime) return null;\n    const now = new Date();\n    const diff = drawsResetTime - now;\n    if (diff <= 0) return null;\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    return {\n      hours,\n      minutes\n    };\n  };\n\n  // User management\n  const login = (username, email) => {\n    const newUser = {\n      username,\n      email\n    };\n    setUser(newUser);\n\n    // Load user's collection from localStorage\n    const savedCollection = localStorage.getItem(`collection_${username}`);\n    if (savedCollection) {\n      setUserCollection(JSON.parse(savedCollection));\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setUserCollection([]);\n    setCurrentView('home');\n    setTodaysImage(null);\n    setSelectedImage(null);\n    setShowNewImage(false);\n    setDailyDrawsRemaining(3);\n    setTotalDrawsToday(0);\n    setTodaysClaim(false);\n  };\n\n  // Save collection when it changes\n  useEffect(() => {\n    if (user && userCollection.length > 0) {\n      localStorage.setItem(`collection_${user.username}`, JSON.stringify(userCollection));\n    }\n  }, [user, userCollection]);\n\n  // Streak count calculation\n  const getStreakCount = () => {\n    // Simple implementation - you can make this more sophisticated\n    const today = new Date().toDateString();\n    const savedStreak = localStorage.getItem(`streak_${user === null || user === void 0 ? void 0 : user.username}`);\n    if (savedStreak) {\n      const {\n        date,\n        count\n      } = JSON.parse(savedStreak);\n      if (date === today) {\n        return count;\n      }\n    }\n    return totalDrawsToday;\n  };\n  return {\n    // User state\n    user,\n    login,\n    logout,\n    // View state\n    currentView,\n    setCurrentView,\n    // Collection state\n    userCollection,\n    imageDatabase,\n    todaysImage,\n    selectedImage,\n    setSelectedImage,\n    // UI state\n    showNewImage,\n    setShowNewImage,\n    shakeAnimation,\n    setShakeAnimation,\n    loading,\n    isFullscreen,\n    setIsFullscreen,\n    // Draw functionality\n    drawDailyImage,\n    todaysClaim,\n    // Legacy compatibility\n    getStreakCount,\n    // New 3-draws-per-day functionality\n    dailyDrawsRemaining,\n    totalDrawsToday,\n    drawsResetTime,\n    canDraw,\n    getDrawButtonText,\n    getTimeUntilReset,\n    MAX_DRAWS_PER_DAY\n  };\n};\n_s(useGameLogic, \"eXGTu9dEjmNSYzcSPVUXdEsIgi4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useGameLogic","_s","user","setUser","currentView","setCurrentView","userCollection","setUserCollection","imageDatabase","setImageDatabase","todaysImage","setTodaysImage","selectedImage","setSelectedImage","showNewImage","setShowNewImage","shakeAnimation","setShakeAnimation","loading","setLoading","isFullscreen","setIsFullscreen","dailyDrawsRemaining","setDailyDrawsRemaining","totalDrawsToday","setTotalDrawsToday","drawsResetTime","setDrawsResetTime","lastDrawDate","setLastDrawDate","todaysClaim","setTodaysClaim","MAX_DRAWS_PER_DAY","initializeDailyDraws","today","Date","toDateString","savedData","localStorage","getItem","username","date","drawsUsed","JSON","parse","resetDailyDraws","tomorrow","setDate","getDate","setHours","setItem","stringify","saveDailyDrawProgress","performImageDraw","randomIndex","Math","floor","random","length","Promise","resolve","setTimeout","drawDailyImage","console","log","drawnImage","newDrawsUsed","newDrawsRemaining","newCard","id","now","dateObtained","toISOString","prev","error","checkDailyReset","interval","setInterval","clearInterval","canDraw","getDrawButtonText","getTimeUntilReset","diff","hours","minutes","login","email","newUser","savedCollection","logout","getStreakCount","savedStreak","count"],"sources":["C:/Users/vinzl/workspace/machicoulis/daily-image-collector/src/hooks/useGameLogic.js"],"sourcesContent":["// Complete useGameLogic hook with 3 draws per day\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameLogic = () => {\r\n  // User and authentication state\r\n  const [user, setUser] = useState(null);\r\n  const [currentView, setCurrentView] = useState('home');\r\n  \r\n  // Collection and image state\r\n  const [userCollection, setUserCollection] = useState([]);\r\n  const [imageDatabase, setImageDatabase] = useState([]);\r\n  const [todaysImage, setTodaysImage] = useState(null);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  \r\n  // UI state\r\n  const [showNewImage, setShowNewImage] = useState(false);\r\n  const [shakeAnimation, setShakeAnimation] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n  \r\n  // Daily draws state - NEW\r\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\r\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\r\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\r\n  const [lastDrawDate, setLastDrawDate] = useState(null);\r\n\r\n  // Legacy state for compatibility\r\n  const [todaysClaim, setTodaysClaim] = useState(false);\r\n\r\n  // Maximum draws per day\r\n  const MAX_DRAWS_PER_DAY = 3;\r\n\r\n  // Sample image database - replace with your actual data\r\n  useEffect(() => {\r\n    // Load your image database here\r\n    setImageDatabase([\r\n      // Your image database from the JSON you provided earlier\r\n    ]);\r\n  }, []);\r\n\r\n  // Initialize daily draws system\r\n  useEffect(() => {\r\n    if (user) {\r\n      initializeDailyDraws();\r\n    }\r\n  }, [user]);\r\n\r\n  const initializeDailyDraws = () => {\r\n    const today = new Date().toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    if (savedData) {\r\n      const { date, drawsUsed } = JSON.parse(savedData);\r\n      \r\n      if (date === today) {\r\n        // Same day - restore progress\r\n        setTotalDrawsToday(drawsUsed);\r\n        setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\r\n        setTodaysClaim(drawsUsed > 0); // Legacy compatibility\r\n      } else {\r\n        // New day - reset draws\r\n        resetDailyDraws();\r\n      }\r\n    } else {\r\n      // First time - initialize\r\n      resetDailyDraws();\r\n    }\r\n    \r\n    // Set reset time to next midnight\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n    setDrawsResetTime(tomorrow);\r\n  };\r\n\r\n  const resetDailyDraws = () => {\r\n    setTotalDrawsToday(0);\r\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\r\n    setTodaysClaim(false); // Legacy compatibility\r\n    \r\n    // Save to localStorage\r\n    const today = new Date().toDateString();\r\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\r\n      date: today,\r\n      drawsUsed: 0\r\n    }));\r\n  };\r\n\r\n  const saveDailyDrawProgress = (drawsUsed) => {\r\n    const today = new Date().toDateString();\r\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\r\n      date: today,\r\n      drawsUsed: drawsUsed\r\n    }));\r\n  };\r\n\r\n  // Image drawing logic\r\n  const performImageDraw = async () => {\r\n    // Simulate API call or random selection from imageDatabase\r\n    const randomIndex = Math.floor(Math.random() * imageDatabase.length);\r\n    const selectedImage = imageDatabase[randomIndex];\r\n    \r\n    // Simulate network delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    return selectedImage;\r\n  };\r\n\r\n  // Modified drawDailyImage function\r\n  const drawDailyImage = useCallback(async () => {\r\n    // Check if user has draws remaining (admin override)\r\n    if (dailyDrawsRemaining <= 0 && user.username !== 'admin') {\r\n      console.log('No draws remaining today');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Perform the draw\r\n      const drawnImage = await performImageDraw();\r\n      \r\n      // Update draw counts (skip for admin)\r\n      if (user.username !== 'admin') {\r\n        const newDrawsUsed = totalDrawsToday + 1;\r\n        const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\r\n        \r\n        setTotalDrawsToday(newDrawsUsed);\r\n        setDailyDrawsRemaining(newDrawsRemaining);\r\n        setTodaysClaim(true); // Legacy compatibility\r\n        \r\n        // Save progress\r\n        saveDailyDrawProgress(newDrawsUsed);\r\n      }\r\n      \r\n      // Update UI state\r\n      setTodaysImage(drawnImage);\r\n      setShowNewImage(true);\r\n      setShakeAnimation(true);\r\n      \r\n      // Add to collection\r\n      const newCard = {\r\n        ...drawnImage,\r\n        id: `${drawnImage.id}_${Date.now()}`,\r\n        dateObtained: new Date().toISOString()\r\n      };\r\n      \r\n      setUserCollection(prev => [...prev, newCard]);\r\n      \r\n    } catch (error) {\r\n      console.error('Error drawing image:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dailyDrawsRemaining, totalDrawsToday, user, imageDatabase]);\r\n\r\n  // Check for daily reset (call this periodically)\r\n  const checkDailyReset = useCallback(() => {\r\n    if (!user) return;\r\n    \r\n    const now = new Date();\r\n    const today = now.toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    if (savedData) {\r\n      const { date } = JSON.parse(savedData);\r\n      \r\n      // If date changed, reset draws\r\n      if (date !== today) {\r\n        resetDailyDraws();\r\n      }\r\n    }\r\n  }, [user]);\r\n\r\n  // Check for reset every minute\r\n  useEffect(() => {\r\n    if (user) {\r\n      const interval = setInterval(checkDailyReset, 60000); // Check every minute\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user, checkDailyReset]);\r\n\r\n  // For admin users, give unlimited draws\r\n  const canDraw = () => {\r\n    if (user && user.username === 'admin') {\r\n      return true; // Admin has unlimited draws\r\n    }\r\n    return dailyDrawsRemaining > 0;\r\n  };\r\n\r\n  const getDrawButtonText = () => {\r\n    if (user && user.username === 'admin') {\r\n      return '🎯 Draw Card (Unlimited)';\r\n    }\r\n    \r\n    if (dailyDrawsRemaining === 0) {\r\n      return '⏰ No Draws Left Today';\r\n    }\r\n    \r\n    return `🎯 Draw Card (${dailyDrawsRemaining} left)`;\r\n  };\r\n\r\n  const getTimeUntilReset = () => {\r\n    if (!drawsResetTime) return null;\r\n    \r\n    const now = new Date();\r\n    const diff = drawsResetTime - now;\r\n    \r\n    if (diff <= 0) return null;\r\n    \r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    return { hours, minutes };\r\n  };\r\n\r\n  // User management\r\n  const login = (username, email) => {\r\n    const newUser = { username, email };\r\n    setUser(newUser);\r\n    \r\n    // Load user's collection from localStorage\r\n    const savedCollection = localStorage.getItem(`collection_${username}`);\r\n    if (savedCollection) {\r\n      setUserCollection(JSON.parse(savedCollection));\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setUserCollection([]);\r\n    setCurrentView('home');\r\n    setTodaysImage(null);\r\n    setSelectedImage(null);\r\n    setShowNewImage(false);\r\n    setDailyDrawsRemaining(3);\r\n    setTotalDrawsToday(0);\r\n    setTodaysClaim(false);\r\n  };\r\n\r\n  // Save collection when it changes\r\n  useEffect(() => {\r\n    if (user && userCollection.length > 0) {\r\n      localStorage.setItem(`collection_${user.username}`, JSON.stringify(userCollection));\r\n    }\r\n  }, [user, userCollection]);\r\n\r\n  // Streak count calculation\r\n  const getStreakCount = () => {\r\n    // Simple implementation - you can make this more sophisticated\r\n    const today = new Date().toDateString();\r\n    const savedStreak = localStorage.getItem(`streak_${user?.username}`);\r\n    \r\n    if (savedStreak) {\r\n      const { date, count } = JSON.parse(savedStreak);\r\n      if (date === today) {\r\n        return count;\r\n      }\r\n    }\r\n    \r\n    return totalDrawsToday;\r\n  };\r\n\r\n  return {\r\n    // User state\r\n    user,\r\n    login,\r\n    logout,\r\n    \r\n    // View state\r\n    currentView,\r\n    setCurrentView,\r\n    \r\n    // Collection state\r\n    userCollection,\r\n    imageDatabase,\r\n    todaysImage,\r\n    selectedImage,\r\n    setSelectedImage,\r\n    \r\n    // UI state\r\n    showNewImage,\r\n    setShowNewImage,\r\n    shakeAnimation,\r\n    setShakeAnimation,\r\n    loading,\r\n    isFullscreen,\r\n    setIsFullscreen,\r\n    \r\n    // Draw functionality\r\n    drawDailyImage,\r\n    todaysClaim, // Legacy compatibility\r\n    getStreakCount,\r\n    \r\n    // New 3-draws-per-day functionality\r\n    dailyDrawsRemaining,\r\n    totalDrawsToday,\r\n    drawsResetTime,\r\n    canDraw,\r\n    getDrawButtonText,\r\n    getTimeUntilReset,\r\n    MAX_DRAWS_PER_DAY\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}