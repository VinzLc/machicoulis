{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64Encoder = void 0;\nconst globalHelpers_1 = require(\"../../globalHelpers\");\nconst bytesToString_1 = require(\"./bytesToString\");\nexports.base64Encoder = {\n  /**\n   * Convert input to base64-encoded string\n   * @param input - string to convert to base64\n   * @param options - encoding options that can optionally produce a base64url string\n   * @returns base64-encoded string\n   */\n  convert(input, options = {\n    urlSafe: false,\n    skipPadding: false\n  }) {\n    const inputStr = typeof input === 'string' ? input : (0, bytesToString_1.bytesToString)(input);\n    let encodedStr = (0, globalHelpers_1.getBtoa)()(inputStr);\n    // urlSafe char replacement and skipPadding options conform to the base64url spec\n    // https://datatracker.ietf.org/doc/html/rfc4648#section-5\n    if (options.urlSafe) {\n      encodedStr = encodedStr.replace(/\\+/g, '-').replace(/\\//g, '_');\n    }\n    if (options.skipPadding) {\n      encodedStr = encodedStr.replace(/=/g, '');\n    }\n    return encodedStr;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","base64Encoder","globalHelpers_1","require","bytesToString_1","convert","input","options","urlSafe","skipPadding","inputStr","bytesToString","encodedStr","getBtoa","replace"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\utils\\convert\\base64\\base64Encoder.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64Encoder = void 0;\nconst globalHelpers_1 = require(\"../../globalHelpers\");\nconst bytesToString_1 = require(\"./bytesToString\");\nexports.base64Encoder = {\n    /**\n     * Convert input to base64-encoded string\n     * @param input - string to convert to base64\n     * @param options - encoding options that can optionally produce a base64url string\n     * @returns base64-encoded string\n     */\n    convert(input, options = {\n        urlSafe: false,\n        skipPadding: false,\n    }) {\n        const inputStr = typeof input === 'string' ? input : (0, bytesToString_1.bytesToString)(input);\n        let encodedStr = (0, globalHelpers_1.getBtoa)()(inputStr);\n        // urlSafe char replacement and skipPadding options conform to the base64url spec\n        // https://datatracker.ietf.org/doc/html/rfc4648#section-5\n        if (options.urlSafe) {\n            encodedStr = encodedStr.replace(/\\+/g, '-').replace(/\\//g, '_');\n        }\n        if (options.skipPadding) {\n            encodedStr = encodedStr.replace(/=/g, '');\n        }\n        return encodedStr;\n    },\n};\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,MAAM;AAC9B,MAAMC,eAAe,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtD,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAClDJ,OAAO,CAACE,aAAa,GAAG;EACxB;AACA;AACA;AACA;AACA;AACA;EACII,OAAOA,CAACC,KAAK,EAAEC,OAAO,GAAG;IACrBC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE;EACrB,CAAK,EAAE;IACC,MAAMC,QAAQ,GAAG,OAAOJ,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,IAAIF,eAAe,CAACO,aAAa,EAAEL,KAAK,CAAC;IAC9F,IAAIM,UAAU,GAAG,IAAIV,eAAe,CAACW,OAAO,GAAG,CAACH,QAAQ,CAAC;IACjE;IACA;IACQ,IAAIH,OAAO,CAACC,OAAO,EAAE;MACjBI,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IAC3E;IACQ,IAAIP,OAAO,CAACE,WAAW,EAAE;MACrBG,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IACrD;IACQ,OAAOF,UAAU;EACzB;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}