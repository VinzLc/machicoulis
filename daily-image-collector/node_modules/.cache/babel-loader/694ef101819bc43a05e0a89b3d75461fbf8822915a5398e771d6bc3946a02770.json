{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.presignUrl = void 0;\nconst amplifyUrl_1 = require(\"../../../../../utils/amplifyUrl\");\nconst constants_1 = require(\"./constants\");\nconst getSigningValues_1 = require(\"./utils/getSigningValues\");\nconst getSignature_1 = require(\"./utils/getSignature\");\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nconst presignUrl = ({\n  body,\n  method = 'GET',\n  url\n}, {\n  expiration,\n  ...options\n}) => {\n  const signingValues = (0, getSigningValues_1.getSigningValues)(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const presignedUrl = new amplifyUrl_1.AmplifyUrl(url);\n  Object.entries({\n    [constants_1.ALGORITHM_QUERY_PARAM]: constants_1.SHA256_ALGORITHM_IDENTIFIER,\n    [constants_1.CREDENTIAL_QUERY_PARAM]: `${accessKeyId}/${credentialScope}`,\n    [constants_1.AMZ_DATE_QUERY_PARAM]: longDate,\n    [constants_1.SIGNED_HEADERS_QUERY_PARAM]: constants_1.HOST_HEADER,\n    ...(expiration && {\n      [constants_1.EXPIRES_QUERY_PARAM]: expiration.toString()\n    }),\n    ...(sessionToken && {\n      [constants_1.TOKEN_QUERY_PARAM]: sessionToken\n    })\n  }).forEach(([key, value]) => {\n    presignedUrl.searchParams.append(key, value);\n  });\n  const requestToSign = {\n    body,\n    headers: {\n      [constants_1.HOST_HEADER]: url.host\n    },\n    method,\n    url: presignedUrl\n  };\n  // calculate and add the signature to the url\n  const signature = (0, getSignature_1.getSignature)(requestToSign, signingValues);\n  presignedUrl.searchParams.append(constants_1.SIGNATURE_QUERY_PARAM, signature);\n  return presignedUrl;\n};\nexports.presignUrl = presignUrl;","map":{"version":3,"names":["Object","defineProperty","exports","value","presignUrl","amplifyUrl_1","require","constants_1","getSigningValues_1","getSignature_1","body","method","url","expiration","options","signingValues","getSigningValues","accessKeyId","credentialScope","longDate","sessionToken","presignedUrl","AmplifyUrl","entries","ALGORITHM_QUERY_PARAM","SHA256_ALGORITHM_IDENTIFIER","CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","HOST_HEADER","EXPIRES_QUERY_PARAM","toString","TOKEN_QUERY_PARAM","forEach","key","searchParams","append","requestToSign","headers","host","signature","getSignature","SIGNATURE_QUERY_PARAM"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\presignUrl.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.presignUrl = void 0;\nconst amplifyUrl_1 = require(\"../../../../../utils/amplifyUrl\");\nconst constants_1 = require(\"./constants\");\nconst getSigningValues_1 = require(\"./utils/getSigningValues\");\nconst getSignature_1 = require(\"./utils/getSignature\");\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nconst presignUrl = ({ body, method = 'GET', url }, { expiration, ...options }) => {\n    const signingValues = (0, getSigningValues_1.getSigningValues)(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const presignedUrl = new amplifyUrl_1.AmplifyUrl(url);\n    Object.entries({\n        [constants_1.ALGORITHM_QUERY_PARAM]: constants_1.SHA256_ALGORITHM_IDENTIFIER,\n        [constants_1.CREDENTIAL_QUERY_PARAM]: `${accessKeyId}/${credentialScope}`,\n        [constants_1.AMZ_DATE_QUERY_PARAM]: longDate,\n        [constants_1.SIGNED_HEADERS_QUERY_PARAM]: constants_1.HOST_HEADER,\n        ...(expiration && { [constants_1.EXPIRES_QUERY_PARAM]: expiration.toString() }),\n        ...(sessionToken && { [constants_1.TOKEN_QUERY_PARAM]: sessionToken }),\n    }).forEach(([key, value]) => {\n        presignedUrl.searchParams.append(key, value);\n    });\n    const requestToSign = {\n        body,\n        headers: { [constants_1.HOST_HEADER]: url.host },\n        method,\n        url: presignedUrl,\n    };\n    // calculate and add the signature to the url\n    const signature = (0, getSignature_1.getSignature)(requestToSign, signingValues);\n    presignedUrl.searchParams.append(constants_1.SIGNATURE_QUERY_PARAM, signature);\n    return presignedUrl;\n};\nexports.presignUrl = presignUrl;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,MAAM;AAC3B,MAAMC,YAAY,GAAGC,OAAO,CAAC,iCAAiC,CAAC;AAC/D,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAME,kBAAkB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC9D,MAAMG,cAAc,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,UAAU,GAAGA,CAAC;EAAEM,IAAI;EAAEC,MAAM,GAAG,KAAK;EAAEC;AAAG,CAAE,EAAE;EAAEC,UAAU;EAAE,GAAGC;AAAO,CAAE,KAAK;EAC9E,MAAMC,aAAa,GAAG,IAAIP,kBAAkB,CAACQ,gBAAgB,EAAEF,OAAO,CAAC;EACvE,MAAM;IAAEG,WAAW;IAAEC,eAAe;IAAEC,QAAQ;IAAEC;EAAY,CAAE,GAAGL,aAAa;EAClF;EACI,MAAMM,YAAY,GAAG,IAAIhB,YAAY,CAACiB,UAAU,CAACV,GAAG,CAAC;EACrDZ,MAAM,CAACuB,OAAO,CAAC;IACX,CAAChB,WAAW,CAACiB,qBAAqB,GAAGjB,WAAW,CAACkB,2BAA2B;IAC5E,CAAClB,WAAW,CAACmB,sBAAsB,GAAG,GAAGT,WAAW,IAAIC,eAAe,EAAE;IACzE,CAACX,WAAW,CAACoB,oBAAoB,GAAGR,QAAQ;IAC5C,CAACZ,WAAW,CAACqB,0BAA0B,GAAGrB,WAAW,CAACsB,WAAW;IACjE,IAAIhB,UAAU,IAAI;MAAE,CAACN,WAAW,CAACuB,mBAAmB,GAAGjB,UAAU,CAACkB,QAAQ;IAAE,CAAE,CAAC;IAC/E,IAAIX,YAAY,IAAI;MAAE,CAACb,WAAW,CAACyB,iBAAiB,GAAGZ;IAAY,CAAE;EAC7E,CAAK,CAAC,CAACa,OAAO,CAAC,CAAC,CAACC,GAAG,EAAE/B,KAAK,CAAC,KAAK;IACzBkB,YAAY,CAACc,YAAY,CAACC,MAAM,CAACF,GAAG,EAAE/B,KAAK,CAAC;EACpD,CAAK,CAAC;EACF,MAAMkC,aAAa,GAAG;IAClB3B,IAAI;IACJ4B,OAAO,EAAE;MAAE,CAAC/B,WAAW,CAACsB,WAAW,GAAGjB,GAAG,CAAC2B;IAAI,CAAE;IAChD5B,MAAM;IACNC,GAAG,EAAES;EACb,CAAK;EACL;EACI,MAAMmB,SAAS,GAAG,IAAI/B,cAAc,CAACgC,YAAY,EAAEJ,aAAa,EAAEtB,aAAa,CAAC;EAChFM,YAAY,CAACc,YAAY,CAACC,MAAM,CAAC7B,WAAW,CAACmC,qBAAqB,EAAEF,SAAS,CAAC;EAC9E,OAAOnB,YAAY;AACvB,CAAC;AACDnB,OAAO,CAACE,UAAU,GAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}