{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useGameLogic.js\n\nimport { useState, useEffect, useCallback } from 'react';\nimport imageData from '../imageDatabase.json';\nconst imageDatabase = imageData.images;\nexport const useGameLogic = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [currentView, setCurrentView] = useState('home');\n  const [userCollection, setUserCollection] = useState([]);\n  const [todaysClaim, setTodaysClaim] = useState(false);\n  const [showNewImage, setShowNewImage] = useState(false);\n  const [todaysImage, setTodaysImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [collectionView, setCollectionView] = useState('obtained');\n  const [shakeAnimation, setShakeAnimation] = useState(true);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  // NEW: 3 draws per day state\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\n\n  // Maximum draws per day\n  const MAX_DRAWS_PER_DAY = 3;\n  const loadUserData = useCallback(() => {\n    if (user) {\n      const collection = JSON.parse(localStorage.getItem(`collection_${user.username}`) || '[]');\n      setUserCollection(collection);\n    }\n  }, [user]);\n\n  // NEW: Initialize daily draws system\n  const initializeDailyDraws = useCallback(() => {\n    if (!user) return;\n    const today = new Date().toDateString();\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\n    console.log('Initializing draws for date:', today);\n    console.log('Saved data:', savedData);\n    if (savedData) {\n      try {\n        const {\n          date,\n          drawsUsed\n        } = JSON.parse(savedData);\n        if (date === today) {\n          // Same day - restore progress\n          console.log('Same day, restoring progress. Draws used:', drawsUsed);\n          setTotalDrawsToday(drawsUsed);\n          setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\n          setTodaysClaim(drawsUsed > 0); // Legacy compatibility\n        } else {\n          // New day - reset draws\n          console.log('New day detected, resetting draws');\n          resetDailyDraws();\n        }\n      } catch (error) {\n        console.error('Error parsing saved data:', error);\n        resetDailyDraws();\n      }\n    } else {\n      // First time - initialize\n      console.log('No saved data, initializing fresh');\n      resetDailyDraws();\n    }\n\n    // Set reset time to next midnight\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    setDrawsResetTime(tomorrow);\n  }, [user]);\n\n  // NEW: Reset daily draws function\n  const resetDailyDraws = useCallback(() => {\n    console.log('Resetting daily draws');\n    setTotalDrawsToday(0);\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\n    setTodaysClaim(false);\n\n    // Save to localStorage\n    if (user) {\n      const today = new Date().toDateString();\n      localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\n        date: today,\n        drawsUsed: 0\n      }));\n    }\n  }, [user]);\n\n  // NEW: Save daily draw progress\n  const saveDailyDrawProgress = useCallback(drawsUsed => {\n    if (!user) return;\n    const today = new Date().toDateString();\n    const dataToSave = {\n      date: today,\n      drawsUsed: drawsUsed\n    };\n    console.log('Saving daily draw progress:', dataToSave);\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify(dataToSave));\n  }, [user]);\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n      initializeDailyDraws(); // NEW: Initialize draw system\n\n      // Keep existing legacy logic for backward compatibility\n      if (user.username === 'admin') {\n        setTodaysClaim(false);\n      } else {\n        const today = new Date().toDateString();\n        const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\n        setTodaysClaim(lastClaim === today);\n      }\n    }\n  }, [user, loadUserData, initializeDailyDraws]);\n\n  // NEW: Check for daily reset periodically\n  const checkDailyReset = useCallback(() => {\n    if (!user) return;\n    const now = new Date();\n    const today = now.toDateString();\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\n    if (savedData) {\n      try {\n        const {\n          date\n        } = JSON.parse(savedData);\n\n        // If date changed, reset draws\n        if (date !== today) {\n          console.log('Daily reset detected');\n          resetDailyDraws();\n        }\n      } catch (error) {\n        console.error('Error checking daily reset:', error);\n      }\n    }\n  }, [user, resetDailyDraws]);\n\n  // NEW: Check for reset every minute\n  useEffect(() => {\n    if (user) {\n      const interval = setInterval(checkDailyReset, 60000);\n      return () => clearInterval(interval);\n    }\n  }, [user, checkDailyReset]);\n  const getStreakCount = useCallback(() => {\n    if (!user) return 0;\n    return parseInt(localStorage.getItem(`streak_${user.username}`) || '0');\n  }, [user]);\n  const updateStreak = useCallback(() => {\n    if (!user) return;\n    const today = new Date().toDateString();\n    const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\n    let newStreak = lastClaim === yesterday ? getStreakCount() + 1 : 1;\n    localStorage.setItem(`streak_${user.username}`, newStreak.toString());\n  }, [user, getStreakCount]);\n  const login = (username, email) => {\n    const userData = {\n      username,\n      email,\n      joinDate: new Date().toISOString()\n    };\n    setUser(userData);\n    setCurrentView('home');\n  };\n  const logout = () => {\n    setUser(null);\n    setCurrentView('home');\n    setUserCollection([]);\n    setTodaysClaim(false);\n    // NEW: Reset draw state on logout\n    setDailyDrawsRemaining(3);\n    setTotalDrawsToday(0);\n    setDrawsResetTime(null);\n  };\n\n  // UPDATED: Enhanced drawDailyImage with 3-draws-per-day logic\n  const drawDailyImage = useCallback(() => {\n    // NEW: Check draw limits (admin override)\n    if ((user === null || user === void 0 ? void 0 : user.username) !== 'admin' && dailyDrawsRemaining <= 0) {\n      console.log('No draws remaining today');\n      alert('No draws remaining today!');\n      return;\n    }\n\n    // Keep original logic for legacy todaysClaim check\n    if (todaysClaim && (user === null || user === void 0 ? void 0 : user.username) !== 'admin') return;\n    if (loading) return;\n    setLoading(true);\n    setTimeout(() => {\n      try {\n        if (!imageDatabase || imageDatabase.length === 0) {\n          throw new Error('No images available in database');\n        }\n        const weights = {\n          Common: 50,\n          Rare: 30,\n          Epic: 15,\n          Legendary: 5\n        };\n        const totalWeight = Object.values(weights).reduce((a, b) => a + b, 0);\n        const random = Math.random() * totalWeight;\n        let currentWeight = 0;\n        let selectedRarity = 'Common';\n        for (const [rarity, weight] of Object.entries(weights)) {\n          currentWeight += weight;\n          if (random <= currentWeight) {\n            selectedRarity = rarity;\n            break;\n          }\n        }\n        let availableImages = imageDatabase.filter(img => img.rarity === selectedRarity);\n        if (availableImages.length === 0) {\n          availableImages = imageDatabase.filter(img => img.rarity === 'Common');\n          if (availableImages.length === 0) throw new Error('No images available');\n        }\n        const drawnImage = availableImages[Math.floor(Math.random() * availableImages.length)];\n        const newCollection = [...userCollection, {\n          ...drawnImage,\n          dateObtained: new Date().toISOString(),\n          id: `${drawnImage.id}_${Date.now()}`,\n          imageUrl: drawnImage.url,\n          imageName: drawnImage.name\n        }];\n        setUserCollection(newCollection);\n        localStorage.setItem(`collection_${user.username}`, JSON.stringify(newCollection));\n\n        // NEW: Update draw counts (skip for admin)\n        if ((user === null || user === void 0 ? void 0 : user.username) !== 'admin') {\n          const newDrawsUsed = totalDrawsToday + 1;\n          const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\n          console.log('Updating draw counts:', {\n            newDrawsUsed,\n            newDrawsRemaining\n          });\n          setTotalDrawsToday(newDrawsUsed);\n          setDailyDrawsRemaining(newDrawsRemaining);\n          saveDailyDrawProgress(newDrawsUsed);\n\n          // Keep existing legacy logic\n          updateStreak();\n          const today = new Date().toDateString();\n          localStorage.setItem(`lastClaim_${user.username}`, today);\n          setTodaysClaim(true);\n        }\n        setTodaysImage(drawnImage);\n        setShakeAnimation(true);\n        setShowNewImage(true);\n        setTimeout(() => setShakeAnimation(false), 5000);\n      } catch (error) {\n        console.error('Error drawing daily image:', error);\n        alert(`Error: ${error.message}`);\n      } finally {\n        setLoading(false);\n      }\n    }, 1500);\n  }, [todaysClaim, loading, userCollection, user, updateStreak, dailyDrawsRemaining, totalDrawsToday, saveDailyDrawProgress]);\n\n  // NEW: Check if user can draw\n  const canDraw = useCallback(() => {\n    const result = (user === null || user === void 0 ? void 0 : user.username) === 'admin' || dailyDrawsRemaining > 0;\n    console.log('canDraw called:', {\n      username: user === null || user === void 0 ? void 0 : user.username,\n      dailyDrawsRemaining,\n      result\n    });\n    return result;\n  }, [user, dailyDrawsRemaining]);\n\n  // NEW: Get dynamic button text\n  const getDrawButtonText = useCallback(() => {\n    if ((user === null || user === void 0 ? void 0 : user.username) === 'admin') {\n      return '🎯 Tirer une Image (Illimité)';\n    }\n    if (dailyDrawsRemaining === 0) {\n      return '⏰ Plus de tirages';\n    }\n    return `🎯 Tirer (${dailyDrawsRemaining}/${MAX_DRAWS_PER_DAY})`;\n  }, [user, dailyDrawsRemaining]);\n\n  // NEW: Get time until reset\n  const getTimeUntilReset = useCallback(() => {\n    if (!drawsResetTime) return null;\n    const now = new Date();\n    const diff = drawsResetTime - now;\n    if (diff <= 0) return null;\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    return {\n      hours,\n      minutes\n    };\n  }, [drawsResetTime]);\n  return {\n    // Existing exports\n    user,\n    currentView,\n    setCurrentView,\n    userCollection,\n    todaysClaim,\n    showNewImage,\n    setShowNewImage,\n    todaysImage,\n    loading,\n    selectedImage,\n    setSelectedImage,\n    collectionView,\n    setCollectionView,\n    shakeAnimation,\n    setShakeAnimation,\n    isFullscreen,\n    setIsFullscreen,\n    imageDatabase,\n    login,\n    logout,\n    drawDailyImage,\n    getStreakCount,\n    // NEW: 3-draws-per-day exports\n    dailyDrawsRemaining,\n    totalDrawsToday,\n    drawsResetTime,\n    canDraw,\n    getDrawButtonText,\n    getTimeUntilReset,\n    MAX_DRAWS_PER_DAY\n  };\n};\n_s(useGameLogic, \"+EVlWeQjFYI5pJb+zWk8Kncl0JI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","imageData","imageDatabase","images","useGameLogic","_s","user","setUser","currentView","setCurrentView","userCollection","setUserCollection","todaysClaim","setTodaysClaim","showNewImage","setShowNewImage","todaysImage","setTodaysImage","loading","setLoading","selectedImage","setSelectedImage","collectionView","setCollectionView","shakeAnimation","setShakeAnimation","isFullscreen","setIsFullscreen","dailyDrawsRemaining","setDailyDrawsRemaining","totalDrawsToday","setTotalDrawsToday","drawsResetTime","setDrawsResetTime","MAX_DRAWS_PER_DAY","loadUserData","collection","JSON","parse","localStorage","getItem","username","initializeDailyDraws","today","Date","toDateString","savedData","console","log","date","drawsUsed","resetDailyDraws","error","tomorrow","setDate","getDate","setHours","setItem","stringify","saveDailyDrawProgress","dataToSave","lastClaim","checkDailyReset","now","interval","setInterval","clearInterval","getStreakCount","parseInt","updateStreak","yesterday","newStreak","toString","login","email","userData","joinDate","toISOString","logout","drawDailyImage","alert","setTimeout","length","Error","weights","Common","Rare","Epic","Legendary","totalWeight","Object","values","reduce","a","b","random","Math","currentWeight","selectedRarity","rarity","weight","entries","availableImages","filter","img","drawnImage","floor","newCollection","dateObtained","id","imageUrl","url","imageName","name","newDrawsUsed","newDrawsRemaining","message","canDraw","result","getDrawButtonText","getTimeUntilReset","diff","hours","minutes"],"sources":["C:/Users/vinzl/workspace/machicoulis/daily-image-collector/src/hooks/useGameLogic.js"],"sourcesContent":["// src/hooks/useGameLogic.js\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport imageData from '../imageDatabase.json';\r\n\r\nconst imageDatabase = imageData.images;\r\n\r\nexport const useGameLogic = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [currentView, setCurrentView] = useState('home');\r\n  const [userCollection, setUserCollection] = useState([]);\r\n  const [todaysClaim, setTodaysClaim] = useState(false);\r\n  const [showNewImage, setShowNewImage] = useState(false);\r\n  const [todaysImage, setTodaysImage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [collectionView, setCollectionView] = useState('obtained');\r\n  const [shakeAnimation, setShakeAnimation] = useState(true);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n\r\n  // NEW: 3 draws per day state\r\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\r\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\r\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\r\n\r\n  // Maximum draws per day\r\n  const MAX_DRAWS_PER_DAY = 3;\r\n\r\n  const loadUserData = useCallback(() => {\r\n    if (user) {\r\n      const collection = JSON.parse(localStorage.getItem(`collection_${user.username}`) || '[]');\r\n      setUserCollection(collection);\r\n    }\r\n  }, [user]);\r\n\r\n  // NEW: Initialize daily draws system\r\n  const initializeDailyDraws = useCallback(() => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date().toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    console.log('Initializing draws for date:', today);\r\n    console.log('Saved data:', savedData);\r\n    \r\n    if (savedData) {\r\n      try {\r\n        const { date, drawsUsed } = JSON.parse(savedData);\r\n        \r\n        if (date === today) {\r\n          // Same day - restore progress\r\n          console.log('Same day, restoring progress. Draws used:', drawsUsed);\r\n          setTotalDrawsToday(drawsUsed);\r\n          setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\r\n          setTodaysClaim(drawsUsed > 0); // Legacy compatibility\r\n        } else {\r\n          // New day - reset draws\r\n          console.log('New day detected, resetting draws');\r\n          resetDailyDraws();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing saved data:', error);\r\n        resetDailyDraws();\r\n      }\r\n    } else {\r\n      // First time - initialize\r\n      console.log('No saved data, initializing fresh');\r\n      resetDailyDraws();\r\n    }\r\n    \r\n    // Set reset time to next midnight\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n    setDrawsResetTime(tomorrow);\r\n  }, [user]);\r\n\r\n  // NEW: Reset daily draws function\r\n  const resetDailyDraws = useCallback(() => {\r\n    console.log('Resetting daily draws');\r\n    setTotalDrawsToday(0);\r\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\r\n    setTodaysClaim(false);\r\n    \r\n    // Save to localStorage\r\n    if (user) {\r\n      const today = new Date().toDateString();\r\n      localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\r\n        date: today,\r\n        drawsUsed: 0\r\n      }));\r\n    }\r\n  }, [user]);\r\n\r\n  // NEW: Save daily draw progress\r\n  const saveDailyDrawProgress = useCallback((drawsUsed) => {\r\n    if (!user) return;\r\n    \r\n    const today = new Date().toDateString();\r\n    const dataToSave = {\r\n      date: today,\r\n      drawsUsed: drawsUsed\r\n    };\r\n    console.log('Saving daily draw progress:', dataToSave);\r\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify(dataToSave));\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadUserData();\r\n      initializeDailyDraws(); // NEW: Initialize draw system\r\n      \r\n      // Keep existing legacy logic for backward compatibility\r\n      if (user.username === 'admin') {\r\n        setTodaysClaim(false);\r\n      } else {\r\n        const today = new Date().toDateString();\r\n        const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\r\n        setTodaysClaim(lastClaim === today);\r\n      }\r\n    }\r\n  }, [user, loadUserData, initializeDailyDraws]);\r\n\r\n  // NEW: Check for daily reset periodically\r\n  const checkDailyReset = useCallback(() => {\r\n    if (!user) return;\r\n    \r\n    const now = new Date();\r\n    const today = now.toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    if (savedData) {\r\n      try {\r\n        const { date } = JSON.parse(savedData);\r\n        \r\n        // If date changed, reset draws\r\n        if (date !== today) {\r\n          console.log('Daily reset detected');\r\n          resetDailyDraws();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking daily reset:', error);\r\n      }\r\n    }\r\n  }, [user, resetDailyDraws]);\r\n\r\n  // NEW: Check for reset every minute\r\n  useEffect(() => {\r\n    if (user) {\r\n      const interval = setInterval(checkDailyReset, 60000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user, checkDailyReset]);\r\n\r\n  const getStreakCount = useCallback(() => {\r\n    if (!user) return 0;\r\n    return parseInt(localStorage.getItem(`streak_${user.username}`) || '0');\r\n  }, [user]);\r\n\r\n  const updateStreak = useCallback(() => {\r\n    if (!user) return;\r\n    const today = new Date().toDateString();\r\n    const lastClaim = localStorage.getItem(`lastClaim_${user.username}`);\r\n    const yesterday = new Date(Date.now() - 86400000).toDateString();\r\n    \r\n    let newStreak = (lastClaim === yesterday) ? getStreakCount() + 1 : 1;\r\n    localStorage.setItem(`streak_${user.username}`, newStreak.toString());\r\n  }, [user, getStreakCount]);\r\n\r\n  const login = (username, email) => {\r\n    const userData = { username, email, joinDate: new Date().toISOString() };\r\n    setUser(userData);\r\n    setCurrentView('home');\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setCurrentView('home');\r\n    setUserCollection([]);\r\n    setTodaysClaim(false);\r\n    // NEW: Reset draw state on logout\r\n    setDailyDrawsRemaining(3);\r\n    setTotalDrawsToday(0);\r\n    setDrawsResetTime(null);\r\n  };\r\n\r\n  // UPDATED: Enhanced drawDailyImage with 3-draws-per-day logic\r\n  const drawDailyImage = useCallback(() => {\r\n    // NEW: Check draw limits (admin override)\r\n    if (user?.username !== 'admin' && dailyDrawsRemaining <= 0) {\r\n      console.log('No draws remaining today');\r\n      alert('No draws remaining today!');\r\n      return;\r\n    }\r\n    \r\n    // Keep original logic for legacy todaysClaim check\r\n    if (todaysClaim && user?.username !== 'admin') return;\r\n    if (loading) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    setTimeout(() => {\r\n      try {\r\n        if (!imageDatabase || imageDatabase.length === 0) {\r\n          throw new Error('No images available in database');\r\n        }\r\n        \r\n        const weights = { Common: 50, Rare: 30, Epic: 15, Legendary: 5 };\r\n        const totalWeight = Object.values(weights).reduce((a, b) => a + b, 0);\r\n        const random = Math.random() * totalWeight;\r\n        \r\n        let currentWeight = 0;\r\n        let selectedRarity = 'Common';\r\n        for (const [rarity, weight] of Object.entries(weights)) {\r\n          currentWeight += weight;\r\n          if (random <= currentWeight) {\r\n            selectedRarity = rarity;\r\n            break;\r\n          }\r\n        }\r\n\r\n        let availableImages = imageDatabase.filter(img => img.rarity === selectedRarity);\r\n        if (availableImages.length === 0) {\r\n            availableImages = imageDatabase.filter(img => img.rarity === 'Common');\r\n            if(availableImages.length === 0) throw new Error('No images available');\r\n        }\r\n\r\n        const drawnImage = availableImages[Math.floor(Math.random() * availableImages.length)];\r\n        \r\n        const newCollection = [...userCollection, { \r\n          ...drawnImage, \r\n          dateObtained: new Date().toISOString(),\r\n          id: `${drawnImage.id}_${Date.now()}`,\r\n          imageUrl: drawnImage.url,\r\n          imageName: drawnImage.name\r\n        }];\r\n        \r\n        setUserCollection(newCollection);\r\n        localStorage.setItem(`collection_${user.username}`, JSON.stringify(newCollection));\r\n        \r\n        // NEW: Update draw counts (skip for admin)\r\n        if (user?.username !== 'admin') {\r\n          const newDrawsUsed = totalDrawsToday + 1;\r\n          const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\r\n          \r\n          console.log('Updating draw counts:', { newDrawsUsed, newDrawsRemaining });\r\n          \r\n          setTotalDrawsToday(newDrawsUsed);\r\n          setDailyDrawsRemaining(newDrawsRemaining);\r\n          saveDailyDrawProgress(newDrawsUsed);\r\n          \r\n          // Keep existing legacy logic\r\n          updateStreak();\r\n          const today = new Date().toDateString();\r\n          localStorage.setItem(`lastClaim_${user.username}`, today);\r\n          setTodaysClaim(true);\r\n        }\r\n        \r\n        setTodaysImage(drawnImage);\r\n        setShakeAnimation(true);\r\n        setShowNewImage(true);\r\n        \r\n        setTimeout(() => setShakeAnimation(false), 5000);\r\n      } catch (error) {\r\n        console.error('Error drawing daily image:', error);\r\n        alert(`Error: ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, 1500);\r\n  }, [todaysClaim, loading, userCollection, user, updateStreak, dailyDrawsRemaining, totalDrawsToday, saveDailyDrawProgress]);\r\n\r\n  // NEW: Check if user can draw\r\n  const canDraw = useCallback(() => {\r\n    const result = user?.username === 'admin' || dailyDrawsRemaining > 0;\r\n    console.log('canDraw called:', { username: user?.username, dailyDrawsRemaining, result });\r\n    return result;\r\n  }, [user, dailyDrawsRemaining]);\r\n\r\n  // NEW: Get dynamic button text\r\n  const getDrawButtonText = useCallback(() => {\r\n    if (user?.username === 'admin') {\r\n      return '🎯 Tirer une Image (Illimité)';\r\n    }\r\n    \r\n    if (dailyDrawsRemaining === 0) {\r\n      return '⏰ Plus de tirages';\r\n    }\r\n    \r\n    return `🎯 Tirer (${dailyDrawsRemaining}/${MAX_DRAWS_PER_DAY})`;\r\n  }, [user, dailyDrawsRemaining]);\r\n\r\n  // NEW: Get time until reset\r\n  const getTimeUntilReset = useCallback(() => {\r\n    if (!drawsResetTime) return null;\r\n    \r\n    const now = new Date();\r\n    const diff = drawsResetTime - now;\r\n    \r\n    if (diff <= 0) return null;\r\n    \r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    return { hours, minutes };\r\n  }, [drawsResetTime]);\r\n\r\n  return {\r\n    // Existing exports\r\n    user,\r\n    currentView,\r\n    setCurrentView,\r\n    userCollection,\r\n    todaysClaim,\r\n    showNewImage,\r\n    setShowNewImage,\r\n    todaysImage,\r\n    loading,\r\n    selectedImage,\r\n    setSelectedImage,\r\n    collectionView,\r\n    setCollectionView,\r\n    shakeAnimation,\r\n    setShakeAnimation,\r\n    isFullscreen,\r\n    setIsFullscreen,\r\n    imageDatabase,\r\n    login,\r\n    logout,\r\n    drawDailyImage,\r\n    getStreakCount,\r\n    \r\n    // NEW: 3-draws-per-day exports\r\n    dailyDrawsRemaining,\r\n    totalDrawsToday,\r\n    drawsResetTime,\r\n    canDraw,\r\n    getDrawButtonText,\r\n    getTimeUntilReset,\r\n    MAX_DRAWS_PER_DAY\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}