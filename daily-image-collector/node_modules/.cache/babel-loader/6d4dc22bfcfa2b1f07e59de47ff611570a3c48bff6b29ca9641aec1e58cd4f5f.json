{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSigningKey = void 0;\nconst constants_1 = require(\"../constants\");\nconst dataHashHelpers_1 = require(\"./dataHashHelpers\");\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nconst getSigningKey = (secretAccessKey, date, region, service) => {\n  const key = `${constants_1.SIGNATURE_IDENTIFIER}${secretAccessKey}`;\n  const dateKey = (0, dataHashHelpers_1.getHashedData)(key, date);\n  const regionKey = (0, dataHashHelpers_1.getHashedData)(dateKey, region);\n  const serviceKey = (0, dataHashHelpers_1.getHashedData)(regionKey, service);\n  const signingKey = (0, dataHashHelpers_1.getHashedData)(serviceKey, constants_1.KEY_TYPE_IDENTIFIER);\n  return signingKey;\n};\nexports.getSigningKey = getSigningKey;","map":{"version":3,"names":["Object","defineProperty","exports","value","getSigningKey","constants_1","require","dataHashHelpers_1","secretAccessKey","date","region","service","key","SIGNATURE_IDENTIFIER","dateKey","getHashedData","regionKey","serviceKey","signingKey","KEY_TYPE_IDENTIFIER"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\signing\\signer\\signatureV4\\utils\\getSigningKey.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSigningKey = void 0;\nconst constants_1 = require(\"../constants\");\nconst dataHashHelpers_1 = require(\"./dataHashHelpers\");\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nconst getSigningKey = (secretAccessKey, date, region, service) => {\n    const key = `${constants_1.SIGNATURE_IDENTIFIER}${secretAccessKey}`;\n    const dateKey = (0, dataHashHelpers_1.getHashedData)(key, date);\n    const regionKey = (0, dataHashHelpers_1.getHashedData)(dateKey, region);\n    const serviceKey = (0, dataHashHelpers_1.getHashedData)(regionKey, service);\n    const signingKey = (0, dataHashHelpers_1.getHashedData)(serviceKey, constants_1.KEY_TYPE_IDENTIFIER);\n    return signingKey;\n};\nexports.getSigningKey = getSigningKey;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,MAAM;AAC9B,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,aAAa,GAAGA,CAACI,eAAe,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,KAAK;EAC9D,MAAMC,GAAG,GAAG,GAAGP,WAAW,CAACQ,oBAAoB,GAAGL,eAAe,EAAE;EACnE,MAAMM,OAAO,GAAG,IAAIP,iBAAiB,CAACQ,aAAa,EAAEH,GAAG,EAAEH,IAAI,CAAC;EAC/D,MAAMO,SAAS,GAAG,IAAIT,iBAAiB,CAACQ,aAAa,EAAED,OAAO,EAAEJ,MAAM,CAAC;EACvE,MAAMO,UAAU,GAAG,IAAIV,iBAAiB,CAACQ,aAAa,EAAEC,SAAS,EAAEL,OAAO,CAAC;EAC3E,MAAMO,UAAU,GAAG,IAAIX,iBAAiB,CAACQ,aAAa,EAAEE,UAAU,EAAEZ,WAAW,CAACc,mBAAmB,CAAC;EACpG,OAAOD,UAAU;AACrB,CAAC;AACDhB,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}