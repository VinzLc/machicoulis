{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadOrCreateMultipartUpload = void 0;\nconst s3data_1 = require(\"../../../../utils/client/s3data\");\nconst utils_1 = require(\"../../../../../../utils\");\nconst constructContentDisposition_1 = require(\"../../../../utils/constructContentDisposition\");\nconst constants_1 = require(\"../../../../utils/constants\");\nconst crc32_1 = require(\"../../../../utils/crc32\");\nconst uploadCache_1 = require(\"./uploadCache\");\n/**\n * Load the in-progress multipart upload from local storage or async storage(RN) if it exists, or create a new multipart\n * upload.\n *\n * @internal\n */\nconst loadOrCreateMultipartUpload = async ({\n  s3Config,\n  data,\n  size,\n  contentType,\n  bucket,\n  accessLevel,\n  keyPrefix,\n  key,\n  contentDisposition,\n  contentEncoding,\n  metadata,\n  abortSignal,\n  checksumAlgorithm,\n  optionsHash,\n  resumableUploadsCache,\n  expectedBucketOwner\n}) => {\n  const finalKey = keyPrefix !== undefined ? keyPrefix + key : key;\n  let cachedUpload;\n  if (!resumableUploadsCache) {\n    utils_1.logger.debug('uploaded cache instance cannot be determined, skipping cache.');\n    cachedUpload = undefined;\n  } else {\n    const uploadCacheKey = (0, uploadCache_1.getUploadsCacheKey)({\n      size,\n      contentType,\n      file: data instanceof File ? data : undefined,\n      bucket,\n      accessLevel,\n      key,\n      optionsHash\n    });\n    const cachedUploadParts = await (0, uploadCache_1.findCachedUploadPartsAndEvictExpired)({\n      s3Config,\n      cacheKey: uploadCacheKey,\n      bucket,\n      finalKey,\n      resumableUploadsCache\n    });\n    cachedUpload = cachedUploadParts ? {\n      ...cachedUploadParts,\n      uploadCacheKey\n    } : undefined;\n  }\n  if (cachedUpload) {\n    return {\n      uploadId: cachedUpload.uploadId,\n      cachedParts: cachedUpload.parts,\n      finalCrc32: cachedUpload.finalCrc32\n    };\n  } else {\n    /**\n     * Note: This step reads the uploading file from beginning to end to calculate the CRC32 checksum of the entire\n     * object before sending the 1st byte over the wire. This is a performance bottleneck when uploading large files.\n     * The rationale to do this is S3 team wants to reduce the possibility of a file getting corrupted(on disk or in\n     * memory). So we calculate the full-object checksum as soon as possible in the upload flow.\n     *\n     * Going forward we should re-evaluate this decision with S3 team. The alternative is calling calculateContentCRC32()\n     * as we upload each part sequentially with seeds from already uploaded parts, ideally inside the data chunker.\n     */\n    const finalCrc32 = checksumAlgorithm === constants_1.CHECKSUM_ALGORITHM_CRC32 ? await (0, crc32_1.calculateContentCRC32)(data) : undefined;\n    const {\n      UploadId\n    } = await (0, s3data_1.createMultipartUpload)({\n      ...s3Config,\n      abortSignal\n    }, {\n      Bucket: bucket,\n      Key: finalKey,\n      ContentType: contentType,\n      ContentDisposition: (0, constructContentDisposition_1.constructContentDisposition)(contentDisposition),\n      ContentEncoding: contentEncoding,\n      Metadata: metadata,\n      ChecksumAlgorithm: finalCrc32 ? 'CRC32' : undefined,\n      ChecksumType: finalCrc32 ? 'FULL_OBJECT' : undefined,\n      ExpectedBucketOwner: expectedBucketOwner\n    });\n    if (resumableUploadsCache) {\n      const uploadCacheKey = (0, uploadCache_1.getUploadsCacheKey)({\n        size,\n        contentType,\n        file: data instanceof File ? data : undefined,\n        bucket,\n        accessLevel,\n        key,\n        optionsHash\n      });\n      await (0, uploadCache_1.cacheMultipartUpload)(resumableUploadsCache, uploadCacheKey, {\n        uploadId: UploadId,\n        bucket,\n        key,\n        finalCrc32,\n        fileName: data instanceof File ? data.name : ''\n      });\n    }\n    return {\n      uploadId: UploadId,\n      cachedParts: [],\n      finalCrc32\n    };\n  }\n};\nexports.loadOrCreateMultipartUpload = loadOrCreateMultipartUpload;","map":{"version":3,"names":["Object","defineProperty","exports","value","loadOrCreateMultipartUpload","s3data_1","require","utils_1","constructContentDisposition_1","constants_1","crc32_1","uploadCache_1","s3Config","data","size","contentType","bucket","accessLevel","keyPrefix","key","contentDisposition","contentEncoding","metadata","abortSignal","checksumAlgorithm","optionsHash","resumableUploadsCache","expectedBucketOwner","finalKey","undefined","cachedUpload","logger","debug","uploadCacheKey","getUploadsCacheKey","file","File","cachedUploadParts","findCachedUploadPartsAndEvictExpired","cacheKey","uploadId","cachedParts","parts","finalCrc32","CHECKSUM_ALGORITHM_CRC32","calculateContentCRC32","UploadId","createMultipartUpload","Bucket","Key","ContentType","ContentDisposition","constructContentDisposition","ContentEncoding","Metadata","ChecksumAlgorithm","ChecksumType","ExpectedBucketOwner","cacheMultipartUpload","fileName","name"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\uploadData\\multipart\\initialUpload.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadOrCreateMultipartUpload = void 0;\nconst s3data_1 = require(\"../../../../utils/client/s3data\");\nconst utils_1 = require(\"../../../../../../utils\");\nconst constructContentDisposition_1 = require(\"../../../../utils/constructContentDisposition\");\nconst constants_1 = require(\"../../../../utils/constants\");\nconst crc32_1 = require(\"../../../../utils/crc32\");\nconst uploadCache_1 = require(\"./uploadCache\");\n/**\n * Load the in-progress multipart upload from local storage or async storage(RN) if it exists, or create a new multipart\n * upload.\n *\n * @internal\n */\nconst loadOrCreateMultipartUpload = async ({ s3Config, data, size, contentType, bucket, accessLevel, keyPrefix, key, contentDisposition, contentEncoding, metadata, abortSignal, checksumAlgorithm, optionsHash, resumableUploadsCache, expectedBucketOwner, }) => {\n    const finalKey = keyPrefix !== undefined ? keyPrefix + key : key;\n    let cachedUpload;\n    if (!resumableUploadsCache) {\n        utils_1.logger.debug('uploaded cache instance cannot be determined, skipping cache.');\n        cachedUpload = undefined;\n    }\n    else {\n        const uploadCacheKey = (0, uploadCache_1.getUploadsCacheKey)({\n            size,\n            contentType,\n            file: data instanceof File ? data : undefined,\n            bucket,\n            accessLevel,\n            key,\n            optionsHash,\n        });\n        const cachedUploadParts = await (0, uploadCache_1.findCachedUploadPartsAndEvictExpired)({\n            s3Config,\n            cacheKey: uploadCacheKey,\n            bucket,\n            finalKey,\n            resumableUploadsCache,\n        });\n        cachedUpload = cachedUploadParts\n            ? { ...cachedUploadParts, uploadCacheKey }\n            : undefined;\n    }\n    if (cachedUpload) {\n        return {\n            uploadId: cachedUpload.uploadId,\n            cachedParts: cachedUpload.parts,\n            finalCrc32: cachedUpload.finalCrc32,\n        };\n    }\n    else {\n        /**\n         * Note: This step reads the uploading file from beginning to end to calculate the CRC32 checksum of the entire\n         * object before sending the 1st byte over the wire. This is a performance bottleneck when uploading large files.\n         * The rationale to do this is S3 team wants to reduce the possibility of a file getting corrupted(on disk or in\n         * memory). So we calculate the full-object checksum as soon as possible in the upload flow.\n         *\n         * Going forward we should re-evaluate this decision with S3 team. The alternative is calling calculateContentCRC32()\n         * as we upload each part sequentially with seeds from already uploaded parts, ideally inside the data chunker.\n         */\n        const finalCrc32 = checksumAlgorithm === constants_1.CHECKSUM_ALGORITHM_CRC32\n            ? await (0, crc32_1.calculateContentCRC32)(data)\n            : undefined;\n        const { UploadId } = await (0, s3data_1.createMultipartUpload)({\n            ...s3Config,\n            abortSignal,\n        }, {\n            Bucket: bucket,\n            Key: finalKey,\n            ContentType: contentType,\n            ContentDisposition: (0, constructContentDisposition_1.constructContentDisposition)(contentDisposition),\n            ContentEncoding: contentEncoding,\n            Metadata: metadata,\n            ChecksumAlgorithm: finalCrc32 ? 'CRC32' : undefined,\n            ChecksumType: finalCrc32 ? 'FULL_OBJECT' : undefined,\n            ExpectedBucketOwner: expectedBucketOwner,\n        });\n        if (resumableUploadsCache) {\n            const uploadCacheKey = (0, uploadCache_1.getUploadsCacheKey)({\n                size,\n                contentType,\n                file: data instanceof File ? data : undefined,\n                bucket,\n                accessLevel,\n                key,\n                optionsHash,\n            });\n            await (0, uploadCache_1.cacheMultipartUpload)(resumableUploadsCache, uploadCacheKey, {\n                uploadId: UploadId,\n                bucket,\n                key,\n                finalCrc32,\n                fileName: data instanceof File ? data.name : '',\n            });\n        }\n        return {\n            uploadId: UploadId,\n            cachedParts: [],\n            finalCrc32,\n        };\n    }\n};\nexports.loadOrCreateMultipartUpload = loadOrCreateMultipartUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}