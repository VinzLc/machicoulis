{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uploadPartExecutor = void 0;\nconst s3data_1 = require(\"../../../../utils/client/s3data\");\nconst utils_1 = require(\"../../../../../../utils\");\nconst crc32_1 = require(\"../../../../utils/crc32\");\nconst utils_2 = require(\"../../../../utils\");\nconst uploadPartExecutor = async ({\n  dataChunkerGenerator,\n  completedPartNumberSet,\n  s3Config,\n  abortSignal,\n  bucket,\n  finalKey,\n  uploadId,\n  onPartUploadCompletion,\n  onProgress,\n  isObjectLockEnabled,\n  useCRC32Checksum,\n  expectedBucketOwner\n}) => {\n  let transferredBytes = 0;\n  for (const {\n    data,\n    partNumber,\n    size\n  } of dataChunkerGenerator) {\n    if (abortSignal.aborted) {\n      utils_1.logger.debug('upload executor aborted.');\n      break;\n    }\n    if (completedPartNumberSet.has(partNumber)) {\n      utils_1.logger.debug(`part ${partNumber} already uploaded.`);\n      transferredBytes += size;\n      onProgress?.({\n        transferredBytes\n      });\n    } else {\n      // handle cancel error\n      let checksumCRC32;\n      if (useCRC32Checksum) {\n        checksumCRC32 = await (0, crc32_1.calculateContentCRC32)(data);\n      }\n      const contentMD5 =\n      // check if checksum exists. ex: should not exist in react native\n      !checksumCRC32 && isObjectLockEnabled ? await (0, utils_2.calculateContentMd5)(data) : undefined;\n      const {\n        ETag: eTag\n      } = await (0, s3data_1.uploadPart)({\n        ...s3Config,\n        abortSignal,\n        onUploadProgress: event => {\n          const {\n            transferredBytes: currentPartTransferredBytes\n          } = event;\n          onProgress?.({\n            transferredBytes: transferredBytes + currentPartTransferredBytes\n          });\n        }\n      }, {\n        Bucket: bucket,\n        Key: finalKey,\n        UploadId: uploadId,\n        Body: data,\n        PartNumber: partNumber,\n        ChecksumCRC32: checksumCRC32,\n        ContentMD5: contentMD5,\n        ExpectedBucketOwner: expectedBucketOwner\n      });\n      transferredBytes += size;\n      // eTag will always be set even the S3 model interface marks it as optional.\n      onPartUploadCompletion(partNumber, eTag, checksumCRC32);\n    }\n  }\n};\nexports.uploadPartExecutor = uploadPartExecutor;","map":{"version":3,"names":["Object","defineProperty","exports","value","uploadPartExecutor","s3data_1","require","utils_1","crc32_1","utils_2","dataChunkerGenerator","completedPartNumberSet","s3Config","abortSignal","bucket","finalKey","uploadId","onPartUploadCompletion","onProgress","isObjectLockEnabled","useCRC32Checksum","expectedBucketOwner","transferredBytes","data","partNumber","size","aborted","logger","debug","has","checksumCRC32","calculateContentCRC32","contentMD5","calculateContentMd5","undefined","ETag","eTag","uploadPart","onUploadProgress","event","currentPartTransferredBytes","Bucket","Key","UploadId","Body","PartNumber","ChecksumCRC32","ContentMD5","ExpectedBucketOwner"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\uploadData\\multipart\\uploadPartExecutor.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uploadPartExecutor = void 0;\nconst s3data_1 = require(\"../../../../utils/client/s3data\");\nconst utils_1 = require(\"../../../../../../utils\");\nconst crc32_1 = require(\"../../../../utils/crc32\");\nconst utils_2 = require(\"../../../../utils\");\nconst uploadPartExecutor = async ({ dataChunkerGenerator, completedPartNumberSet, s3Config, abortSignal, bucket, finalKey, uploadId, onPartUploadCompletion, onProgress, isObjectLockEnabled, useCRC32Checksum, expectedBucketOwner, }) => {\n    let transferredBytes = 0;\n    for (const { data, partNumber, size } of dataChunkerGenerator) {\n        if (abortSignal.aborted) {\n            utils_1.logger.debug('upload executor aborted.');\n            break;\n        }\n        if (completedPartNumberSet.has(partNumber)) {\n            utils_1.logger.debug(`part ${partNumber} already uploaded.`);\n            transferredBytes += size;\n            onProgress?.({\n                transferredBytes,\n            });\n        }\n        else {\n            // handle cancel error\n            let checksumCRC32;\n            if (useCRC32Checksum) {\n                checksumCRC32 = await (0, crc32_1.calculateContentCRC32)(data);\n            }\n            const contentMD5 = \n            // check if checksum exists. ex: should not exist in react native\n            !checksumCRC32 && isObjectLockEnabled\n                ? await (0, utils_2.calculateContentMd5)(data)\n                : undefined;\n            const { ETag: eTag } = await (0, s3data_1.uploadPart)({\n                ...s3Config,\n                abortSignal,\n                onUploadProgress: (event) => {\n                    const { transferredBytes: currentPartTransferredBytes } = event;\n                    onProgress?.({\n                        transferredBytes: transferredBytes + currentPartTransferredBytes,\n                    });\n                },\n            }, {\n                Bucket: bucket,\n                Key: finalKey,\n                UploadId: uploadId,\n                Body: data,\n                PartNumber: partNumber,\n                ChecksumCRC32: checksumCRC32,\n                ContentMD5: contentMD5,\n                ExpectedBucketOwner: expectedBucketOwner,\n            });\n            transferredBytes += size;\n            // eTag will always be set even the S3 model interface marks it as optional.\n            onPartUploadCompletion(partNumber, eTag, checksumCRC32);\n        }\n    }\n};\nexports.uploadPartExecutor = uploadPartExecutor;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,MAAM;AACnC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,iCAAiC,CAAC;AAC3D,MAAMC,OAAO,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAClD,MAAME,OAAO,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAClD,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMF,kBAAkB,GAAG,MAAAA,CAAO;EAAEM,oBAAoB;EAAEC,sBAAsB;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,sBAAsB;EAAEC,UAAU;EAAEC,mBAAmB;EAAEC,gBAAgB;EAAEC;AAAmB,CAAG,KAAK;EACvO,IAAIC,gBAAgB,GAAG,CAAC;EACxB,KAAK,MAAM;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAI,CAAE,IAAIf,oBAAoB,EAAE;IAC3D,IAAIG,WAAW,CAACa,OAAO,EAAE;MACrBnB,OAAO,CAACoB,MAAM,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAChD;IACZ;IACQ,IAAIjB,sBAAsB,CAACkB,GAAG,CAACL,UAAU,CAAC,EAAE;MACxCjB,OAAO,CAACoB,MAAM,CAACC,KAAK,CAAC,QAAQJ,UAAU,oBAAoB,CAAC;MAC5DF,gBAAgB,IAAIG,IAAI;MACxBP,UAAU,GAAG;QACTI;MAChB,CAAa,CAAC;IACd,OACa;MACb;MACY,IAAIQ,aAAa;MACjB,IAAIV,gBAAgB,EAAE;QAClBU,aAAa,GAAG,MAAM,IAAItB,OAAO,CAACuB,qBAAqB,EAAER,IAAI,CAAC;MAC9E;MACY,MAAMS,UAAU;MAC5B;MACY,CAACF,aAAa,IAAIX,mBAAA,GACZ,MAAM,IAAIV,OAAO,CAACwB,mBAAmB,EAAEV,IAAI,IAC3CW,SAAS;MACf,MAAM;QAAEC,IAAI,EAAEC;MAAI,CAAE,GAAG,MAAM,IAAI/B,QAAQ,CAACgC,UAAU,EAAE;QAClD,GAAGzB,QAAQ;QACXC,WAAW;QACXyB,gBAAgB,EAAGC,KAAK,IAAK;UACzB,MAAM;YAAEjB,gBAAgB,EAAEkB;UAA2B,CAAE,GAAGD,KAAK;UAC/DrB,UAAU,GAAG;YACTI,gBAAgB,EAAEA,gBAAgB,GAAGkB;UAC7D,CAAqB,CAAC;QACtB;MACA,CAAa,EAAE;QACCC,MAAM,EAAE3B,MAAM;QACd4B,GAAG,EAAE3B,QAAQ;QACb4B,QAAQ,EAAE3B,QAAQ;QAClB4B,IAAI,EAAErB,IAAI;QACVsB,UAAU,EAAErB,UAAU;QACtBsB,aAAa,EAAEhB,aAAa;QAC5BiB,UAAU,EAAEf,UAAU;QACtBgB,mBAAmB,EAAE3B;MACrC,CAAa,CAAC;MACFC,gBAAgB,IAAIG,IAAI;MACpC;MACYR,sBAAsB,CAACO,UAAU,EAAEY,IAAI,EAAEN,aAAa,CAAC;IACnE;EACA;AACA,CAAC;AACD5B,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}