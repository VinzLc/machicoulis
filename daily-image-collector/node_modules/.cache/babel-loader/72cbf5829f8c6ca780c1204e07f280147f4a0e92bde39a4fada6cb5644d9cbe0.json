{"ast":null,"code":"import { jitteredBackoff, getRetryDecider } from '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../errors/validation.mjs';\nimport { parseRestApiServiceError } from '../../utils/serviceError.mjs';\nimport { logger } from '../../utils/logger.mjs';\nimport { parseSigningInfo } from '../../utils/parseSigningInfo.mjs';\nimport { resolveHeaders } from '../../utils/resolveHeaders.mjs';\nimport { authenticatedHandler } from './baseHandlers/authenticatedHandler.mjs';\nimport { unauthenticatedHandler } from './baseHandlers/unauthenticatedHandler.mjs';\n\n/**\n * Make REST API call with best-effort IAM auth.\n * @param amplify Amplify instance to to resolve credentials and tokens. Should use different instance in client-side\n *   and SSR\n * @param options Options accepted from public API options when calling the handlers.\n * @param signingServiceInfo Internal-only options enable IAM auth as well as to to overwrite the IAM signing service\n *   and region. If specified, and NONE of API Key header or Auth header is present, IAM auth will be used.\n * @param iamAuthApplicable Callback function that is used to determine if IAM Auth should be used or not.\n *\n * @internal\n */\nconst transferHandler = async (amplify, options, iamAuthApplicable, signingServiceInfo) => {\n  const {\n    url,\n    method,\n    headers,\n    body,\n    withCredentials,\n    abortSignal,\n    retryStrategy\n  } = options;\n  const resolvedBody = body ? body instanceof FormData ? body : JSON.stringify(body ?? '') : undefined;\n  const resolvedHeaders = resolveHeaders(headers, body);\n  const request = {\n    url,\n    headers: resolvedHeaders,\n    method,\n    body: resolvedBody\n  };\n  const baseOptions = {\n    retryDecider: getRetryDeciderFromStrategy(retryStrategy ?? amplify?.libraryOptions?.API?.REST?.retryStrategy),\n    computeDelay: jitteredBackoff,\n    withCrossDomainCredentials: withCredentials,\n    abortSignal\n  };\n  const isIamAuthApplicable = iamAuthApplicable(request, signingServiceInfo);\n  let response;\n  const credentials = await resolveCredentials(amplify);\n  if (isIamAuthApplicable && credentials) {\n    const signingInfoFromUrl = parseSigningInfo(url);\n    const signingService = signingServiceInfo?.service ?? signingInfoFromUrl.service;\n    const signingRegion = signingServiceInfo?.region ?? signingInfoFromUrl.region;\n    response = await authenticatedHandler(request, {\n      ...baseOptions,\n      credentials,\n      region: signingRegion,\n      service: signingService\n    });\n  } else {\n    response = await unauthenticatedHandler(request, {\n      ...baseOptions\n    });\n  }\n  // Clean-up un-modeled properties from response.\n  return {\n    statusCode: response.statusCode,\n    headers: response.headers,\n    body: response.body\n  };\n};\nconst getRetryDeciderFromStrategy = retryStrategy => {\n  const strategy = retryStrategy?.strategy;\n  if (strategy === 'no-retry') {\n    return () => Promise.resolve({\n      retryable: false\n    });\n  }\n  return getRetryDecider(parseRestApiServiceError);\n};\nconst resolveCredentials = async amplify => {\n  try {\n    const {\n      credentials\n    } = await amplify.Auth.fetchAuthSession();\n    if (credentials) {\n      return credentials;\n    }\n  } catch (e) {\n    logger.debug('No credentials available, the request will be unsigned.');\n  }\n  return null;\n};\nexport { transferHandler };","map":{"version":3,"names":["transferHandler","amplify","options","iamAuthApplicable","signingServiceInfo","url","method","headers","body","withCredentials","abortSignal","retryStrategy","resolvedBody","FormData","JSON","stringify","undefined","resolvedHeaders","resolveHeaders","request","baseOptions","retryDecider","getRetryDeciderFromStrategy","libraryOptions","API","REST","computeDelay","jitteredBackoff","withCrossDomainCredentials","isIamAuthApplicable","response","credentials","resolveCredentials","signingInfoFromUrl","parseSigningInfo","signingService","service","signingRegion","region","authenticatedHandler","unauthenticatedHandler","statusCode","strategy","Promise","resolve","retryable","getRetryDecider","parseRestApiServiceError","Auth","fetchAuthSession","e","logger","debug"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\api-rest\\src\\apis\\common\\transferHandler.ts"],"sourcesContent":["import { getRetryDecider, jitteredBackoff, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { logger, parseRestApiServiceError, parseSigningInfo, } from '../../utils';\nimport { resolveHeaders } from '../../utils/resolveHeaders';\nimport { authenticatedHandler } from './baseHandlers/authenticatedHandler';\nimport { unauthenticatedHandler } from './baseHandlers/unauthenticatedHandler';\n/**\n * Make REST API call with best-effort IAM auth.\n * @param amplify Amplify instance to to resolve credentials and tokens. Should use different instance in client-side\n *   and SSR\n * @param options Options accepted from public API options when calling the handlers.\n * @param signingServiceInfo Internal-only options enable IAM auth as well as to to overwrite the IAM signing service\n *   and region. If specified, and NONE of API Key header or Auth header is present, IAM auth will be used.\n * @param iamAuthApplicable Callback function that is used to determine if IAM Auth should be used or not.\n *\n * @internal\n */\nexport const transferHandler = async (amplify, options, iamAuthApplicable, signingServiceInfo) => {\n    const { url, method, headers, body, withCredentials, abortSignal, retryStrategy, } = options;\n    const resolvedBody = body\n        ? body instanceof FormData\n            ? body\n            : JSON.stringify(body ?? '')\n        : undefined;\n    const resolvedHeaders = resolveHeaders(headers, body);\n    const request = {\n        url,\n        headers: resolvedHeaders,\n        method,\n        body: resolvedBody,\n    };\n    const baseOptions = {\n        retryDecider: getRetryDeciderFromStrategy(retryStrategy ?? amplify?.libraryOptions?.API?.REST?.retryStrategy),\n        computeDelay: jitteredBackoff,\n        withCrossDomainCredentials: withCredentials,\n        abortSignal,\n    };\n    const isIamAuthApplicable = iamAuthApplicable(request, signingServiceInfo);\n    let response;\n    const credentials = await resolveCredentials(amplify);\n    if (isIamAuthApplicable && credentials) {\n        const signingInfoFromUrl = parseSigningInfo(url);\n        const signingService = signingServiceInfo?.service ?? signingInfoFromUrl.service;\n        const signingRegion = signingServiceInfo?.region ?? signingInfoFromUrl.region;\n        response = await authenticatedHandler(request, {\n            ...baseOptions,\n            credentials,\n            region: signingRegion,\n            service: signingService,\n        });\n    }\n    else {\n        response = await unauthenticatedHandler(request, {\n            ...baseOptions,\n        });\n    }\n    // Clean-up un-modeled properties from response.\n    return {\n        statusCode: response.statusCode,\n        headers: response.headers,\n        body: response.body,\n    };\n};\nconst getRetryDeciderFromStrategy = (retryStrategy) => {\n    const strategy = retryStrategy?.strategy;\n    if (strategy === 'no-retry') {\n        return () => Promise.resolve({ retryable: false });\n    }\n    return getRetryDecider(parseRestApiServiceError);\n};\nconst resolveCredentials = async (amplify) => {\n    try {\n        const { credentials } = await amplify.Auth.fetchAuthSession();\n        if (credentials) {\n            return credentials;\n        }\n    }\n    catch (e) {\n        logger.debug('No credentials available, the request will be unsigned.');\n    }\n    return null;\n};\n"],"mappings":";;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,kBAAkB,KAAK;EAC9F,MAAM;IAAEC,GAAG;IAAEC,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,eAAe;IAAEC,WAAW;IAAEC;EAAa,CAAG,GAAGT,OAAO;EAC5F,MAAMU,YAAY,GAAGJ,IAAA,GACfA,IAAI,YAAYK,QAAA,GACZL,IAAA,GACAM,IAAI,CAACC,SAAS,CAACP,IAAI,IAAI,EAAE,IAC7BQ,SAAS;EACf,MAAMC,eAAe,GAAGC,cAAc,CAACX,OAAO,EAAEC,IAAI,CAAC;EACrD,MAAMW,OAAO,GAAG;IACZd,GAAG;IACHE,OAAO,EAAEU,eAAe;IACxBX,MAAM;IACNE,IAAI,EAAEI;EACd,CAAK;EACD,MAAMQ,WAAW,GAAG;IAChBC,YAAY,EAAEC,2BAA2B,CAACX,aAAa,IAAIV,OAAO,EAAEsB,cAAc,EAAEC,GAAG,EAAEC,IAAI,EAAEd,aAAa,CAAC;IAC7Ge,YAAY,EAAEC,eAAe;IAC7BC,0BAA0B,EAAEnB,eAAe;IAC3CC;EACR,CAAK;EACD,MAAMmB,mBAAmB,GAAG1B,iBAAiB,CAACgB,OAAO,EAAEf,kBAAkB,CAAC;EAC1E,IAAI0B,QAAQ;EACZ,MAAMC,WAAW,GAAG,MAAMC,kBAAkB,CAAC/B,OAAO,CAAC;EACrD,IAAI4B,mBAAmB,IAAIE,WAAW,EAAE;IACpC,MAAME,kBAAkB,GAAGC,gBAAgB,CAAC7B,GAAG,CAAC;IAChD,MAAM8B,cAAc,GAAG/B,kBAAkB,EAAEgC,OAAO,IAAIH,kBAAkB,CAACG,OAAO;IAChF,MAAMC,aAAa,GAAGjC,kBAAkB,EAAEkC,MAAM,IAAIL,kBAAkB,CAACK,MAAM;IAC7ER,QAAQ,GAAG,MAAMS,oBAAoB,CAACpB,OAAO,EAAE;MAC3C,GAAGC,WAAW;MACdW,WAAW;MACXO,MAAM,EAAED,aAAa;MACrBD,OAAO,EAAED;IACrB,CAAS,CAAC;EACV,OACS;IACDL,QAAQ,GAAG,MAAMU,sBAAsB,CAACrB,OAAO,EAAE;MAC7C,GAAGC;IACf,CAAS,CAAC;EACV;EACA;EACI,OAAO;IACHqB,UAAU,EAAEX,QAAQ,CAACW,UAAU;IAC/BlC,OAAO,EAAEuB,QAAQ,CAACvB,OAAO;IACzBC,IAAI,EAAEsB,QAAQ,CAACtB;EACvB,CAAK;AACL;AACA,MAAMc,2BAA2B,GAAIX,aAAa,IAAK;EACnD,MAAM+B,QAAQ,GAAG/B,aAAa,EAAE+B,QAAQ;EACxC,IAAIA,QAAQ,KAAK,UAAU,EAAE;IACzB,OAAO,MAAMC,OAAO,CAACC,OAAO,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAE,CAAC;EAC1D;EACI,OAAOC,eAAe,CAACC,wBAAwB,CAAC;AACpD,CAAC;AACD,MAAMf,kBAAkB,GAAG,MAAO/B,OAAO,IAAK;EAC1C,IAAI;IACA,MAAM;MAAE8B;IAAW,CAAE,GAAG,MAAM9B,OAAO,CAAC+C,IAAI,CAACC,gBAAgB,EAAE;IAC7D,IAAIlB,WAAW,EAAE;MACb,OAAOA,WAAW;IAC9B;EACA,EACI,OAAOmB,CAAC,EAAE;IACNC,MAAM,CAACC,KAAK,CAAC,yDAAyD,CAAC;EAC/E;EACI,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}