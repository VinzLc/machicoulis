{"ast":null,"code":"var _s = $RefreshSig$();\n// Key changes needed in your useGameLogic hook\n\nimport { useState, useEffect, useCallback } from 'react';\nexport const useGameLogic = () => {\n  _s();\n  // Existing state...\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\n  const [lastDrawDate, setLastDrawDate] = useState(null);\n\n  // Maximum draws per day\n  const MAX_DRAWS_PER_DAY = 3;\n\n  // Initialize daily draws system\n  useEffect(() => {\n    if (user) {\n      initializeDailyDraws();\n    }\n  }, [user]);\n  const initializeDailyDraws = () => {\n    const today = new Date().toDateString();\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\n    if (savedData) {\n      const {\n        date,\n        drawsUsed\n      } = JSON.parse(savedData);\n      if (date === today) {\n        // Same day - restore progress\n        setTotalDrawsToday(drawsUsed);\n        setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\n      } else {\n        // New day - reset draws\n        resetDailyDraws();\n      }\n    } else {\n      // First time - initialize\n      resetDailyDraws();\n    }\n\n    // Set reset time to next midnight\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    setDrawsResetTime(tomorrow);\n  };\n  const resetDailyDraws = () => {\n    setTotalDrawsToday(0);\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\n\n    // Save to localStorage\n    const today = new Date().toDateString();\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\n      date: today,\n      drawsUsed: 0\n    }));\n  };\n  const saveDailyDrawProgress = drawsUsed => {\n    const today = new Date().toDateString();\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\n      date: today,\n      drawsUsed: drawsUsed\n    }));\n  };\n\n  // Modified drawDailyImage function\n  const drawDailyImage = useCallback(async () => {\n    // Check if user has draws remaining\n    if (dailyDrawsRemaining <= 0) {\n      console.log('No draws remaining today');\n      return;\n    }\n    setLoading(true);\n    try {\n      // Your existing draw logic here...\n      const drawnImage = await performImageDraw(); // Your existing function\n\n      // Update draw counts\n      const newDrawsUsed = totalDrawsToday + 1;\n      const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\n      setTotalDrawsToday(newDrawsUsed);\n      setDailyDrawsRemaining(newDrawsRemaining);\n\n      // Save progress\n      saveDailyDrawProgress(newDrawsUsed);\n\n      // Update your existing state\n      setTodaysImage(drawnImage);\n      setShowNewImage(true);\n      setShakeAnimation(true);\n\n      // Add to collection\n      const newCard = {\n        ...drawnImage,\n        id: `${drawnImage.id}_${Date.now()}`,\n        dateObtained: new Date().toISOString()\n      };\n      setUserCollection(prev => [...prev, newCard]);\n    } catch (error) {\n      console.error('Error drawing image:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [dailyDrawsRemaining, totalDrawsToday, user]);\n\n  // Check for daily reset (call this periodically)\n  const checkDailyReset = useCallback(() => {\n    const now = new Date();\n    const today = now.toDateString();\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\n    if (savedData) {\n      const {\n        date\n      } = JSON.parse(savedData);\n\n      // If date changed, reset draws\n      if (date !== today) {\n        resetDailyDraws();\n      }\n    }\n  }, [user]);\n\n  // Check for reset every minute\n  useEffect(() => {\n    if (user) {\n      const interval = setInterval(checkDailyReset, 60000); // Check every minute\n      return () => clearInterval(interval);\n    }\n  }, [user, checkDailyReset]);\n\n  // For admin users, give unlimited draws\n  const canDraw = () => {\n    if (user && user.username === 'admin') {\n      return true; // Admin has unlimited draws\n    }\n    return dailyDrawsRemaining > 0;\n  };\n  const getDrawButtonText = () => {\n    if (user && user.username === 'admin') {\n      return '🎯 Draw Card (Unlimited)';\n    }\n    if (dailyDrawsRemaining === 0) {\n      return '⏰ No Draws Left Today';\n    }\n    return `🎯 Draw Card (${dailyDrawsRemaining} left)`;\n  };\n  const getTimeUntilReset = () => {\n    if (!drawsResetTime) return null;\n    const now = new Date();\n    const diff = drawsResetTime - now;\n    if (diff <= 0) return null;\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    return {\n      hours,\n      minutes\n    };\n  };\n  return {\n    // ... your existing returns\n    dailyDrawsRemaining,\n    totalDrawsToday,\n    drawsResetTime,\n    canDraw,\n    getDrawButtonText,\n    getTimeUntilReset,\n    MAX_DRAWS_PER_DAY\n  };\n};\n_s(useGameLogic, \"xX1C3+c4vsTken0CJQUV+0cS/b4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useGameLogic","_s","dailyDrawsRemaining","setDailyDrawsRemaining","totalDrawsToday","setTotalDrawsToday","drawsResetTime","setDrawsResetTime","lastDrawDate","setLastDrawDate","MAX_DRAWS_PER_DAY","user","initializeDailyDraws","today","Date","toDateString","savedData","localStorage","getItem","username","date","drawsUsed","JSON","parse","resetDailyDraws","tomorrow","setDate","getDate","setHours","setItem","stringify","saveDailyDrawProgress","drawDailyImage","console","log","setLoading","drawnImage","performImageDraw","newDrawsUsed","newDrawsRemaining","setTodaysImage","setShowNewImage","setShakeAnimation","newCard","id","now","dateObtained","toISOString","setUserCollection","prev","error","checkDailyReset","interval","setInterval","clearInterval","canDraw","getDrawButtonText","getTimeUntilReset","diff","hours","Math","floor","minutes"],"sources":["C:/Users/vinzl/workspace/machicoulis/daily-image-collector/src/hooks/useGameLogic.js"],"sourcesContent":["// Key changes needed in your useGameLogic hook\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameLogic = () => {\r\n  // Existing state...\r\n  const [dailyDrawsRemaining, setDailyDrawsRemaining] = useState(3);\r\n  const [totalDrawsToday, setTotalDrawsToday] = useState(0);\r\n  const [drawsResetTime, setDrawsResetTime] = useState(null);\r\n  const [lastDrawDate, setLastDrawDate] = useState(null);\r\n\r\n  // Maximum draws per day\r\n  const MAX_DRAWS_PER_DAY = 3;\r\n\r\n  // Initialize daily draws system\r\n  useEffect(() => {\r\n    if (user) {\r\n      initializeDailyDraws();\r\n    }\r\n  }, [user]);\r\n\r\n  const initializeDailyDraws = () => {\r\n    const today = new Date().toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    if (savedData) {\r\n      const { date, drawsUsed } = JSON.parse(savedData);\r\n      \r\n      if (date === today) {\r\n        // Same day - restore progress\r\n        setTotalDrawsToday(drawsUsed);\r\n        setDailyDrawsRemaining(MAX_DRAWS_PER_DAY - drawsUsed);\r\n      } else {\r\n        // New day - reset draws\r\n        resetDailyDraws();\r\n      }\r\n    } else {\r\n      // First time - initialize\r\n      resetDailyDraws();\r\n    }\r\n    \r\n    // Set reset time to next midnight\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n    setDrawsResetTime(tomorrow);\r\n  };\r\n\r\n  const resetDailyDraws = () => {\r\n    setTotalDrawsToday(0);\r\n    setDailyDrawsRemaining(MAX_DRAWS_PER_DAY);\r\n    \r\n    // Save to localStorage\r\n    const today = new Date().toDateString();\r\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\r\n      date: today,\r\n      drawsUsed: 0\r\n    }));\r\n  };\r\n\r\n  const saveDailyDrawProgress = (drawsUsed) => {\r\n    const today = new Date().toDateString();\r\n    localStorage.setItem(`dailyDraws_${user.username}`, JSON.stringify({\r\n      date: today,\r\n      drawsUsed: drawsUsed\r\n    }));\r\n  };\r\n\r\n  // Modified drawDailyImage function\r\n  const drawDailyImage = useCallback(async () => {\r\n    // Check if user has draws remaining\r\n    if (dailyDrawsRemaining <= 0) {\r\n      console.log('No draws remaining today');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Your existing draw logic here...\r\n      const drawnImage = await performImageDraw(); // Your existing function\r\n      \r\n      // Update draw counts\r\n      const newDrawsUsed = totalDrawsToday + 1;\r\n      const newDrawsRemaining = MAX_DRAWS_PER_DAY - newDrawsUsed;\r\n      \r\n      setTotalDrawsToday(newDrawsUsed);\r\n      setDailyDrawsRemaining(newDrawsRemaining);\r\n      \r\n      // Save progress\r\n      saveDailyDrawProgress(newDrawsUsed);\r\n      \r\n      // Update your existing state\r\n      setTodaysImage(drawnImage);\r\n      setShowNewImage(true);\r\n      setShakeAnimation(true);\r\n      \r\n      // Add to collection\r\n      const newCard = {\r\n        ...drawnImage,\r\n        id: `${drawnImage.id}_${Date.now()}`,\r\n        dateObtained: new Date().toISOString()\r\n      };\r\n      \r\n      setUserCollection(prev => [...prev, newCard]);\r\n      \r\n    } catch (error) {\r\n      console.error('Error drawing image:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dailyDrawsRemaining, totalDrawsToday, user]);\r\n\r\n  // Check for daily reset (call this periodically)\r\n  const checkDailyReset = useCallback(() => {\r\n    const now = new Date();\r\n    const today = now.toDateString();\r\n    const savedData = localStorage.getItem(`dailyDraws_${user.username}`);\r\n    \r\n    if (savedData) {\r\n      const { date } = JSON.parse(savedData);\r\n      \r\n      // If date changed, reset draws\r\n      if (date !== today) {\r\n        resetDailyDraws();\r\n      }\r\n    }\r\n  }, [user]);\r\n\r\n  // Check for reset every minute\r\n  useEffect(() => {\r\n    if (user) {\r\n      const interval = setInterval(checkDailyReset, 60000); // Check every minute\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user, checkDailyReset]);\r\n\r\n  // For admin users, give unlimited draws\r\n  const canDraw = () => {\r\n    if (user && user.username === 'admin') {\r\n      return true; // Admin has unlimited draws\r\n    }\r\n    return dailyDrawsRemaining > 0;\r\n  };\r\n\r\n  const getDrawButtonText = () => {\r\n    if (user && user.username === 'admin') {\r\n      return '🎯 Draw Card (Unlimited)';\r\n    }\r\n    \r\n    if (dailyDrawsRemaining === 0) {\r\n      return '⏰ No Draws Left Today';\r\n    }\r\n    \r\n    return `🎯 Draw Card (${dailyDrawsRemaining} left)`;\r\n  };\r\n\r\n  const getTimeUntilReset = () => {\r\n    if (!drawsResetTime) return null;\r\n    \r\n    const now = new Date();\r\n    const diff = drawsResetTime - now;\r\n    \r\n    if (diff <= 0) return null;\r\n    \r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    \r\n    return { hours, minutes };\r\n  };\r\n\r\n  return {\r\n    // ... your existing returns\r\n    dailyDrawsRemaining,\r\n    totalDrawsToday,\r\n    drawsResetTime,\r\n    canDraw,\r\n    getDrawButtonText,\r\n    getTimeUntilReset,\r\n    MAX_DRAWS_PER_DAY\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}