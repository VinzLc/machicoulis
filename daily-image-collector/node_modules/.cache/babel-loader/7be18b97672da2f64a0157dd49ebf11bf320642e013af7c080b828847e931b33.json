{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.record = void 0;\nconst amplifyUuid_1 = require(\"../../../utils/amplifyUuid\");\nconst utils_1 = require(\"../utils\");\nconst sessionListener_1 = require(\"../../../utils/sessionListener\");\nconst constants_1 = require(\"../utils/constants\");\nconst getEventBuffer_1 = require(\"../utils/getEventBuffer\");\nlet session;\n/**\n * @internal\n */\nconst record = async ({\n  appId,\n  category,\n  channelType,\n  credentials,\n  event,\n  identityId,\n  region,\n  userAgentValue,\n  bufferSize,\n  flushInterval,\n  flushSize,\n  resendLimit\n}) => {\n  let eventSession = session;\n  const currentTime = new Date();\n  const timestampISOString = currentTime.toISOString();\n  const eventId = (0, amplifyUuid_1.amplifyUuid)();\n  // Prepare event buffer if required\n  const buffer = (0, getEventBuffer_1.getEventBuffer)({\n    appId,\n    region,\n    credentials,\n    bufferSize: bufferSize ?? constants_1.BUFFER_SIZE,\n    flushInterval: flushInterval ?? constants_1.FLUSH_INTERVAL,\n    flushSize: flushSize ?? constants_1.FLUSH_SIZE,\n    resendLimit: resendLimit ?? constants_1.RESEND_LIMIT,\n    identityId,\n    userAgentValue\n  });\n  const endpointId = await (0, utils_1.resolveEndpointId)({\n    appId,\n    category,\n    channelType,\n    credentials,\n    identityId,\n    region,\n    userAgentValue\n  });\n  // Generate session if required\n  if (!eventSession || event.name === sessionListener_1.SESSION_START_EVENT) {\n    const sessionId = (0, amplifyUuid_1.amplifyUuid)();\n    session = {\n      Id: sessionId,\n      StartTimestamp: timestampISOString\n    };\n    eventSession = session;\n  }\n  // Terminate session when required\n  if (session && event.name === sessionListener_1.SESSION_STOP_EVENT) {\n    eventSession = {\n      ...session,\n      StopTimestamp: timestampISOString,\n      Duration: currentTime.getTime() - new Date(session.StartTimestamp).getTime()\n    };\n    session = undefined;\n  }\n  // Push event to buffer\n  buffer.push({\n    eventId,\n    endpointId,\n    event,\n    session: eventSession,\n    timestamp: timestampISOString,\n    resendLimit: resendLimit ?? constants_1.RESEND_LIMIT\n  });\n};\nexports.record = record;","map":{"version":3,"names":["Object","defineProperty","exports","value","record","amplifyUuid_1","require","utils_1","sessionListener_1","constants_1","getEventBuffer_1","session","appId","category","channelType","credentials","event","identityId","region","userAgentValue","bufferSize","flushInterval","flushSize","resendLimit","eventSession","currentTime","Date","timestampISOString","toISOString","eventId","amplifyUuid","buffer","getEventBuffer","BUFFER_SIZE","FLUSH_INTERVAL","FLUSH_SIZE","RESEND_LIMIT","endpointId","resolveEndpointId","name","SESSION_START_EVENT","sessionId","Id","StartTimestamp","SESSION_STOP_EVENT","StopTimestamp","Duration","getTime","undefined","push","timestamp"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\providers\\pinpoint\\apis\\record.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.record = void 0;\nconst amplifyUuid_1 = require(\"../../../utils/amplifyUuid\");\nconst utils_1 = require(\"../utils\");\nconst sessionListener_1 = require(\"../../../utils/sessionListener\");\nconst constants_1 = require(\"../utils/constants\");\nconst getEventBuffer_1 = require(\"../utils/getEventBuffer\");\nlet session;\n/**\n * @internal\n */\nconst record = async ({ appId, category, channelType, credentials, event, identityId, region, userAgentValue, bufferSize, flushInterval, flushSize, resendLimit, }) => {\n    let eventSession = session;\n    const currentTime = new Date();\n    const timestampISOString = currentTime.toISOString();\n    const eventId = (0, amplifyUuid_1.amplifyUuid)();\n    // Prepare event buffer if required\n    const buffer = (0, getEventBuffer_1.getEventBuffer)({\n        appId,\n        region,\n        credentials,\n        bufferSize: bufferSize ?? constants_1.BUFFER_SIZE,\n        flushInterval: flushInterval ?? constants_1.FLUSH_INTERVAL,\n        flushSize: flushSize ?? constants_1.FLUSH_SIZE,\n        resendLimit: resendLimit ?? constants_1.RESEND_LIMIT,\n        identityId,\n        userAgentValue,\n    });\n    const endpointId = await (0, utils_1.resolveEndpointId)({\n        appId,\n        category,\n        channelType,\n        credentials,\n        identityId,\n        region,\n        userAgentValue,\n    });\n    // Generate session if required\n    if (!eventSession || event.name === sessionListener_1.SESSION_START_EVENT) {\n        const sessionId = (0, amplifyUuid_1.amplifyUuid)();\n        session = {\n            Id: sessionId,\n            StartTimestamp: timestampISOString,\n        };\n        eventSession = session;\n    }\n    // Terminate session when required\n    if (session && event.name === sessionListener_1.SESSION_STOP_EVENT) {\n        eventSession = {\n            ...session,\n            StopTimestamp: timestampISOString,\n            Duration: currentTime.getTime() - new Date(session.StartTimestamp).getTime(),\n        };\n        session = undefined;\n    }\n    // Push event to buffer\n    buffer.push({\n        eventId,\n        endpointId,\n        event,\n        session: eventSession,\n        timestamp: timestampISOString,\n        resendLimit: resendLimit ?? constants_1.RESEND_LIMIT,\n    });\n};\nexports.record = record;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,MAAM;AACvB,MAAMC,aAAa,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC3D,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,iBAAiB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACnE,MAAMG,WAAW,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAC3D,IAAIK,OAAO;AACX;AACA;AACA;AACA,MAAMP,MAAM,GAAG,MAAAA,CAAO;EAAEQ,KAAK;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,WAAW;EAAEC,KAAK;EAAEC,UAAU;EAAEC,MAAM;EAAEC,cAAc;EAAEC,UAAU;EAAEC,aAAa;EAAEC,SAAS;EAAEC;AAAW,CAAG,KAAK;EACnK,IAAIC,YAAY,GAAGb,OAAO;EAC1B,MAAMc,WAAW,GAAG,IAAIC,IAAI,EAAE;EAC9B,MAAMC,kBAAkB,GAAGF,WAAW,CAACG,WAAW,EAAE;EACpD,MAAMC,OAAO,GAAG,IAAIxB,aAAa,CAACyB,WAAW,GAAG;EACpD;EACI,MAAMC,MAAM,GAAG,IAAIrB,gBAAgB,CAACsB,cAAc,EAAE;IAChDpB,KAAK;IACLM,MAAM;IACNH,WAAW;IACXK,UAAU,EAAEA,UAAU,IAAIX,WAAW,CAACwB,WAAW;IACjDZ,aAAa,EAAEA,aAAa,IAAIZ,WAAW,CAACyB,cAAc;IAC1DZ,SAAS,EAAEA,SAAS,IAAIb,WAAW,CAAC0B,UAAU;IAC9CZ,WAAW,EAAEA,WAAW,IAAId,WAAW,CAAC2B,YAAY;IACpDnB,UAAU;IACVE;EACR,CAAK,CAAC;EACF,MAAMkB,UAAU,GAAG,MAAM,IAAI9B,OAAO,CAAC+B,iBAAiB,EAAE;IACpD1B,KAAK;IACLC,QAAQ;IACRC,WAAW;IACXC,WAAW;IACXE,UAAU;IACVC,MAAM;IACNC;EACR,CAAK,CAAC;EACN;EACI,IAAI,CAACK,YAAY,IAAIR,KAAK,CAACuB,IAAI,KAAK/B,iBAAiB,CAACgC,mBAAmB,EAAE;IACvE,MAAMC,SAAS,GAAG,IAAIpC,aAAa,CAACyB,WAAW,GAAG;IAClDnB,OAAO,GAAG;MACN+B,EAAE,EAAED,SAAS;MACbE,cAAc,EAAEhB;IAC5B,CAAS;IACDH,YAAY,GAAGb,OAAO;EAC9B;EACA;EACI,IAAIA,OAAO,IAAIK,KAAK,CAACuB,IAAI,KAAK/B,iBAAiB,CAACoC,kBAAkB,EAAE;IAChEpB,YAAY,GAAG;MACX,GAAGb,OAAO;MACVkC,aAAa,EAAElB,kBAAkB;MACjCmB,QAAQ,EAAErB,WAAW,CAACsB,OAAO,EAAE,GAAG,IAAIrB,IAAI,CAACf,OAAO,CAACgC,cAAc,CAAC,CAACI,OAAO;IACtF,CAAS;IACDpC,OAAO,GAAGqC,SAAS;EAC3B;EACA;EACIjB,MAAM,CAACkB,IAAI,CAAC;IACRpB,OAAO;IACPQ,UAAU;IACVrB,KAAK;IACLL,OAAO,EAAEa,YAAY;IACrB0B,SAAS,EAAEvB,kBAAkB;IAC7BJ,WAAW,EAAEA,WAAW,IAAId,WAAW,CAAC2B;EAChD,CAAK,CAAC;AACN,CAAC;AACDlC,OAAO,CAACE,MAAM,GAAGA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}