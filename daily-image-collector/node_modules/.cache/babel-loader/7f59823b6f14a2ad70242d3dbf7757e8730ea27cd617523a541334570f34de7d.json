{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUrl = void 0;\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst validation_1 = require(\"../../../../errors/types/validation\");\nconst s3data_1 = require(\"../../utils/client/s3data\");\nconst utils_2 = require(\"../../utils\");\nconst assertValidationError_1 = require(\"../../../../errors/utils/assertValidationError\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constructContentDisposition_1 = require(\"../../utils/constructContentDisposition\");\nconst getProperties_1 = require(\"./getProperties\");\nconst getUrl = async (amplify, input) => {\n  const {\n    options: getUrlOptions\n  } = input;\n  const {\n    s3Config,\n    keyPrefix,\n    bucket,\n    identityId\n  } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, input);\n  const {\n    inputType,\n    objectKey\n  } = (0, utils_2.validateStorageOperationInput)(input, identityId);\n  (0, utils_2.validateBucketOwnerID)(getUrlOptions?.expectedBucketOwner);\n  const finalKey = inputType === constants_1.STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n  if (getUrlOptions?.validateObjectExistence) {\n    await (0, getProperties_1.getProperties)(amplify, input, utils_1.StorageAction.GetUrl);\n  }\n  let urlExpirationInSec = getUrlOptions?.expiresIn ?? constants_1.DEFAULT_PRESIGN_EXPIRATION;\n  const resolvedCredential = typeof s3Config.credentials === 'function' ? await s3Config.credentials() : s3Config.credentials;\n  const awsCredExpiration = resolvedCredential.expiration;\n  if (awsCredExpiration) {\n    const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n    urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n  }\n  const maxUrlExpirationInSec = constants_1.MAX_URL_EXPIRATION / 1000;\n  (0, assertValidationError_1.assertValidationError)(urlExpirationInSec <= maxUrlExpirationInSec, validation_1.StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n  // expiresAt is the minimum of credential expiration and url expiration\n  return {\n    url: await (0, s3data_1.getPresignedGetObjectUrl)({\n      ...s3Config,\n      credentials: resolvedCredential,\n      expiration: urlExpirationInSec\n    }, {\n      Bucket: bucket,\n      Key: finalKey,\n      ...(getUrlOptions?.contentDisposition && {\n        ResponseContentDisposition: (0, constructContentDisposition_1.constructContentDisposition)(getUrlOptions.contentDisposition)\n      }),\n      ...(getUrlOptions?.contentType && {\n        ResponseContentType: getUrlOptions.contentType\n      }),\n      ExpectedBucketOwner: getUrlOptions?.expectedBucketOwner\n    }),\n    expiresAt: new Date(Date.now() + urlExpirationInSec * 1000)\n  };\n};\nexports.getUrl = getUrl;","map":{"version":3,"names":["Object","defineProperty","exports","value","getUrl","utils_1","require","validation_1","s3data_1","utils_2","assertValidationError_1","constants_1","constructContentDisposition_1","getProperties_1","amplify","input","options","getUrlOptions","s3Config","keyPrefix","bucket","identityId","resolveS3ConfigAndInput","inputType","objectKey","validateStorageOperationInput","validateBucketOwnerID","expectedBucketOwner","finalKey","STORAGE_INPUT_KEY","validateObjectExistence","getProperties","StorageAction","GetUrl","urlExpirationInSec","expiresIn","DEFAULT_PRESIGN_EXPIRATION","resolvedCredential","credentials","awsCredExpiration","expiration","awsCredExpirationInSec","Math","floor","getTime","Date","now","min","maxUrlExpirationInSec","MAX_URL_EXPIRATION","assertValidationError","StorageValidationErrorCode","UrlExpirationMaxLimitExceed","url","getPresignedGetObjectUrl","Bucket","Key","contentDisposition","ResponseContentDisposition","constructContentDisposition","contentType","ResponseContentType","ExpectedBucketOwner","expiresAt"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\getUrl.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUrl = void 0;\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst validation_1 = require(\"../../../../errors/types/validation\");\nconst s3data_1 = require(\"../../utils/client/s3data\");\nconst utils_2 = require(\"../../utils\");\nconst assertValidationError_1 = require(\"../../../../errors/utils/assertValidationError\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constructContentDisposition_1 = require(\"../../utils/constructContentDisposition\");\nconst getProperties_1 = require(\"./getProperties\");\nconst getUrl = async (amplify, input) => {\n    const { options: getUrlOptions } = input;\n    const { s3Config, keyPrefix, bucket, identityId } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, input);\n    const { inputType, objectKey } = (0, utils_2.validateStorageOperationInput)(input, identityId);\n    (0, utils_2.validateBucketOwnerID)(getUrlOptions?.expectedBucketOwner);\n    const finalKey = inputType === constants_1.STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    if (getUrlOptions?.validateObjectExistence) {\n        await (0, getProperties_1.getProperties)(amplify, input, utils_1.StorageAction.GetUrl);\n    }\n    let urlExpirationInSec = getUrlOptions?.expiresIn ?? constants_1.DEFAULT_PRESIGN_EXPIRATION;\n    const resolvedCredential = typeof s3Config.credentials === 'function'\n        ? await s3Config.credentials()\n        : s3Config.credentials;\n    const awsCredExpiration = resolvedCredential.expiration;\n    if (awsCredExpiration) {\n        const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n        urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n    }\n    const maxUrlExpirationInSec = constants_1.MAX_URL_EXPIRATION / 1000;\n    (0, assertValidationError_1.assertValidationError)(urlExpirationInSec <= maxUrlExpirationInSec, validation_1.StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n    // expiresAt is the minimum of credential expiration and url expiration\n    return {\n        url: await (0, s3data_1.getPresignedGetObjectUrl)({\n            ...s3Config,\n            credentials: resolvedCredential,\n            expiration: urlExpirationInSec,\n        }, {\n            Bucket: bucket,\n            Key: finalKey,\n            ...(getUrlOptions?.contentDisposition && {\n                ResponseContentDisposition: (0, constructContentDisposition_1.constructContentDisposition)(getUrlOptions.contentDisposition),\n            }),\n            ...(getUrlOptions?.contentType && {\n                ResponseContentType: getUrlOptions.contentType,\n            }),\n            ExpectedBucketOwner: getUrlOptions?.expectedBucketOwner,\n        }),\n        expiresAt: new Date(Date.now() + urlExpirationInSec * 1000),\n    };\n};\nexports.getUrl = getUrl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}