{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { parseXmlBody } from '../utils/parsePayload.mjs';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError } from '../utils/deserializeHelpers.mjs';\nimport { assignStringVariables, serializeObjectConfigsToHeaders, validateS3RequiredParameter, serializePathnameObjectKey } from '../utils/serializeHelpers.mjs';\nimport { bothNilOrEqual } from '../utils/integrityHelpers.mjs';\nimport { IntegrityError } from '../../../../../errors/IntegrityError.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { defaultConfig, parseXmlError } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst copyObjectSerializer = async (input, endpoint) => {\n  const headers = {\n    ...(await serializeObjectConfigsToHeaders(input)),\n    ...assignStringVariables({\n      'x-amz-copy-source': input.CopySource,\n      'x-amz-metadata-directive': input.MetadataDirective,\n      'x-amz-copy-source-if-match': input.CopySourceIfMatch,\n      'x-amz-copy-source-if-unmodified-since': input.CopySourceIfUnmodifiedSince?.toUTCString(),\n      'x-amz-source-expected-bucket-owner': input.ExpectedSourceBucketOwner,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n    })\n  };\n  validateCopyObjectHeaders(input, headers);\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  url.search = new AmplifyUrlSearchParams({\n    'x-id': 'CopyObject'\n  }).toString();\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'PUT',\n    headers,\n    url\n  };\n};\nconst validateCopyObjectHeaders = (input, headers) => {\n  const validations = [headers['x-amz-copy-source'] === input.CopySource, bothNilOrEqual(input.MetadataDirective, headers['x-amz-metadata-directive']), bothNilOrEqual(input.CopySourceIfMatch, headers['x-amz-copy-source-if-match']), bothNilOrEqual(input.CopySourceIfUnmodifiedSince?.toUTCString(), headers['x-amz-copy-source-if-unmodified-since'])];\n  if (validations.some(validation => !validation)) {\n    throw new IntegrityError();\n  }\n};\nconst copyObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    await parseXmlBody(response);\n    return {\n      $metadata: parseMetadata(response)\n    };\n  }\n};\nconst copyObject = composeServiceApi(s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, {\n  ...defaultConfig,\n  responseType: 'text'\n});\nexport { copyObject, validateCopyObjectHeaders };","map":{"version":3,"names":["copyObjectSerializer","input","endpoint","headers","serializeObjectConfigsToHeaders","assignStringVariables","CopySource","MetadataDirective","CopySourceIfMatch","CopySourceIfUnmodifiedSince","toUTCString","ExpectedSourceBucketOwner","ExpectedBucketOwner","validateCopyObjectHeaders","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","AmplifyUrlSearchParams","validateObjectUrl","bucketName","Bucket","key","objectURL","method","validations","bothNilOrEqual","some","validation","IntegrityError","copyObjectDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","parseXmlBody","$metadata","parseMetadata","copyObject","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\copyObject.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, bothNilOrEqual, buildStorageServiceError, parseXmlBody, s3TransferHandler, serializeObjectConfigsToHeaders, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { IntegrityError } from '../../../../../errors/IntegrityError';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { defaultConfig, parseXmlError } from './base';\nconst copyObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await serializeObjectConfigsToHeaders(input)),\n        ...assignStringVariables({\n            'x-amz-copy-source': input.CopySource,\n            'x-amz-metadata-directive': input.MetadataDirective,\n            'x-amz-copy-source-if-match': input.CopySourceIfMatch,\n            'x-amz-copy-source-if-unmodified-since': input.CopySourceIfUnmodifiedSince?.toUTCString(),\n            'x-amz-source-expected-bucket-owner': input.ExpectedSourceBucketOwner,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n    };\n    validateCopyObjectHeaders(input, headers);\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    url.search = new AmplifyUrlSearchParams({\n        'x-id': 'CopyObject',\n    }).toString();\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n    };\n};\nexport const validateCopyObjectHeaders = (input, headers) => {\n    const validations = [\n        headers['x-amz-copy-source'] === input.CopySource,\n        bothNilOrEqual(input.MetadataDirective, headers['x-amz-metadata-directive']),\n        bothNilOrEqual(input.CopySourceIfMatch, headers['x-amz-copy-source-if-match']),\n        bothNilOrEqual(input.CopySourceIfUnmodifiedSince?.toUTCString(), headers['x-amz-copy-source-if-unmodified-since']),\n    ];\n    if (validations.some(validation => !validation)) {\n        throw new IntegrityError();\n    }\n};\nconst copyObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        await parseXmlBody(response);\n        return {\n            $metadata: parseMetadata(response),\n        };\n    }\n};\nexport const copyObject = composeServiceApi(s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, { ...defaultConfig, responseType: 'text' });\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACpD,MAAMC,OAAO,GAAG;IACZ,IAAI,MAAMC,+BAA+B,CAACH,KAAK,CAAC,CAAC;IACjD,GAAGI,qBAAqB,CAAC;MACrB,mBAAmB,EAAEJ,KAAK,CAACK,UAAU;MACrC,0BAA0B,EAAEL,KAAK,CAACM,iBAAiB;MACnD,4BAA4B,EAAEN,KAAK,CAACO,iBAAiB;MACrD,uCAAuC,EAAEP,KAAK,CAACQ,2BAA2B,EAAEC,WAAW,EAAE;MACzF,oCAAoC,EAAET,KAAK,CAACU,yBAAyB;MACrE,6BAA6B,EAAEV,KAAK,CAACW;IACjD,CAAS;EACT,CAAK;EACDC,yBAAyB,CAACZ,KAAK,EAAEE,OAAO,CAAC;EACzC,MAAMW,GAAG,GAAG,IAAIC,UAAU,CAACb,QAAQ,CAACY,GAAG,CAACE,QAAQ,EAAE,CAAC;EACnDC,2BAA2B,CAAC,CAAC,CAAChB,KAAK,CAACiB,GAAG,EAAE,KAAK,CAAC;EAC/CJ,GAAG,CAACK,QAAQ,GAAGC,0BAA0B,CAACN,GAAG,EAAEb,KAAK,CAACiB,GAAG,CAAC;EACzDJ,GAAG,CAACO,MAAM,GAAG,IAAIC,sBAAsB,CAAC;IACpC,MAAM,EAAE;EAChB,CAAK,CAAC,CAACN,QAAQ,EAAE;EACbO,iBAAiB,CAAC;IACdC,UAAU,EAAEvB,KAAK,CAACwB,MAAM;IACxBC,GAAG,EAAEzB,KAAK,CAACiB,GAAG;IACdS,SAAS,EAAEb;EACnB,CAAK,CAAC;EACF,OAAO;IACHc,MAAM,EAAE,KAAK;IACbzB,OAAO;IACPW;EACR,CAAK;AACL,CAAC;AACW,MAACD,yBAAyB,GAAGA,CAACZ,KAAK,EAAEE,OAAO,KAAK;EACzD,MAAM0B,WAAW,GAAG,CAChB1B,OAAO,CAAC,mBAAmB,CAAC,KAAKF,KAAK,CAACK,UAAU,EACjDwB,cAAc,CAAC7B,KAAK,CAACM,iBAAiB,EAAEJ,OAAO,CAAC,0BAA0B,CAAC,CAAC,EAC5E2B,cAAc,CAAC7B,KAAK,CAACO,iBAAiB,EAAEL,OAAO,CAAC,4BAA4B,CAAC,CAAC,EAC9E2B,cAAc,CAAC7B,KAAK,CAACQ,2BAA2B,EAAEC,WAAW,EAAE,EAAEP,OAAO,CAAC,uCAAuC,CAAC,CAAC,CACrH;EACD,IAAI0B,WAAW,CAACE,IAAI,CAACC,UAAU,IAAI,CAACA,UAAU,CAAC,EAAE;IAC7C,MAAM,IAAIC,cAAc,EAAE;EAClC;AACA;AACA,MAAMC,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAMC,wBAAwB,CAAE,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAE;EACvE,OACS;IACD,MAAMI,YAAY,CAACJ,QAAQ,CAAC;IAC5B,OAAO;MACHK,SAAS,EAAEC,aAAa,CAACN,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACW,MAACO,UAAU,GAAGC,iBAAiB,CAACC,iBAAiB,EAAE5C,oBAAoB,EAAEkC,sBAAsB,EAAE;EAAE,GAAGW,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}