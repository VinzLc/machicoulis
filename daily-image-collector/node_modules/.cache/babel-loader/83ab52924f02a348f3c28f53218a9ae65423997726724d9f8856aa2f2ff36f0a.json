{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateContentCRC32 = void 0;\nconst tslib_1 = require(\"tslib\");\nconst crc_32_1 = tslib_1.__importDefault(require(\"crc-32\"));\nconst hexUtils_1 = require(\"./hexUtils\");\nconst readFile_1 = require(\"./readFile\");\nconst CHUNK_SIZE = 1024 * 1024; // 1MB chunks\n/**\n * Calculate the CRC32 checksum for given content and return base64 encoded checksum.\n */\nconst calculateContentCRC32 = async (content, seed = 0) => {\n  let internalSeed = seed;\n  if (content instanceof ArrayBuffer || ArrayBuffer.isView(content)) {\n    let uint8Array;\n    if (content instanceof ArrayBuffer) {\n      uint8Array = new Uint8Array(content);\n    } else {\n      uint8Array = new Uint8Array(content.buffer, content.byteOffset, content.byteLength);\n    }\n    let offset = 0;\n    while (offset < uint8Array.length) {\n      const end = Math.min(offset + CHUNK_SIZE, uint8Array.length);\n      const chunk = uint8Array.slice(offset, end);\n      internalSeed = crc_32_1.default.buf(chunk, internalSeed) >>> 0;\n      offset = end;\n    }\n  } else {\n    let blob;\n    if (content instanceof Blob) {\n      blob = content;\n    } else {\n      blob = new Blob([content]);\n    }\n    let offset = 0;\n    while (offset < blob.size) {\n      const end = Math.min(offset + CHUNK_SIZE, blob.size);\n      const chunk = blob.slice(offset, end);\n      const arrayBuffer = await (0, readFile_1.readFile)(chunk);\n      const uint8Array = new Uint8Array(arrayBuffer);\n      internalSeed = crc_32_1.default.buf(uint8Array, internalSeed) >>> 0;\n      offset = end;\n    }\n  }\n  const hex = internalSeed.toString(16).padStart(8, '0');\n  return (0, hexUtils_1.hexToBase64)(hex);\n};\nexports.calculateContentCRC32 = calculateContentCRC32;","map":{"version":3,"names":["Object","defineProperty","exports","value","calculateContentCRC32","tslib_1","require","crc_32_1","__importDefault","hexUtils_1","readFile_1","CHUNK_SIZE","content","seed","internalSeed","ArrayBuffer","isView","uint8Array","Uint8Array","buffer","byteOffset","byteLength","offset","length","end","Math","min","chunk","slice","default","buf","blob","Blob","size","arrayBuffer","readFile","hex","toString","padStart","hexToBase64"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\crc32.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateContentCRC32 = void 0;\nconst tslib_1 = require(\"tslib\");\nconst crc_32_1 = tslib_1.__importDefault(require(\"crc-32\"));\nconst hexUtils_1 = require(\"./hexUtils\");\nconst readFile_1 = require(\"./readFile\");\nconst CHUNK_SIZE = 1024 * 1024; // 1MB chunks\n/**\n * Calculate the CRC32 checksum for given content and return base64 encoded checksum.\n */\nconst calculateContentCRC32 = async (content, seed = 0) => {\n    let internalSeed = seed;\n    if (content instanceof ArrayBuffer || ArrayBuffer.isView(content)) {\n        let uint8Array;\n        if (content instanceof ArrayBuffer) {\n            uint8Array = new Uint8Array(content);\n        }\n        else {\n            uint8Array = new Uint8Array(content.buffer, content.byteOffset, content.byteLength);\n        }\n        let offset = 0;\n        while (offset < uint8Array.length) {\n            const end = Math.min(offset + CHUNK_SIZE, uint8Array.length);\n            const chunk = uint8Array.slice(offset, end);\n            internalSeed = crc_32_1.default.buf(chunk, internalSeed) >>> 0;\n            offset = end;\n        }\n    }\n    else {\n        let blob;\n        if (content instanceof Blob) {\n            blob = content;\n        }\n        else {\n            blob = new Blob([content]);\n        }\n        let offset = 0;\n        while (offset < blob.size) {\n            const end = Math.min(offset + CHUNK_SIZE, blob.size);\n            const chunk = blob.slice(offset, end);\n            const arrayBuffer = await (0, readFile_1.readFile)(chunk);\n            const uint8Array = new Uint8Array(arrayBuffer);\n            internalSeed = crc_32_1.default.buf(uint8Array, internalSeed) >>> 0;\n            offset = end;\n        }\n    }\n    const hex = internalSeed.toString(16).padStart(8, '0');\n    return (0, hexUtils_1.hexToBase64)(hex);\n};\nexports.calculateContentCRC32 = calculateContentCRC32;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,MAAM;AACtC,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,QAAQ,GAAGF,OAAO,CAACG,eAAe,CAACF,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC3D,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMI,UAAU,GAAGJ,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMK,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC;AAC/B;AACA;AACA;AACA,MAAMP,qBAAqB,GAAG,MAAAA,CAAOQ,OAAO,EAAEC,IAAI,GAAG,CAAC,KAAK;EACvD,IAAIC,YAAY,GAAGD,IAAI;EACvB,IAAID,OAAO,YAAYG,WAAW,IAAIA,WAAW,CAACC,MAAM,CAACJ,OAAO,CAAC,EAAE;IAC/D,IAAIK,UAAU;IACd,IAAIL,OAAO,YAAYG,WAAW,EAAE;MAChCE,UAAU,GAAG,IAAIC,UAAU,CAACN,OAAO,CAAC;IAChD,OACa;MACDK,UAAU,GAAG,IAAIC,UAAU,CAACN,OAAO,CAACO,MAAM,EAAEP,OAAO,CAACQ,UAAU,EAAER,OAAO,CAACS,UAAU,CAAC;IAC/F;IACQ,IAAIC,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGL,UAAU,CAACM,MAAM,EAAE;MAC/B,MAAMC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,GAAGX,UAAU,EAAEM,UAAU,CAACM,MAAM,CAAC;MAC5D,MAAMI,KAAK,GAAGV,UAAU,CAACW,KAAK,CAACN,MAAM,EAAEE,GAAG,CAAC;MAC3CV,YAAY,GAAGP,QAAQ,CAACsB,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEb,YAAY,CAAC,KAAK,CAAC;MAC9DQ,MAAM,GAAGE,GAAG;IACxB;EACA,OACS;IACD,IAAIO,IAAI;IACR,IAAInB,OAAO,YAAYoB,IAAI,EAAE;MACzBD,IAAI,GAAGnB,OAAO;IAC1B,OACa;MACDmB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACpB,OAAO,CAAC,CAAC;IACtC;IACQ,IAAIU,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGS,IAAI,CAACE,IAAI,EAAE;MACvB,MAAMT,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,GAAGX,UAAU,EAAEoB,IAAI,CAACE,IAAI,CAAC;MACpD,MAAMN,KAAK,GAAGI,IAAI,CAACH,KAAK,CAACN,MAAM,EAAEE,GAAG,CAAC;MACrC,MAAMU,WAAW,GAAG,MAAM,IAAIxB,UAAU,CAACyB,QAAQ,EAAER,KAAK,CAAC;MACzD,MAAMV,UAAU,GAAG,IAAIC,UAAU,CAACgB,WAAW,CAAC;MAC9CpB,YAAY,GAAGP,QAAQ,CAACsB,OAAO,CAACC,GAAG,CAACb,UAAU,EAAEH,YAAY,CAAC,KAAK,CAAC;MACnEQ,MAAM,GAAGE,GAAG;IACxB;EACA;EACI,MAAMY,GAAG,GAAGtB,YAAY,CAACuB,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACtD,OAAO,IAAI7B,UAAU,CAAC8B,WAAW,EAAEH,GAAG,CAAC;AAC3C,CAAC;AACDlC,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}