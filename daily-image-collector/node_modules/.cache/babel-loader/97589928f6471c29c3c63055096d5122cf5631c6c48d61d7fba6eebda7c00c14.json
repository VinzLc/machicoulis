{"ast":null,"code":"import { StorageAction } from '@aws-amplify/core/internals/utils';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport '../../../../errors/types/validation.mjs';\nimport { logger } from '../../../../utils/logger.mjs';\nimport { validateBucketOwnerID } from '../../utils/validateBucketOwnerID.mjs';\nimport { validateStorageOperationInput } from '../../utils/validateStorageOperationInput.mjs';\nimport { STORAGE_INPUT_KEY } from '../../utils/constants.mjs';\nimport '../../utils/client/s3data/base.mjs';\nimport '../../utils/client/s3data/getObject.mjs';\nimport '../../utils/client/s3data/listObjectsV2.mjs';\nimport '../../utils/client/s3data/putObject.mjs';\nimport '../../utils/client/s3data/createMultipartUpload.mjs';\nimport '../../utils/client/s3data/uploadPart.mjs';\nimport '../../utils/client/s3data/completeMultipartUpload.mjs';\nimport '../../utils/client/s3data/listParts.mjs';\nimport '../../utils/client/s3data/abortMultipartUpload.mjs';\nimport '../../utils/client/s3data/copyObject.mjs';\nimport '../../utils/client/s3data/headObject.mjs';\nimport { deleteObject } from '../../utils/client/s3data/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../utils/userAgent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst remove = async (amplify, input) => {\n  const {\n    s3Config,\n    keyPrefix,\n    bucket,\n    identityId\n  } = await resolveS3ConfigAndInput(amplify, input);\n  const {\n    inputType,\n    objectKey\n  } = validateStorageOperationInput(input, identityId);\n  validateBucketOwnerID(input.options?.expectedBucketOwner);\n  let finalKey;\n  if (inputType === STORAGE_INPUT_KEY) {\n    finalKey = `${keyPrefix}${objectKey}`;\n    logger.debug(`remove \"${objectKey}\" from \"${finalKey}\".`);\n  } else {\n    finalKey = objectKey;\n    logger.debug(`removing object in path \"${finalKey}\"`);\n  }\n  await deleteObject({\n    ...s3Config,\n    userAgentValue: getStorageUserAgentValue(StorageAction.Remove)\n  }, {\n    Bucket: bucket,\n    Key: finalKey,\n    ExpectedBucketOwner: input.options?.expectedBucketOwner\n  });\n  return inputType === STORAGE_INPUT_KEY ? {\n    key: objectKey\n  } : {\n    path: objectKey\n  };\n};\nexport { remove };","map":{"version":3,"names":["remove","amplify","input","s3Config","keyPrefix","bucket","identityId","resolveS3ConfigAndInput","inputType","objectKey","validateStorageOperationInput","validateBucketOwnerID","options","expectedBucketOwner","finalKey","STORAGE_INPUT_KEY","logger","debug","deleteObject","userAgentValue","getStorageUserAgentValue","StorageAction","Remove","Bucket","Key","ExpectedBucketOwner","key","path"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\remove.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../utils';\nimport { deleteObject } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { STORAGE_INPUT_KEY } from '../../utils/constants';\nexport const remove = async (amplify, input) => {\n    const { s3Config, keyPrefix, bucket, identityId } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInput(input, identityId);\n    validateBucketOwnerID(input.options?.expectedBucketOwner);\n    let finalKey;\n    if (inputType === STORAGE_INPUT_KEY) {\n        finalKey = `${keyPrefix}${objectKey}`;\n        logger.debug(`remove \"${objectKey}\" from \"${finalKey}\".`);\n    }\n    else {\n        finalKey = objectKey;\n        logger.debug(`removing object in path \"${finalKey}\"`);\n    }\n    await deleteObject({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.Remove),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        ExpectedBucketOwner: input.options?.expectedBucketOwner,\n    });\n    return inputType === STORAGE_INPUT_KEY\n        ? {\n            key: objectKey,\n        }\n        : {\n            path: objectKey,\n        };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOY,MAACA,MAAM,GAAG,MAAAA,CAAOC,OAAO,EAAEC,KAAK,KAAK;EAC5C,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,MAAM;IAAEC;EAAU,CAAE,GAAG,MAAMC,uBAAuB,CAACN,OAAO,EAAEC,KAAK,CAAC;EACjG,MAAM;IAAEM,SAAS;IAAEC;EAAS,CAAE,GAAGC,6BAA6B,CAACR,KAAK,EAAEI,UAAU,CAAC;EACjFK,qBAAqB,CAACT,KAAK,CAACU,OAAO,EAAEC,mBAAmB,CAAC;EACzD,IAAIC,QAAQ;EACZ,IAAIN,SAAS,KAAKO,iBAAiB,EAAE;IACjCD,QAAQ,GAAG,GAAGV,SAAS,GAAGK,SAAS,EAAE;IACrCO,MAAM,CAACC,KAAK,CAAC,WAAWR,SAAS,WAAWK,QAAQ,IAAI,CAAC;EACjE,OACS;IACDA,QAAQ,GAAGL,SAAS;IACpBO,MAAM,CAACC,KAAK,CAAC,4BAA4BH,QAAQ,GAAG,CAAC;EAC7D;EACI,MAAMI,YAAY,CAAC;IACf,GAAGf,QAAQ;IACXgB,cAAc,EAAEC,wBAAwB,CAACC,aAAa,CAACC,MAAM;EACrE,CAAK,EAAE;IACCC,MAAM,EAAElB,MAAM;IACdmB,GAAG,EAAEV,QAAQ;IACbW,mBAAmB,EAAEvB,KAAK,CAACU,OAAO,EAAEC;EAC5C,CAAK,CAAC;EACF,OAAOL,SAAS,KAAKO,iBAAA,GACf;IACEW,GAAG,EAAEjB;EACjB,IACU;IACEkB,IAAI,EAAElB;EAClB,CAAS;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}