{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.putObjectJob = void 0;\nconst core_1 = require(\"@aws-amplify/core\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst utils_2 = require(\"../../../utils\");\nconst s3data_1 = require(\"../../../utils/client/s3data\");\nconst userAgent_1 = require(\"../../../utils/userAgent\");\nconst constants_1 = require(\"../../../utils/constants\");\nconst crc32_1 = require(\"../../../utils/crc32\");\nconst constructContentDisposition_1 = require(\"../../../utils/constructContentDisposition\");\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nconst putObjectJob = (uploadDataInput, abortSignal, totalLength) => async () => {\n  const {\n    options: uploadDataOptions,\n    data\n  } = uploadDataInput;\n  const {\n    bucket,\n    keyPrefix,\n    s3Config,\n    isObjectLockEnabled,\n    identityId\n  } = await (0, utils_2.resolveS3ConfigAndInput)(core_1.Amplify, uploadDataInput);\n  const {\n    inputType,\n    objectKey\n  } = (0, utils_2.validateStorageOperationInput)(uploadDataInput, identityId);\n  (0, utils_2.validateBucketOwnerID)(uploadDataOptions?.expectedBucketOwner);\n  const finalKey = inputType === constants_1.STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n  const {\n    contentDisposition,\n    contentEncoding,\n    contentType = 'application/octet-stream',\n    preventOverwrite,\n    metadata,\n    checksumAlgorithm,\n    onProgress,\n    expectedBucketOwner\n  } = uploadDataOptions ?? {};\n  const checksumCRC32 = checksumAlgorithm === constants_1.CHECKSUM_ALGORITHM_CRC32 ? await (0, crc32_1.calculateContentCRC32)(data) : undefined;\n  const contentMD5 =\n  // check if checksum exists. ex: should not exist in react native\n  !checksumCRC32 && isObjectLockEnabled ? await (0, utils_2.calculateContentMd5)(data) : undefined;\n  const {\n    ETag: eTag,\n    VersionId: versionId\n  } = await (0, s3data_1.putObject)({\n    ...s3Config,\n    abortSignal,\n    onUploadProgress: onProgress,\n    userAgentValue: (0, userAgent_1.getStorageUserAgentValue)(utils_1.StorageAction.UploadData)\n  }, {\n    Bucket: bucket,\n    Key: finalKey,\n    Body: data,\n    ContentType: contentType,\n    ContentDisposition: (0, constructContentDisposition_1.constructContentDisposition)(contentDisposition),\n    ContentEncoding: contentEncoding,\n    Metadata: metadata,\n    ContentMD5: contentMD5,\n    ChecksumCRC32: checksumCRC32,\n    ExpectedBucketOwner: expectedBucketOwner,\n    IfNoneMatch: preventOverwrite ? '*' : undefined\n  });\n  const result = {\n    eTag,\n    versionId,\n    contentType,\n    metadata,\n    size: totalLength\n  };\n  return inputType === constants_1.STORAGE_INPUT_KEY ? {\n    key: objectKey,\n    ...result\n  } : {\n    path: objectKey,\n    ...result\n  };\n};\nexports.putObjectJob = putObjectJob;","map":{"version":3,"names":["Object","defineProperty","exports","value","putObjectJob","core_1","require","utils_1","utils_2","s3data_1","userAgent_1","constants_1","crc32_1","constructContentDisposition_1","uploadDataInput","abortSignal","totalLength","options","uploadDataOptions","data","bucket","keyPrefix","s3Config","isObjectLockEnabled","identityId","resolveS3ConfigAndInput","Amplify","inputType","objectKey","validateStorageOperationInput","validateBucketOwnerID","expectedBucketOwner","finalKey","STORAGE_INPUT_KEY","contentDisposition","contentEncoding","contentType","preventOverwrite","metadata","checksumAlgorithm","onProgress","checksumCRC32","CHECKSUM_ALGORITHM_CRC32","calculateContentCRC32","undefined","contentMD5","calculateContentMd5","ETag","eTag","VersionId","versionId","putObject","onUploadProgress","userAgentValue","getStorageUserAgentValue","StorageAction","UploadData","Bucket","Key","Body","ContentType","ContentDisposition","constructContentDisposition","ContentEncoding","Metadata","ContentMD5","ChecksumCRC32","ExpectedBucketOwner","IfNoneMatch","result","size","key","path"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\uploadData\\putObjectJob.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.putObjectJob = void 0;\nconst core_1 = require(\"@aws-amplify/core\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst utils_2 = require(\"../../../utils\");\nconst s3data_1 = require(\"../../../utils/client/s3data\");\nconst userAgent_1 = require(\"../../../utils/userAgent\");\nconst constants_1 = require(\"../../../utils/constants\");\nconst crc32_1 = require(\"../../../utils/crc32\");\nconst constructContentDisposition_1 = require(\"../../../utils/constructContentDisposition\");\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nconst putObjectJob = (uploadDataInput, abortSignal, totalLength) => async () => {\n    const { options: uploadDataOptions, data } = uploadDataInput;\n    const { bucket, keyPrefix, s3Config, isObjectLockEnabled, identityId } = await (0, utils_2.resolveS3ConfigAndInput)(core_1.Amplify, uploadDataInput);\n    const { inputType, objectKey } = (0, utils_2.validateStorageOperationInput)(uploadDataInput, identityId);\n    (0, utils_2.validateBucketOwnerID)(uploadDataOptions?.expectedBucketOwner);\n    const finalKey = inputType === constants_1.STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    const { contentDisposition, contentEncoding, contentType = 'application/octet-stream', preventOverwrite, metadata, checksumAlgorithm, onProgress, expectedBucketOwner, } = uploadDataOptions ?? {};\n    const checksumCRC32 = checksumAlgorithm === constants_1.CHECKSUM_ALGORITHM_CRC32\n        ? await (0, crc32_1.calculateContentCRC32)(data)\n        : undefined;\n    const contentMD5 = \n    // check if checksum exists. ex: should not exist in react native\n    !checksumCRC32 && isObjectLockEnabled\n        ? await (0, utils_2.calculateContentMd5)(data)\n        : undefined;\n    const { ETag: eTag, VersionId: versionId } = await (0, s3data_1.putObject)({\n        ...s3Config,\n        abortSignal,\n        onUploadProgress: onProgress,\n        userAgentValue: (0, userAgent_1.getStorageUserAgentValue)(utils_1.StorageAction.UploadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        Body: data,\n        ContentType: contentType,\n        ContentDisposition: (0, constructContentDisposition_1.constructContentDisposition)(contentDisposition),\n        ContentEncoding: contentEncoding,\n        Metadata: metadata,\n        ContentMD5: contentMD5,\n        ChecksumCRC32: checksumCRC32,\n        ExpectedBucketOwner: expectedBucketOwner,\n        IfNoneMatch: preventOverwrite ? '*' : undefined,\n    });\n    const result = {\n        eTag,\n        versionId,\n        contentType,\n        metadata,\n        size: totalLength,\n    };\n    return inputType === constants_1.STORAGE_INPUT_KEY\n        ? { key: objectKey, ...result }\n        : { path: objectKey, ...result };\n};\nexports.putObjectJob = putObjectJob;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}