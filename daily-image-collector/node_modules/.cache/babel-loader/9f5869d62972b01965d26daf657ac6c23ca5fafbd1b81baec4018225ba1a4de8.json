{"ast":null,"code":"import { parseMetadata } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { parseXmlBody } from '../utils/parsePayload.mjs';\nimport { s3TransferHandler } from '../runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { buildStorageServiceError, map } from '../utils/deserializeHelpers.mjs';\nimport { assignStringVariables, validateS3RequiredParameter, serializePathnameObjectKey } from '../utils/serializeHelpers.mjs';\nimport { validateObjectUrl } from '../../validateObjectUrl.mjs';\nimport { validateMultipartUploadXML } from '../../validateMultipartUploadXML.mjs';\nimport { defaultConfig, parseXmlError, retryDecider } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for CompleteMultipartUpload API';\nconst MISSING_ETAG_ERROR_MSG = 'ETag missing from multipart upload';\nconst MISSING_ETAG_ERROR_SUGGESTION = 'Please ensure S3 bucket CORS configuration includes ETag as part of its `ExposeHeaders` element';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n  const headers = {\n    'content-type': 'application/xml',\n    ...assignStringVariables({\n      'x-amz-checksum-crc32': input.ChecksumCRC32,\n      'x-amz-checksum-type': input.ChecksumType,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n      'If-None-Match': input.IfNoneMatch\n    })\n  };\n  const url = new AmplifyUrl(endpoint.url.toString());\n  validateS3RequiredParameter(!!input.Key, 'Key');\n  url.pathname = serializePathnameObjectKey(url, input.Key);\n  validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n  url.search = new AmplifyUrlSearchParams({\n    uploadId: input.UploadId\n  }).toString();\n  validateS3RequiredParameter(!!input.MultipartUpload, 'MultipartUpload');\n  validateObjectUrl({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  const xml = serializeCompletedMultipartUpload(input.MultipartUpload);\n  validateMultipartUploadXML(input.MultipartUpload, xml);\n  return {\n    method: 'POST',\n    headers,\n    url,\n    body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + xml\n  };\n};\nconst serializeCompletedMultipartUpload = input => {\n  if (!input.Parts?.length) {\n    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n  }\n  return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = input => {\n  if (input.PartNumber == null) {\n    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n  }\n  if (!input.ETag) {\n    throw new Error(`${MISSING_ETAG_ERROR_MSG}: ${JSON.stringify(input)}. ${MISSING_ETAG_ERROR_SUGGESTION}`);\n  }\n  const eTag = `<ETag>${input.ETag}</ETag>`;\n  const partNumber = `<PartNumber>${input.PartNumber}</PartNumber>`;\n  const checksumCRC32 = input.ChecksumCRC32 ? `<ChecksumCRC32>${input.ChecksumCRC32}</ChecksumCRC32>` : '';\n  return `<Part>${eTag}${partNumber}${checksumCRC32}</Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async response => {\n  const parsed = await parseXmlBody(response); // Handles empty body case\n  if (parsed.Code !== undefined && parsed.Message !== undefined) {\n    const error = await parseXmlError({\n      ...response,\n      statusCode: 500 // To workaround the >=300 status code check common to other APIs.\n    });\n    error.$metadata.httpStatusCode = response.statusCode;\n    throw buildStorageServiceError(error);\n  }\n  return parsed;\n};\nconst completeMultipartUploadDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw buildStorageServiceError(await parseXmlError(response));\n  } else {\n    const parsed = await parseXmlBodyOrThrow(response);\n    const contents = map(parsed, {\n      ETag: 'ETag',\n      Key: 'Key',\n      Location: 'Location'\n    });\n    return {\n      $metadata: parseMetadata(response),\n      ...contents\n    };\n  }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error, middlewareContext) => {\n  if (!response) {\n    return {\n      retryable: false\n    };\n  }\n  if (response.statusCode === 200) {\n    if (!response.body) {\n      return {\n        retryable: true\n      };\n    }\n    const parsed = await parseXmlBody(response);\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n      return {\n        retryable: true\n      };\n    }\n    return {\n      retryable: false\n    };\n  }\n  return retryDecider(response, error, middlewareContext);\n};\nconst completeMultipartUpload = composeServiceApi(s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n  ...defaultConfig,\n  responseType: 'text',\n  retryDecider: retryWhenErrorWith200StatusCode\n});\nexport { completeMultipartUpload };","map":{"version":3,"names":["INVALID_PARAMETER_ERROR_MSG","MISSING_ETAG_ERROR_MSG","MISSING_ETAG_ERROR_SUGGESTION","completeMultipartUploadSerializer","input","endpoint","headers","assignStringVariables","ChecksumCRC32","ChecksumType","ExpectedBucketOwner","IfNoneMatch","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","UploadId","search","AmplifyUrlSearchParams","uploadId","MultipartUpload","validateObjectUrl","bucketName","Bucket","key","objectURL","xml","serializeCompletedMultipartUpload","validateMultipartUploadXML","method","body","Parts","length","Error","JSON","stringify","map","serializeCompletedPartList","join","PartNumber","ETag","eTag","partNumber","checksumCRC32","parseXmlBodyOrThrow","response","parsed","parseXmlBody","Code","undefined","Message","error","parseXmlError","statusCode","$metadata","httpStatusCode","buildStorageServiceError","completeMultipartUploadDeserializer","contents","Location","parseMetadata","retryWhenErrorWith200StatusCode","middlewareContext","retryable","retryDecider","completeMultipartUpload","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\completeMultipartUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseMetadata, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { assignStringVariables, buildStorageServiceError, map, parseXmlBody, s3TransferHandler, serializePathnameObjectKey, validateS3RequiredParameter, } from '../utils';\nimport { validateObjectUrl } from '../../validateObjectUrl';\nimport { validateMultipartUploadXML } from '../../validateMultipartUploadXML';\nimport { defaultConfig, parseXmlError, retryDecider } from './base';\nconst INVALID_PARAMETER_ERROR_MSG = 'Invalid parameter for CompleteMultipartUpload API';\nconst MISSING_ETAG_ERROR_MSG = 'ETag missing from multipart upload';\nconst MISSING_ETAG_ERROR_SUGGESTION = 'Please ensure S3 bucket CORS configuration includes ETag as part of its `ExposeHeaders` element';\nconst completeMultipartUploadSerializer = async (input, endpoint) => {\n    const headers = {\n        'content-type': 'application/xml',\n        ...assignStringVariables({\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'x-amz-checksum-type': input.ChecksumType,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            'If-None-Match': input.IfNoneMatch,\n        }),\n    };\n    const url = new AmplifyUrl(endpoint.url.toString());\n    validateS3RequiredParameter(!!input.Key, 'Key');\n    url.pathname = serializePathnameObjectKey(url, input.Key);\n    validateS3RequiredParameter(!!input.UploadId, 'UploadId');\n    url.search = new AmplifyUrlSearchParams({\n        uploadId: input.UploadId,\n    }).toString();\n    validateS3RequiredParameter(!!input.MultipartUpload, 'MultipartUpload');\n    validateObjectUrl({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    const xml = serializeCompletedMultipartUpload(input.MultipartUpload);\n    validateMultipartUploadXML(input.MultipartUpload, xml);\n    return {\n        method: 'POST',\n        headers,\n        url,\n        body: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + xml,\n    };\n};\nconst serializeCompletedMultipartUpload = (input) => {\n    if (!input.Parts?.length) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n    }\n    return `<CompleteMultipartUpload xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">${input.Parts.map(serializeCompletedPartList).join('')}</CompleteMultipartUpload>`;\n};\nconst serializeCompletedPartList = (input) => {\n    if (input.PartNumber == null) {\n        throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input)}`);\n    }\n    if (!input.ETag) {\n        throw new Error(`${MISSING_ETAG_ERROR_MSG}: ${JSON.stringify(input)}. ${MISSING_ETAG_ERROR_SUGGESTION}`);\n    }\n    const eTag = `<ETag>${input.ETag}</ETag>`;\n    const partNumber = `<PartNumber>${input.PartNumber}</PartNumber>`;\n    const checksumCRC32 = input.ChecksumCRC32\n        ? `<ChecksumCRC32>${input.ChecksumCRC32}</ChecksumCRC32>`\n        : '';\n    return `<Part>${eTag}${partNumber}${checksumCRC32}</Part>`;\n};\n/**\n * Parse CompleteMultipartUpload API response payload, which may be empty or error indicating internal\n * server error, even when the status code is 200.\n *\n * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\n */\nconst parseXmlBodyOrThrow = async (response) => {\n    const parsed = await parseXmlBody(response); // Handles empty body case\n    if (parsed.Code !== undefined && parsed.Message !== undefined) {\n        const error = await parseXmlError({\n            ...response,\n            statusCode: 500, // To workaround the >=300 status code check common to other APIs.\n        });\n        error.$metadata.httpStatusCode = response.statusCode;\n        throw buildStorageServiceError(error);\n    }\n    return parsed;\n};\nconst completeMultipartUploadDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw buildStorageServiceError((await parseXmlError(response)));\n    }\n    else {\n        const parsed = await parseXmlBodyOrThrow(response);\n        const contents = map(parsed, {\n            ETag: 'ETag',\n            Key: 'Key',\n            Location: 'Location',\n        });\n        return {\n            $metadata: parseMetadata(response),\n            ...contents,\n        };\n    }\n};\n// CompleteMultiPartUpload API returns 200 status code with empty body or error message.\n// This indicates internal server error after the response has been sent to the client.\n// Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html#API_CompleteMultipartUpload_Example_4\nconst retryWhenErrorWith200StatusCode = async (response, error, middlewareContext) => {\n    if (!response) {\n        return { retryable: false };\n    }\n    if (response.statusCode === 200) {\n        if (!response.body) {\n            return { retryable: true };\n        }\n        const parsed = await parseXmlBody(response);\n        if (parsed.Code !== undefined && parsed.Message !== undefined) {\n            return { retryable: true };\n        }\n        return { retryable: false };\n    }\n    return retryDecider(response, error, middlewareContext);\n};\nexport const completeMultipartUpload = composeServiceApi(s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {\n    ...defaultConfig,\n    responseType: 'text',\n    retryDecider: retryWhenErrorWith200StatusCode,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}