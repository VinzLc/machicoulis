{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateEndpoint = void 0;\nconst authenticated_1 = require(\"../../clients/handlers/aws/authenticated\");\nconst composeServiceApi_1 = require(\"../../clients/internal/composeServiceApi\");\nconst extendedEncodeURIComponent_1 = require(\"../../clients/middleware/signing/utils/extendedEncodeURIComponent\");\nconst serde_1 = require(\"../../clients/serde\");\nconst amplifyUrl_1 = require(\"../../utils/amplifyUrl\");\nconst base_1 = require(\"./base\");\nconst updateEndpointSerializer = ({\n  ApplicationId = '',\n  EndpointId = '',\n  EndpointRequest\n}, endpoint) => {\n  const headers = (0, base_1.getSharedHeaders)();\n  const url = new amplifyUrl_1.AmplifyUrl(endpoint.url);\n  url.pathname = `v1/apps/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(ApplicationId)}/endpoints/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(EndpointId)}`;\n  const body = JSON.stringify(EndpointRequest);\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body\n  };\n};\nconst updateEndpointDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await (0, serde_1.parseJsonError)(response);\n    throw error;\n  } else {\n    const {\n      Message,\n      RequestID\n    } = await (0, serde_1.parseJsonBody)(response);\n    return {\n      MessageBody: {\n        Message,\n        RequestID\n      },\n      $metadata: (0, serde_1.parseMetadata)(response)\n    };\n  }\n};\n/**\n * @internal\n */\nexports.updateEndpoint = (0, composeServiceApi_1.composeServiceApi)(authenticated_1.authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, base_1.defaultConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","updateEndpoint","authenticated_1","require","composeServiceApi_1","extendedEncodeURIComponent_1","serde_1","amplifyUrl_1","base_1","updateEndpointSerializer","ApplicationId","EndpointId","EndpointRequest","endpoint","headers","getSharedHeaders","url","AmplifyUrl","pathname","extendedEncodeURIComponent","body","JSON","stringify","method","updateEndpointDeserializer","response","statusCode","error","parseJsonError","Message","RequestID","parseJsonBody","MessageBody","$metadata","parseMetadata","composeServiceApi","authenticatedHandler","defaultConfig"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\awsClients\\pinpoint\\updateEndpoint.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateEndpoint = void 0;\nconst authenticated_1 = require(\"../../clients/handlers/aws/authenticated\");\nconst composeServiceApi_1 = require(\"../../clients/internal/composeServiceApi\");\nconst extendedEncodeURIComponent_1 = require(\"../../clients/middleware/signing/utils/extendedEncodeURIComponent\");\nconst serde_1 = require(\"../../clients/serde\");\nconst amplifyUrl_1 = require(\"../../utils/amplifyUrl\");\nconst base_1 = require(\"./base\");\nconst updateEndpointSerializer = ({ ApplicationId = '', EndpointId = '', EndpointRequest }, endpoint) => {\n    const headers = (0, base_1.getSharedHeaders)();\n    const url = new amplifyUrl_1.AmplifyUrl(endpoint.url);\n    url.pathname = `v1/apps/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(ApplicationId)}/endpoints/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(EndpointId)}`;\n    const body = JSON.stringify(EndpointRequest);\n    return { method: 'PUT', headers, url, body };\n};\nconst updateEndpointDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await (0, serde_1.parseJsonError)(response);\n        throw error;\n    }\n    else {\n        const { Message, RequestID } = await (0, serde_1.parseJsonBody)(response);\n        return {\n            MessageBody: {\n                Message,\n                RequestID,\n            },\n            $metadata: (0, serde_1.parseMetadata)(response),\n        };\n    }\n};\n/**\n * @internal\n */\nexports.updateEndpoint = (0, composeServiceApi_1.composeServiceApi)(authenticated_1.authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, base_1.defaultConfig);\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,MAAM;AAC/B,MAAMC,eAAe,GAAGC,OAAO,CAAC,0CAA0C,CAAC;AAC3E,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,0CAA0C,CAAC;AAC/E,MAAME,4BAA4B,GAAGF,OAAO,CAAC,mEAAmE,CAAC;AACjH,MAAMG,OAAO,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAC9C,MAAMI,YAAY,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMM,wBAAwB,GAAGA,CAAC;EAAEC,aAAa,GAAG,EAAE;EAAEC,UAAU,GAAG,EAAE;EAAEC;AAAe,CAAE,EAAEC,QAAQ,KAAK;EACrG,MAAMC,OAAO,GAAG,IAAIN,MAAM,CAACO,gBAAgB,GAAG;EAC9C,MAAMC,GAAG,GAAG,IAAIT,YAAY,CAACU,UAAU,CAACJ,QAAQ,CAACG,GAAG,CAAC;EACrDA,GAAG,CAACE,QAAQ,GAAG,WAAW,IAAIb,4BAA4B,CAACc,0BAA0B,EAAET,aAAa,CAAC,cAAc,IAAIL,4BAA4B,CAACc,0BAA0B,EAAER,UAAU,CAAC,EAAE;EAC7L,MAAMS,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACV,eAAe,CAAC;EAC5C,OAAO;IAAEW,MAAM,EAAE,KAAK;IAAET,OAAO;IAAEE,GAAG;IAAEI;EAAI,CAAE;AAChD,CAAC;AACD,MAAMI,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAM,IAAIrB,OAAO,CAACsB,cAAc,EAAEH,QAAQ,CAAC;IACzD,MAAME,KAAK;EACnB,OACS;IACD,MAAM;MAAEE,OAAO;MAAEC;IAAS,CAAE,GAAG,MAAM,IAAIxB,OAAO,CAACyB,aAAa,EAAEN,QAAQ,CAAC;IACzE,OAAO;MACHO,WAAW,EAAE;QACTH,OAAO;QACPC;MAChB,CAAa;MACDG,SAAS,EAAE,IAAI3B,OAAO,CAAC4B,aAAa,EAAET,QAAQ;IAC1D,CAAS;EACT;AACA,CAAC;AACD;AACA;AACA;AACA1B,OAAO,CAACE,cAAc,GAAG,IAAIG,mBAAmB,CAAC+B,iBAAiB,EAAEjC,eAAe,CAACkC,oBAAoB,EAAE3B,wBAAwB,EAAEe,0BAA0B,EAAEhB,MAAM,CAAC6B,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}