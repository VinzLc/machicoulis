{"ast":null,"code":"import { StorageAction } from '@aws-amplify/core/internals/utils';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport '../../../../errors/types/validation.mjs';\nimport { logger } from '../../../../utils/logger.mjs';\nimport { validateBucketOwnerID } from '../../utils/validateBucketOwnerID.mjs';\nimport { DEFAULT_DELIMITER, STORAGE_INPUT_PREFIX } from '../../utils/constants.mjs';\nimport { validateStorageOperationInputWithPrefix } from '../../utils/validateStorageOperationInputWithPrefix.mjs';\nimport { urlDecode } from '../../utils/urlDecoder.mjs';\nimport '../../utils/client/s3data/base.mjs';\nimport '../../utils/client/s3data/getObject.mjs';\nimport { listObjectsV2 } from '../../utils/client/s3data/listObjectsV2.mjs';\nimport '../../utils/client/s3data/putObject.mjs';\nimport '../../utils/client/s3data/createMultipartUpload.mjs';\nimport '../../utils/client/s3data/uploadPart.mjs';\nimport '../../utils/client/s3data/completeMultipartUpload.mjs';\nimport '../../utils/client/s3data/listParts.mjs';\nimport '../../utils/client/s3data/abortMultipartUpload.mjs';\nimport '../../utils/client/s3data/copyObject.mjs';\nimport '../../utils/client/s3data/headObject.mjs';\nimport '../../utils/client/s3data/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../utils/userAgent.mjs';\nimport { IntegrityError } from '../../../../errors/IntegrityError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_PAGE_SIZE = 1000;\nconst list = async (amplify, input) => {\n  const {\n    options = {}\n  } = input;\n  const {\n    s3Config,\n    bucket,\n    keyPrefix: generatedPrefix,\n    identityId\n  } = await resolveS3ConfigAndInput(amplify, input);\n  const {\n    inputType,\n    objectKey\n  } = validateStorageOperationInputWithPrefix(input, identityId);\n  validateBucketOwnerID(options.expectedBucketOwner);\n  const isInputWithPrefix = inputType === STORAGE_INPUT_PREFIX;\n  // @ts-expect-error pageSize and nextToken should not coexist with listAll\n  if (options?.listAll && (options?.pageSize || options?.nextToken)) {\n    const anyOptions = options;\n    logger.debug(`listAll is set to true, ignoring ${anyOptions?.pageSize ? `pageSize: ${anyOptions?.pageSize}` : ''} ${anyOptions?.nextToken ? `nextToken: ${anyOptions?.nextToken}` : ''}.`);\n  }\n  const listParams = {\n    Bucket: bucket,\n    Prefix: isInputWithPrefix ? `${generatedPrefix}${objectKey}` : objectKey,\n    MaxKeys: options?.listAll ? undefined : options?.pageSize,\n    ContinuationToken: options?.listAll ? undefined : options?.nextToken,\n    Delimiter: getDelimiter(options),\n    ExpectedBucketOwner: options?.expectedBucketOwner,\n    EncodingType: 'url'\n  };\n  logger.debug(`listing items from \"${listParams.Prefix}\"`);\n  const listInputArgs = {\n    s3Config,\n    listParams\n  };\n  if (options.listAll) {\n    if (isInputWithPrefix) {\n      return _listAllWithPrefix({\n        ...listInputArgs,\n        generatedPrefix\n      });\n    } else {\n      return _listAllWithPath(listInputArgs);\n    }\n  } else {\n    if (isInputWithPrefix) {\n      return _listWithPrefix({\n        ...listInputArgs,\n        generatedPrefix\n      });\n    } else {\n      return _listWithPath(listInputArgs);\n    }\n  }\n};\n/** @deprecated Use {@link _listAllWithPath} instead. */\nconst _listAllWithPrefix = async ({\n  s3Config,\n  listParams,\n  generatedPrefix\n}) => {\n  const listResult = [];\n  let continuationToken = listParams.ContinuationToken;\n  do {\n    const {\n      items: pageResults,\n      nextToken: pageNextToken\n    } = await _listWithPrefix({\n      generatedPrefix,\n      s3Config,\n      listParams: {\n        ...listParams,\n        ContinuationToken: continuationToken,\n        MaxKeys: MAX_PAGE_SIZE\n      }\n    });\n    listResult.push(...pageResults);\n    continuationToken = pageNextToken;\n  } while (continuationToken);\n  return {\n    items: listResult\n  };\n};\n/** @deprecated Use {@link _listWithPath} instead. */\nconst _listWithPrefix = async ({\n  s3Config,\n  listParams,\n  generatedPrefix\n}) => {\n  const listParamsClone = {\n    ...listParams\n  };\n  if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n    logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n    listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n  }\n  const response = await listObjectsV2({\n    ...s3Config,\n    userAgentValue: getStorageUserAgentValue(StorageAction.List)\n  }, listParamsClone);\n  const listOutput = decodeEncodedElements(response);\n  validateEchoedElements(listParamsClone, listOutput);\n  if (!listOutput?.Contents) {\n    return {\n      items: []\n    };\n  }\n  return {\n    items: listOutput.Contents.map(item => ({\n      key: generatedPrefix ? item.Key.substring(generatedPrefix.length) : item.Key,\n      eTag: item.ETag,\n      lastModified: item.LastModified,\n      size: item.Size\n    })),\n    nextToken: listOutput.NextContinuationToken\n  };\n};\nconst _listAllWithPath = async ({\n  s3Config,\n  listParams\n}) => {\n  const listResult = [];\n  const excludedSubpaths = [];\n  let continuationToken = listParams.ContinuationToken;\n  do {\n    const {\n      items: pageResults,\n      excludedSubpaths: pageExcludedSubpaths,\n      nextToken: pageNextToken\n    } = await _listWithPath({\n      s3Config,\n      listParams: {\n        ...listParams,\n        ContinuationToken: continuationToken,\n        MaxKeys: MAX_PAGE_SIZE\n      }\n    });\n    listResult.push(...pageResults);\n    excludedSubpaths.push(...(pageExcludedSubpaths ?? []));\n    continuationToken = pageNextToken;\n  } while (continuationToken);\n  return {\n    items: listResult,\n    excludedSubpaths\n  };\n};\nconst _listWithPath = async ({\n  s3Config,\n  listParams\n}) => {\n  const listParamsClone = {\n    ...listParams\n  };\n  if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n    logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n    listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n  }\n  const response = await listObjectsV2({\n    ...s3Config,\n    userAgentValue: getStorageUserAgentValue(StorageAction.List)\n  }, listParamsClone);\n  const listOutput = decodeEncodedElements(response);\n  validateEchoedElements(listParamsClone, listOutput);\n  const {\n    Contents: contents,\n    NextContinuationToken: nextContinuationToken,\n    CommonPrefixes: commonPrefixes\n  } = listOutput;\n  const excludedSubpaths = commonPrefixes && mapCommonPrefixesToExcludedSubpaths(commonPrefixes);\n  if (!contents) {\n    return {\n      items: [],\n      nextToken: nextContinuationToken,\n      excludedSubpaths\n    };\n  }\n  return {\n    items: contents.map(item => ({\n      path: item.Key,\n      eTag: item.ETag,\n      lastModified: item.LastModified,\n      size: item.Size\n    })),\n    nextToken: nextContinuationToken,\n    excludedSubpaths\n  };\n};\nconst mapCommonPrefixesToExcludedSubpaths = commonPrefixes => {\n  return commonPrefixes.reduce((mappedSubpaths, {\n    Prefix\n  }) => {\n    if (Prefix) {\n      mappedSubpaths.push(Prefix);\n    }\n    return mappedSubpaths;\n  }, []);\n};\nconst getDelimiter = options => {\n  if (options?.subpathStrategy?.strategy === 'exclude') {\n    return options?.subpathStrategy?.delimiter ?? DEFAULT_DELIMITER;\n  }\n};\nconst validateEchoedElements = (listInput, listOutput) => {\n  const validEchoedParameters = listInput.Bucket === listOutput.Name && listInput.Delimiter === listOutput.Delimiter && listInput.MaxKeys === listOutput.MaxKeys && listInput.Prefix === listOutput.Prefix && listInput.ContinuationToken === listOutput.ContinuationToken;\n  if (!validEchoedParameters) {\n    throw new IntegrityError({\n      metadata: listOutput.$metadata\n    });\n  }\n};\n/**\n * Decodes URL-encoded elements in the S3 `ListObjectsV2Output` response when `EncodingType` is `'url'`.\n * Applies to values for 'Delimiter', 'Prefix', 'StartAfter' and 'Key' in the response.\n */\nconst decodeEncodedElements = listOutput => {\n  if (listOutput.EncodingType !== 'url') {\n    return listOutput;\n  }\n  const decodedListOutput = {\n    ...listOutput\n  };\n  // Decode top-level properties\n  ['Delimiter', 'Prefix', 'StartAfter'].forEach(prop => {\n    const value = listOutput[prop];\n    if (typeof value === 'string') {\n      decodedListOutput[prop] = urlDecode(value);\n    }\n  });\n  // Decode 'Key' in each item of 'Contents', if it exists\n  if (listOutput.Contents) {\n    decodedListOutput.Contents = listOutput.Contents.map(content => ({\n      ...content,\n      Key: content.Key ? urlDecode(content.Key) : content.Key\n    }));\n  }\n  // Decode 'Prefix' in each item of 'CommonPrefixes', if it exists\n  if (listOutput.CommonPrefixes) {\n    decodedListOutput.CommonPrefixes = listOutput.CommonPrefixes.map(content => ({\n      ...content,\n      Prefix: content.Prefix ? urlDecode(content.Prefix) : content.Prefix\n    }));\n  }\n  return decodedListOutput;\n};\nexport { list };","map":{"version":3,"names":["MAX_PAGE_SIZE","list","amplify","input","options","s3Config","bucket","keyPrefix","generatedPrefix","identityId","resolveS3ConfigAndInput","inputType","objectKey","validateStorageOperationInputWithPrefix","validateBucketOwnerID","expectedBucketOwner","isInputWithPrefix","STORAGE_INPUT_PREFIX","listAll","pageSize","nextToken","anyOptions","logger","debug","listParams","Bucket","Prefix","MaxKeys","undefined","ContinuationToken","Delimiter","getDelimiter","ExpectedBucketOwner","EncodingType","listInputArgs","_listAllWithPrefix","_listAllWithPath","_listWithPrefix","_listWithPath","listResult","continuationToken","items","pageResults","pageNextToken","push","listParamsClone","response","listObjectsV2","userAgentValue","getStorageUserAgentValue","StorageAction","List","listOutput","decodeEncodedElements","validateEchoedElements","Contents","map","item","key","Key","substring","length","eTag","ETag","lastModified","LastModified","size","Size","NextContinuationToken","excludedSubpaths","pageExcludedSubpaths","contents","nextContinuationToken","CommonPrefixes","commonPrefixes","mapCommonPrefixesToExcludedSubpaths","path","reduce","mappedSubpaths","subpathStrategy","strategy","delimiter","DEFAULT_DELIMITER","listInput","validEchoedParameters","Name","IntegrityError","metadata","$metadata","decodedListOutput","forEach","prop","value","urlDecode","content"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\list.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { resolveS3ConfigAndInput, urlDecode, validateBucketOwnerID, validateStorageOperationInputWithPrefix, } from '../../utils';\nimport { listObjectsV2, } from '../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../utils/userAgent';\nimport { logger } from '../../../../utils';\nimport { DEFAULT_DELIMITER, STORAGE_INPUT_PREFIX } from '../../utils/constants';\nimport { IntegrityError } from '../../../../errors/IntegrityError';\nconst MAX_PAGE_SIZE = 1000;\nexport const list = async (amplify, input) => {\n    const { options = {} } = input;\n    const { s3Config, bucket, keyPrefix: generatedPrefix, identityId, } = await resolveS3ConfigAndInput(amplify, input);\n    const { inputType, objectKey } = validateStorageOperationInputWithPrefix(input, identityId);\n    validateBucketOwnerID(options.expectedBucketOwner);\n    const isInputWithPrefix = inputType === STORAGE_INPUT_PREFIX;\n    // @ts-expect-error pageSize and nextToken should not coexist with listAll\n    if (options?.listAll && (options?.pageSize || options?.nextToken)) {\n        const anyOptions = options;\n        logger.debug(`listAll is set to true, ignoring ${anyOptions?.pageSize ? `pageSize: ${anyOptions?.pageSize}` : ''} ${anyOptions?.nextToken ? `nextToken: ${anyOptions?.nextToken}` : ''}.`);\n    }\n    const listParams = {\n        Bucket: bucket,\n        Prefix: isInputWithPrefix ? `${generatedPrefix}${objectKey}` : objectKey,\n        MaxKeys: options?.listAll ? undefined : options?.pageSize,\n        ContinuationToken: options?.listAll ? undefined : options?.nextToken,\n        Delimiter: getDelimiter(options),\n        ExpectedBucketOwner: options?.expectedBucketOwner,\n        EncodingType: 'url',\n    };\n    logger.debug(`listing items from \"${listParams.Prefix}\"`);\n    const listInputArgs = {\n        s3Config,\n        listParams,\n    };\n    if (options.listAll) {\n        if (isInputWithPrefix) {\n            return _listAllWithPrefix({\n                ...listInputArgs,\n                generatedPrefix,\n            });\n        }\n        else {\n            return _listAllWithPath(listInputArgs);\n        }\n    }\n    else {\n        if (isInputWithPrefix) {\n            return _listWithPrefix({ ...listInputArgs, generatedPrefix });\n        }\n        else {\n            return _listWithPath(listInputArgs);\n        }\n    }\n};\n/** @deprecated Use {@link _listAllWithPath} instead. */\nconst _listAllWithPrefix = async ({ s3Config, listParams, generatedPrefix, }) => {\n    const listResult = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, nextToken: pageNextToken } = await _listWithPrefix({\n            generatedPrefix,\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n    };\n};\n/** @deprecated Use {@link _listWithPath} instead. */\nconst _listWithPrefix = async ({ s3Config, listParams, generatedPrefix, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    const listOutput = decodeEncodedElements(response);\n    validateEchoedElements(listParamsClone, listOutput);\n    if (!listOutput?.Contents) {\n        return {\n            items: [],\n        };\n    }\n    return {\n        items: listOutput.Contents.map(item => ({\n            key: generatedPrefix\n                ? item.Key.substring(generatedPrefix.length)\n                : item.Key,\n            eTag: item.ETag,\n            lastModified: item.LastModified,\n            size: item.Size,\n        })),\n        nextToken: listOutput.NextContinuationToken,\n    };\n};\nconst _listAllWithPath = async ({ s3Config, listParams, }) => {\n    const listResult = [];\n    const excludedSubpaths = [];\n    let continuationToken = listParams.ContinuationToken;\n    do {\n        const { items: pageResults, excludedSubpaths: pageExcludedSubpaths, nextToken: pageNextToken, } = await _listWithPath({\n            s3Config,\n            listParams: {\n                ...listParams,\n                ContinuationToken: continuationToken,\n                MaxKeys: MAX_PAGE_SIZE,\n            },\n        });\n        listResult.push(...pageResults);\n        excludedSubpaths.push(...(pageExcludedSubpaths ?? []));\n        continuationToken = pageNextToken;\n    } while (continuationToken);\n    return {\n        items: listResult,\n        excludedSubpaths,\n    };\n};\nconst _listWithPath = async ({ s3Config, listParams, }) => {\n    const listParamsClone = { ...listParams };\n    if (!listParamsClone.MaxKeys || listParamsClone.MaxKeys > MAX_PAGE_SIZE) {\n        logger.debug(`defaulting pageSize to ${MAX_PAGE_SIZE}.`);\n        listParamsClone.MaxKeys = MAX_PAGE_SIZE;\n    }\n    const response = await listObjectsV2({\n        ...s3Config,\n        userAgentValue: getStorageUserAgentValue(StorageAction.List),\n    }, listParamsClone);\n    const listOutput = decodeEncodedElements(response);\n    validateEchoedElements(listParamsClone, listOutput);\n    const { Contents: contents, NextContinuationToken: nextContinuationToken, CommonPrefixes: commonPrefixes, } = listOutput;\n    const excludedSubpaths = commonPrefixes && mapCommonPrefixesToExcludedSubpaths(commonPrefixes);\n    if (!contents) {\n        return {\n            items: [],\n            nextToken: nextContinuationToken,\n            excludedSubpaths,\n        };\n    }\n    return {\n        items: contents.map(item => ({\n            path: item.Key,\n            eTag: item.ETag,\n            lastModified: item.LastModified,\n            size: item.Size,\n        })),\n        nextToken: nextContinuationToken,\n        excludedSubpaths,\n    };\n};\nconst mapCommonPrefixesToExcludedSubpaths = (commonPrefixes) => {\n    return commonPrefixes.reduce((mappedSubpaths, { Prefix }) => {\n        if (Prefix) {\n            mappedSubpaths.push(Prefix);\n        }\n        return mappedSubpaths;\n    }, []);\n};\nconst getDelimiter = (options) => {\n    if (options?.subpathStrategy?.strategy === 'exclude') {\n        return options?.subpathStrategy?.delimiter ?? DEFAULT_DELIMITER;\n    }\n};\nconst validateEchoedElements = (listInput, listOutput) => {\n    const validEchoedParameters = listInput.Bucket === listOutput.Name &&\n        listInput.Delimiter === listOutput.Delimiter &&\n        listInput.MaxKeys === listOutput.MaxKeys &&\n        listInput.Prefix === listOutput.Prefix &&\n        listInput.ContinuationToken === listOutput.ContinuationToken;\n    if (!validEchoedParameters) {\n        throw new IntegrityError({ metadata: listOutput.$metadata });\n    }\n};\n/**\n * Decodes URL-encoded elements in the S3 `ListObjectsV2Output` response when `EncodingType` is `'url'`.\n * Applies to values for 'Delimiter', 'Prefix', 'StartAfter' and 'Key' in the response.\n */\nconst decodeEncodedElements = (listOutput) => {\n    if (listOutput.EncodingType !== 'url') {\n        return listOutput;\n    }\n    const decodedListOutput = { ...listOutput };\n    // Decode top-level properties\n    ['Delimiter', 'Prefix', 'StartAfter'].forEach(prop => {\n        const value = listOutput[prop];\n        if (typeof value === 'string') {\n            decodedListOutput[prop] = urlDecode(value);\n        }\n    });\n    // Decode 'Key' in each item of 'Contents', if it exists\n    if (listOutput.Contents) {\n        decodedListOutput.Contents = listOutput.Contents.map(content => ({\n            ...content,\n            Key: content.Key ? urlDecode(content.Key) : content.Key,\n        }));\n    }\n    // Decode 'Prefix' in each item of 'CommonPrefixes', if it exists\n    if (listOutput.CommonPrefixes) {\n        decodedListOutput.CommonPrefixes = listOutput.CommonPrefixes.map(content => ({\n            ...content,\n            Prefix: content.Prefix ? urlDecode(content.Prefix) : content.Prefix,\n        }));\n    }\n    return decodedListOutput;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}