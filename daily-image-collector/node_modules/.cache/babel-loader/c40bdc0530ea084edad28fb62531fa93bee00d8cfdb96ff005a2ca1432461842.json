{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retryMiddlewareFactory = void 0;\nconst constants_1 = require(\"./constants\");\n/**\n * Middleware that executes the retry logic.\n */\nconst retryMiddlewareFactory = ({\n  maxAttempts = constants_1.DEFAULT_RETRY_ATTEMPTS,\n  retryDecider,\n  computeDelay,\n  abortSignal\n}) => {\n  if (maxAttempts < 1) {\n    throw new Error('maxAttempts must be greater than 0');\n  }\n  return (next, context) => async function retryMiddleware(request) {\n    let error;\n    let attemptsCount = context.attemptsCount ?? 0;\n    let response;\n    // When retry is not needed or max attempts is reached, either error or response will be set. This function handles either cases.\n    const handleTerminalErrorOrResponse = () => {\n      if (response) {\n        addOrIncrementMetadataAttempts(response, attemptsCount);\n        return response;\n      } else {\n        addOrIncrementMetadataAttempts(error, attemptsCount);\n        throw error;\n      }\n    };\n    while (!abortSignal?.aborted && attemptsCount < maxAttempts) {\n      try {\n        response = await next(request);\n        error = undefined;\n      } catch (e) {\n        error = e;\n        response = undefined;\n      }\n      // context.attemptsCount may be updated after calling next handler which may retry the request by itself.\n      attemptsCount = (context.attemptsCount ?? 0) > attemptsCount ? context.attemptsCount ?? 0 : attemptsCount + 1;\n      context.attemptsCount = attemptsCount;\n      const {\n        isCredentialsExpiredError,\n        retryable\n      } = await retryDecider(response, error, context);\n      if (retryable) {\n        // Setting isCredentialsInvalid flag to notify signing middleware to forceRefresh credentials provider.\n        context.isCredentialsExpired = !!isCredentialsExpiredError;\n        if (!abortSignal?.aborted && attemptsCount < maxAttempts) {\n          // prevent sleep for last attempt or cancelled request;\n          const delay = computeDelay(attemptsCount);\n          await cancellableSleep(delay, abortSignal);\n        }\n        continue;\n      } else {\n        return handleTerminalErrorOrResponse();\n      }\n    }\n    if (abortSignal?.aborted) {\n      throw new Error('Request aborted.');\n    } else {\n      return handleTerminalErrorOrResponse();\n    }\n  };\n};\nexports.retryMiddlewareFactory = retryMiddlewareFactory;\nconst cancellableSleep = (timeoutMs, abortSignal) => {\n  if (abortSignal?.aborted) {\n    return Promise.resolve();\n  }\n  let timeoutId;\n  let sleepPromiseResolveFn;\n  const sleepPromise = new Promise(resolve => {\n    sleepPromiseResolveFn = resolve;\n    timeoutId = setTimeout(resolve, timeoutMs);\n  });\n  abortSignal?.addEventListener('abort', function cancelSleep(_) {\n    clearTimeout(timeoutId);\n    abortSignal?.removeEventListener('abort', cancelSleep);\n    sleepPromiseResolveFn();\n  });\n  return sleepPromise;\n};\nconst addOrIncrementMetadataAttempts = (nextHandlerOutput, attempts) => {\n  if (Object.prototype.toString.call(nextHandlerOutput) !== '[object Object]') {\n    return;\n  }\n  nextHandlerOutput.$metadata = {\n    ...(nextHandlerOutput.$metadata ?? {}),\n    attempts\n  };\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","retryMiddlewareFactory","constants_1","require","maxAttempts","DEFAULT_RETRY_ATTEMPTS","retryDecider","computeDelay","abortSignal","Error","next","context","retryMiddleware","request","error","attemptsCount","response","handleTerminalErrorOrResponse","addOrIncrementMetadataAttempts","aborted","undefined","e","isCredentialsExpiredError","retryable","isCredentialsExpired","delay","cancellableSleep","timeoutMs","Promise","resolve","timeoutId","sleepPromiseResolveFn","sleepPromise","setTimeout","addEventListener","cancelSleep","_","clearTimeout","removeEventListener","nextHandlerOutput","attempts","prototype","toString","call","$metadata"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\clients\\middleware\\retry\\retryMiddleware.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.retryMiddlewareFactory = void 0;\nconst constants_1 = require(\"./constants\");\n/**\n * Middleware that executes the retry logic.\n */\nconst retryMiddlewareFactory = ({ maxAttempts = constants_1.DEFAULT_RETRY_ATTEMPTS, retryDecider, computeDelay, abortSignal, }) => {\n    if (maxAttempts < 1) {\n        throw new Error('maxAttempts must be greater than 0');\n    }\n    return (next, context) => async function retryMiddleware(request) {\n        let error;\n        let attemptsCount = context.attemptsCount ?? 0;\n        let response;\n        // When retry is not needed or max attempts is reached, either error or response will be set. This function handles either cases.\n        const handleTerminalErrorOrResponse = () => {\n            if (response) {\n                addOrIncrementMetadataAttempts(response, attemptsCount);\n                return response;\n            }\n            else {\n                addOrIncrementMetadataAttempts(error, attemptsCount);\n                throw error;\n            }\n        };\n        while (!abortSignal?.aborted && attemptsCount < maxAttempts) {\n            try {\n                response = await next(request);\n                error = undefined;\n            }\n            catch (e) {\n                error = e;\n                response = undefined;\n            }\n            // context.attemptsCount may be updated after calling next handler which may retry the request by itself.\n            attemptsCount =\n                (context.attemptsCount ?? 0) > attemptsCount\n                    ? (context.attemptsCount ?? 0)\n                    : attemptsCount + 1;\n            context.attemptsCount = attemptsCount;\n            const { isCredentialsExpiredError, retryable } = await retryDecider(response, error, context);\n            if (retryable) {\n                // Setting isCredentialsInvalid flag to notify signing middleware to forceRefresh credentials provider.\n                context.isCredentialsExpired = !!isCredentialsExpiredError;\n                if (!abortSignal?.aborted && attemptsCount < maxAttempts) {\n                    // prevent sleep for last attempt or cancelled request;\n                    const delay = computeDelay(attemptsCount);\n                    await cancellableSleep(delay, abortSignal);\n                }\n                continue;\n            }\n            else {\n                return handleTerminalErrorOrResponse();\n            }\n        }\n        if (abortSignal?.aborted) {\n            throw new Error('Request aborted.');\n        }\n        else {\n            return handleTerminalErrorOrResponse();\n        }\n    };\n};\nexports.retryMiddlewareFactory = retryMiddlewareFactory;\nconst cancellableSleep = (timeoutMs, abortSignal) => {\n    if (abortSignal?.aborted) {\n        return Promise.resolve();\n    }\n    let timeoutId;\n    let sleepPromiseResolveFn;\n    const sleepPromise = new Promise(resolve => {\n        sleepPromiseResolveFn = resolve;\n        timeoutId = setTimeout(resolve, timeoutMs);\n    });\n    abortSignal?.addEventListener('abort', function cancelSleep(_) {\n        clearTimeout(timeoutId);\n        abortSignal?.removeEventListener('abort', cancelSleep);\n        sleepPromiseResolveFn();\n    });\n    return sleepPromise;\n};\nconst addOrIncrementMetadataAttempts = (nextHandlerOutput, attempts) => {\n    if (Object.prototype.toString.call(nextHandlerOutput) !== '[object Object]') {\n        return;\n    }\n    nextHandlerOutput.$metadata = {\n        ...(nextHandlerOutput.$metadata ?? {}),\n        attempts,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}