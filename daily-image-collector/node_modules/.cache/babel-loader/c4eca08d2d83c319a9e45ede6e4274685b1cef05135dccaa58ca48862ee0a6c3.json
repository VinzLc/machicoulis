{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseXmlBody = exports.createXmlErrorParser = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst runtime_1 = require(\"../runtime\");\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nconst createXmlErrorParser = ({\n  noErrorWrapping = false\n} = {}) => async response => {\n  if (!response || response.statusCode < 300) {\n    return;\n  }\n  const {\n    statusCode\n  } = response;\n  const body = await (0, exports.parseXmlBody)(response);\n  const errorLocation = noErrorWrapping ? body : body.Error;\n  const code = errorLocation?.Code ? errorLocation.Code : statusCode === 404 ? 'NotFound' : statusCode.toString();\n  const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n  const error = new Error(message);\n  return Object.assign(error, {\n    name: code,\n    $metadata: (0, aws_client_utils_1.parseMetadata)(response)\n  });\n};\nexports.createXmlErrorParser = createXmlErrorParser;\nconst parseXmlBody = async response => {\n  if (!response.body) {\n    // S3 can return 200 without a body indicating failure.\n    throw new Error('S3 aborted request.');\n  }\n  const data = await response.body.text();\n  if (data?.length > 0) {\n    try {\n      return runtime_1.parser.parse(data);\n    } catch (error) {\n      throw new Error(`Failed to parse XML response: ${error}`);\n    }\n  }\n  return {};\n};\nexports.parseXmlBody = parseXmlBody;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseXmlBody","createXmlErrorParser","aws_client_utils_1","require","runtime_1","noErrorWrapping","response","statusCode","body","errorLocation","Error","code","Code","toString","message","Message","error","assign","name","$metadata","parseMetadata","data","text","length","parser","parse"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\utils\\parsePayload.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseXmlBody = exports.createXmlErrorParser = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst runtime_1 = require(\"../runtime\");\n/**\n * Factory creating a parser that parses the JS Error object from the XML\n * response payload.\n *\n * @param input Input object\n * @param input.noErrorWrapping Whether the error code and message are located\n *   directly in the root XML element, or in a nested `<Error>` element.\n *   See: https://smithy.io/2.0/aws/protocols/aws-restxml-protocol.html#restxml-errors\n *\n *   Default to false.\n *\n * @internal\n */\nconst createXmlErrorParser = ({ noErrorWrapping = false, } = {}) => async (response) => {\n    if (!response || response.statusCode < 300) {\n        return;\n    }\n    const { statusCode } = response;\n    const body = await (0, exports.parseXmlBody)(response);\n    const errorLocation = noErrorWrapping ? body : body.Error;\n    const code = errorLocation?.Code\n        ? errorLocation.Code\n        : statusCode === 404\n            ? 'NotFound'\n            : statusCode.toString();\n    const message = errorLocation?.message ?? errorLocation?.Message ?? code;\n    const error = new Error(message);\n    return Object.assign(error, {\n        name: code,\n        $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n    });\n};\nexports.createXmlErrorParser = createXmlErrorParser;\nconst parseXmlBody = async (response) => {\n    if (!response.body) {\n        // S3 can return 200 without a body indicating failure.\n        throw new Error('S3 aborted request.');\n    }\n    const data = await response.body.text();\n    if (data?.length > 0) {\n        try {\n            return runtime_1.parser.parse(data);\n        }\n        catch (error) {\n            throw new Error(`Failed to parse XML response: ${error}`);\n        }\n    }\n    return {};\n};\nexports.parseXmlBody = parseXmlBody;\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAGF,OAAO,CAACG,oBAAoB,GAAG,MAAM;AAC5D,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAClF,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,oBAAoB,GAAGA,CAAC;EAAEI,eAAe,GAAG;AAAK,CAAG,GAAG,EAAE,KAAK,MAAOC,QAAQ,IAAK;EACpF,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACC,UAAU,GAAG,GAAG,EAAE;IACxC;EACR;EACI,MAAM;IAAEA;EAAU,CAAE,GAAGD,QAAQ;EAC/B,MAAME,IAAI,GAAG,MAAM,IAAIV,OAAO,CAACE,YAAY,EAAEM,QAAQ,CAAC;EACtD,MAAMG,aAAa,GAAGJ,eAAe,GAAGG,IAAI,GAAGA,IAAI,CAACE,KAAK;EACzD,MAAMC,IAAI,GAAGF,aAAa,EAAEG,IAAA,GACtBH,aAAa,CAACG,IAAA,GACdL,UAAU,KAAK,MACX,aACAA,UAAU,CAACM,QAAQ,EAAE;EAC/B,MAAMC,OAAO,GAAGL,aAAa,EAAEK,OAAO,IAAIL,aAAa,EAAEM,OAAO,IAAIJ,IAAI;EACxE,MAAMK,KAAK,GAAG,IAAIN,KAAK,CAACI,OAAO,CAAC;EAChC,OAAOlB,MAAM,CAACqB,MAAM,CAACD,KAAK,EAAE;IACxBE,IAAI,EAAEP,IAAI;IACVQ,SAAS,EAAE,IAAIjB,kBAAkB,CAACkB,aAAa,EAAEd,QAAQ;EACjE,CAAK,CAAC;AACN,CAAC;AACDR,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AACnD,MAAMD,YAAY,GAAG,MAAOM,QAAQ,IAAK;EACrC,IAAI,CAACA,QAAQ,CAACE,IAAI,EAAE;IACxB;IACQ,MAAM,IAAIE,KAAK,CAAC,qBAAqB,CAAC;EAC9C;EACI,MAAMW,IAAI,GAAG,MAAMf,QAAQ,CAACE,IAAI,CAACc,IAAI,EAAE;EACvC,IAAID,IAAI,EAAEE,MAAM,GAAG,CAAC,EAAE;IAClB,IAAI;MACA,OAAOnB,SAAS,CAACoB,MAAM,CAACC,KAAK,CAACJ,IAAI,CAAC;IAC/C,EACQ,OAAOL,KAAK,EAAE;MACV,MAAM,IAAIN,KAAK,CAAC,iCAAiCM,KAAK,EAAE,CAAC;IACrE;EACA;EACI,OAAO,EAAE;AACb,CAAC;AACDlB,OAAO,CAACE,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}