{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertTokenProviderConfig = assertTokenProviderConfig;\nexports.assertOAuthConfig = assertOAuthConfig;\nexports.assertIdentityPoolIdConfig = assertIdentityPoolIdConfig;\nexports.decodeJWT = decodeJWT;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst convert_1 = require(\"../../../utils/convert\");\nconst errorHelpers_1 = require(\"./errorHelpers\");\nfunction assertTokenProviderConfig(cognitoConfig) {\n  let assertionValid = true; // assume valid until otherwise proveed\n  if (!cognitoConfig) {\n    assertionValid = false;\n  } else {\n    assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n  }\n  (0, errorHelpers_1.assert)(assertionValid, errorHelpers_1.AuthConfigurationErrorCode.AuthUserPoolException);\n}\nfunction assertOAuthConfig(cognitoConfig) {\n  const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain && !!cognitoConfig?.loginWith?.oauth?.redirectSignOut && !!cognitoConfig?.loginWith?.oauth?.redirectSignIn && !!cognitoConfig?.loginWith?.oauth?.responseType;\n  (0, errorHelpers_1.assert)(validOAuthConfig, errorHelpers_1.AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nfunction assertIdentityPoolIdConfig(cognitoConfig) {\n  const validConfig = !!cognitoConfig?.identityPoolId;\n  (0, errorHelpers_1.assert)(validConfig, errorHelpers_1.AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\n/**\n * Decodes payload of JWT token\n *\n * @param {String} token A string representing a token to be decoded\n * @throws {@link Error} - Throws error when token is invalid or payload malformed.\n */\nfunction decodeJWT(token) {\n  const tokenParts = token.split('.');\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid token');\n  }\n  try {\n    const base64WithUrlSafe = tokenParts[1];\n    const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonStr = decodeURIComponent(convert_1.base64Decoder.convert(base64).split('').map(char => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`).join(''));\n    const payload = JSON.parse(jsonStr);\n    return {\n      toString: () => token,\n      payload\n    };\n  } catch (err) {\n    throw new Error('Invalid token payload');\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","assertTokenProviderConfig","assertOAuthConfig","assertIdentityPoolIdConfig","decodeJWT","convert_1","require","errorHelpers_1","cognitoConfig","assertionValid","userPoolId","userPoolClientId","assert","AuthConfigurationErrorCode","AuthUserPoolException","validOAuthConfig","loginWith","oauth","domain","redirectSignOut","redirectSignIn","responseType","OAuthNotConfigureException","validConfig","identityPoolId","InvalidIdentityPoolIdException","token","tokenParts","split","length","Error","base64WithUrlSafe","base64","replace","jsonStr","decodeURIComponent","base64Decoder","convert","map","char","charCodeAt","toString","slice","join","payload","JSON","parse","err"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\singleton\\Auth\\utils\\index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertTokenProviderConfig = assertTokenProviderConfig;\nexports.assertOAuthConfig = assertOAuthConfig;\nexports.assertIdentityPoolIdConfig = assertIdentityPoolIdConfig;\nexports.decodeJWT = decodeJWT;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst convert_1 = require(\"../../../utils/convert\");\nconst errorHelpers_1 = require(\"./errorHelpers\");\nfunction assertTokenProviderConfig(cognitoConfig) {\n    let assertionValid = true; // assume valid until otherwise proveed\n    if (!cognitoConfig) {\n        assertionValid = false;\n    }\n    else {\n        assertionValid =\n            !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n    }\n    (0, errorHelpers_1.assert)(assertionValid, errorHelpers_1.AuthConfigurationErrorCode.AuthUserPoolException);\n}\nfunction assertOAuthConfig(cognitoConfig) {\n    const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain &&\n        !!cognitoConfig?.loginWith?.oauth?.redirectSignOut &&\n        !!cognitoConfig?.loginWith?.oauth?.redirectSignIn &&\n        !!cognitoConfig?.loginWith?.oauth?.responseType;\n    (0, errorHelpers_1.assert)(validOAuthConfig, errorHelpers_1.AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nfunction assertIdentityPoolIdConfig(cognitoConfig) {\n    const validConfig = !!cognitoConfig?.identityPoolId;\n    (0, errorHelpers_1.assert)(validConfig, errorHelpers_1.AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\n/**\n * Decodes payload of JWT token\n *\n * @param {String} token A string representing a token to be decoded\n * @throws {@link Error} - Throws error when token is invalid or payload malformed.\n */\nfunction decodeJWT(token) {\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n        throw new Error('Invalid token');\n    }\n    try {\n        const base64WithUrlSafe = tokenParts[1];\n        const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonStr = decodeURIComponent(convert_1.base64Decoder\n            .convert(base64)\n            .split('')\n            .map(char => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`)\n            .join(''));\n        const payload = JSON.parse(jsonStr);\n        return {\n            toString: () => token,\n            payload,\n        };\n    }\n    catch (err) {\n        throw new Error('Invalid token payload');\n    }\n}\n"],"mappings":";;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB;AAC7DF,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7CH,OAAO,CAACI,0BAA0B,GAAGA,0BAA0B;AAC/DJ,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7B;AACA;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACnD,MAAMC,cAAc,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAChD,SAASL,yBAAyBA,CAACO,aAAa,EAAE;EAC9C,IAAIC,cAAc,GAAG,IAAI,CAAC;EAC1B,IAAI,CAACD,aAAa,EAAE;IAChBC,cAAc,GAAG,KAAK;EAC9B,OACS;IACDA,cAAc,GACV,CAAC,CAACD,aAAa,CAACE,UAAU,IAAI,CAAC,CAACF,aAAa,CAACG,gBAAgB;EAC1E;EACI,IAAIJ,cAAc,CAACK,MAAM,EAAEH,cAAc,EAAEF,cAAc,CAACM,0BAA0B,CAACC,qBAAqB,CAAC;AAC/G;AACA,SAASZ,iBAAiBA,CAACM,aAAa,EAAE;EACtC,MAAMO,gBAAgB,GAAG,CAAC,CAACP,aAAa,EAAEQ,SAAS,EAAEC,KAAK,EAAEC,MAAM,IAC9D,CAAC,CAACV,aAAa,EAAEQ,SAAS,EAAEC,KAAK,EAAEE,eAAe,IAClD,CAAC,CAACX,aAAa,EAAEQ,SAAS,EAAEC,KAAK,EAAEG,cAAc,IACjD,CAAC,CAACZ,aAAa,EAAEQ,SAAS,EAAEC,KAAK,EAAEI,YAAY;EACnD,IAAId,cAAc,CAACK,MAAM,EAAEG,gBAAgB,EAAER,cAAc,CAACM,0BAA0B,CAACS,0BAA0B,CAAC;AACtH;AACA,SAASnB,0BAA0BA,CAACK,aAAa,EAAE;EAC/C,MAAMe,WAAW,GAAG,CAAC,CAACf,aAAa,EAAEgB,cAAc;EACnD,IAAIjB,cAAc,CAACK,MAAM,EAAEW,WAAW,EAAEhB,cAAc,CAACM,0BAA0B,CAACY,8BAA8B,CAAC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASrB,SAASA,CAACsB,KAAK,EAAE;EACtB,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EACnC,IAAID,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACxC;EACI,IAAI;IACA,MAAMC,iBAAiB,GAAGJ,UAAU,CAAC,CAAC,CAAC;IACvC,MAAMK,MAAM,GAAGD,iBAAiB,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IACtE,MAAMC,OAAO,GAAGC,kBAAkB,CAAC9B,SAAS,CAAC+B,aAAA,CACxCC,OAAO,CAACL,MAAM,EACdJ,KAAK,CAAC,EAAE,EACRU,GAAG,CAACC,IAAI,IAAI,IAAI,KAAKA,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAClEC,IAAI,CAAC,EAAE,CAAC,CAAC;IACd,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACZ,OAAO,CAAC;IACnC,OAAO;MACHO,QAAQ,EAAEA,CAAA,KAAMf,KAAK;MACrBkB;IACZ,CAAS;EACT,EACI,OAAOG,GAAG,EAAE;IACR,MAAM,IAAIjB,KAAK,CAAC,uBAAuB,CAAC;EAChD;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}