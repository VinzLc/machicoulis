{"ast":null,"code":"import { graphQLOperationsInfo } from './APIClient.mjs';\nconst attributeIsSecondaryIndex = attr => {\n  var _attr$properties, _attr$properties2, _attr$properties3;\n  return attr.type === 'key' && (// presence of `name` property distinguishes GSI from primary index\n  (_attr$properties = attr.properties) === null || _attr$properties === void 0 ? void 0 : _attr$properties.name) && ((_attr$properties2 = attr.properties) === null || _attr$properties2 === void 0 ? void 0 : _attr$properties2.queryField) && ((_attr$properties3 = attr.properties) === null || _attr$properties3 === void 0 ? void 0 : _attr$properties3.fields.length) > 0;\n};\nconst getSecondaryIndexesFromSchemaModel = model => {\n  var _model$attributes;\n  const idxs = (_model$attributes = model.attributes) === null || _model$attributes === void 0 ? void 0 : _model$attributes.filter(attributeIsSecondaryIndex).map(attr => {\n    const queryField = attr.properties.queryField;\n    const [pk, ...sk] = attr.properties.fields;\n    return {\n      queryField,\n      pk,\n      sk\n    };\n  });\n  return idxs || [];\n};\n/**\n * returns graphQLOperationsInfo, but filters out operations that were disabled via model().disableOperations([...])\n */\nconst excludeDisabledOps = (mis, modelName) => {\n  var _mis$models$modelName;\n  /* Example model attributes in MIS {\n    \"type\": \"model\",\n    \"properties\": {\n      \"subscriptions\": null,\n      \"mutations\": { \"delete\": null }\n      \"timestamps\": null\n    } }*/\n  const modelAttrs = (_mis$models$modelName = mis.models[modelName].attributes) === null || _mis$models$modelName === void 0 ? void 0 : _mis$models$modelName.find(attr => attr.type === 'model');\n  const coarseToFineDict = {\n    queries: ['list', 'get', 'observeQuery'],\n    mutations: ['create', 'update', 'delete'],\n    subscriptions: ['onCreate', 'onUpdate', 'onDelete']\n  };\n  const disabledOps = [];\n  if (!modelAttrs) {\n    return graphQLOperationsInfo;\n  }\n  if (modelAttrs.properties) {\n    for (const [key, value] of Object.entries(modelAttrs.properties)) {\n      // model.properties can contain other values that are not relevant to disabling ops, e.g. timestamps\n      if (!(key in coarseToFineDict)) {\n        continue;\n      }\n      if (value === null) {\n        // coarse-grained disable, e.g. \"subscriptions\": null,\n        disabledOps.push(...coarseToFineDict[key]);\n      } else if (value instanceof Object) {\n        // fine-grained, e.g. \"mutations\": { \"delete\": null }\n        disabledOps.push(...Object.keys(value));\n      }\n    }\n  }\n  // observeQuery only exists on the client side, so can't be explicitly disabled via schema builder.\n  // It's unusable without `list`\n  if (disabledOps.includes('list')) {\n    disabledOps.push('observeQuery');\n  }\n  // graphQLOperationsInfo keys are in caps\n  const disabledOpsUpper = disabledOps.map(op => op.toUpperCase());\n  const filteredGraphQLOperations = Object.fromEntries(Object.entries(graphQLOperationsInfo).filter(_ref => {\n    let [key] = _ref;\n    return !disabledOpsUpper.includes(key);\n  }));\n  return filteredGraphQLOperations;\n};\nexport { excludeDisabledOps, getSecondaryIndexesFromSchemaModel };","map":{"version":3,"names":["attributeIsSecondaryIndex","attr","_attr$properties","_attr$properties2","_attr$properties3","type","properties","name","queryField","fields","length","getSecondaryIndexesFromSchemaModel","model","_model$attributes","idxs","attributes","filter","map","pk","sk","excludeDisabledOps","mis","modelName","_mis$models$modelName","modelAttrs","models","find","coarseToFineDict","queries","mutations","subscriptions","disabledOps","graphQLOperationsInfo","key","value","Object","entries","push","keys","includes","disabledOpsUpper","op","toUpperCase","filteredGraphQLOperations","fromEntries","_ref"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\data-schema\\src\\runtime\\internals\\clientUtils.ts"],"sourcesContent":["import { graphQLOperationsInfo } from './APIClient';\nconst attributeIsSecondaryIndex = (attr) => {\n    return (attr.type === 'key' &&\n        // presence of `name` property distinguishes GSI from primary index\n        attr.properties?.name &&\n        attr.properties?.queryField &&\n        attr.properties?.fields.length > 0);\n};\nexport const getSecondaryIndexesFromSchemaModel = (model) => {\n    const idxs = model.attributes\n        ?.filter(attributeIsSecondaryIndex)\n        .map((attr) => {\n        const queryField = attr.properties.queryField;\n        const [pk, ...sk] = attr.properties.fields;\n        return {\n            queryField,\n            pk,\n            sk,\n        };\n    });\n    return idxs || [];\n};\n/**\n * returns graphQLOperationsInfo, but filters out operations that were disabled via model().disableOperations([...])\n */\nexport const excludeDisabledOps = (mis, modelName) => {\n    /* Example model attributes in MIS {\n      \"type\": \"model\",\n      \"properties\": {\n        \"subscriptions\": null,\n        \"mutations\": { \"delete\": null }\n        \"timestamps\": null\n      } }*/\n    const modelAttrs = mis.models[modelName].attributes?.find((attr) => attr.type === 'model');\n    const coarseToFineDict = {\n        queries: ['list', 'get', 'observeQuery'],\n        mutations: ['create', 'update', 'delete'],\n        subscriptions: ['onCreate', 'onUpdate', 'onDelete'],\n    };\n    const disabledOps = [];\n    if (!modelAttrs) {\n        return graphQLOperationsInfo;\n    }\n    if (modelAttrs.properties) {\n        for (const [key, value] of Object.entries(modelAttrs.properties)) {\n            // model.properties can contain other values that are not relevant to disabling ops, e.g. timestamps\n            if (!(key in coarseToFineDict)) {\n                continue;\n            }\n            if (value === null) {\n                // coarse-grained disable, e.g. \"subscriptions\": null,\n                disabledOps.push(...coarseToFineDict[key]);\n            }\n            else if (value instanceof Object) {\n                // fine-grained, e.g. \"mutations\": { \"delete\": null }\n                disabledOps.push(...Object.keys(value));\n            }\n        }\n    }\n    // observeQuery only exists on the client side, so can't be explicitly disabled via schema builder.\n    // It's unusable without `list`\n    if (disabledOps.includes('list')) {\n        disabledOps.push('observeQuery');\n    }\n    // graphQLOperationsInfo keys are in caps\n    const disabledOpsUpper = disabledOps.map((op) => op.toUpperCase());\n    const filteredGraphQLOperations = Object.fromEntries(Object.entries(graphQLOperationsInfo).filter(([key]) => !disabledOpsUpper.includes(key)));\n    return filteredGraphQLOperations;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}