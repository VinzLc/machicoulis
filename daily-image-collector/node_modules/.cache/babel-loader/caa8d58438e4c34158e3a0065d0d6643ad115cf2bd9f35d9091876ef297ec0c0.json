{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parser = void 0;\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\n/**\n * Pure JS XML parser that can be used in Non-browser environments, like React Native and Node.js. This is the same\n * XML parser implementation as used in AWS SDK S3 client. It depends on pure JavaScript XML parser library\n * `fast-xml-parser`.\n *\n * Ref: https://github.com/aws/aws-sdk-js-v3/blob/1e806ba3f4a83c9e3eb0b41a3a7092da93826b8f/clients/client-s3/src/protocols/Aws_restXml.ts#L12938-L12959\n */\nexports.parser = {\n  parse: xmlStr => {\n    const xmlParser = new fast_xml_parser_1.XMLParser({\n      attributeNamePrefix: '',\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      removeNSPrefix: true,\n      tagValueProcessor: (_, val) => val.trim() === '' && val.includes('\\n') ? '' : undefined\n    });\n    xmlParser.addEntity('#xD', '\\r');\n    xmlParser.addEntity('#10', '\\n');\n    const parsedObj = xmlParser.parse(xmlStr);\n    const textNodeName = '#text';\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n    return getValueFromTextNode(parsedObjToReturn);\n  }\n};\n/**\n * Recursively parses object and populates value is node from \"#text\" key if it's available\n *\n * Ref: https://github.com/aws/aws-sdk-js-v3/blob/6b4bde6f338720abf28b931f8a4506613bd64d3f/packages/smithy-client/src/get-value-from-text-node.ts#L1\n */\nconst getValueFromTextNode = obj => {\n  const textNodeName = '#text';\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key) && obj[key][textNodeName] !== undefined) {\n      obj[key] = obj[key][textNodeName];\n    } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n      obj[key] = getValueFromTextNode(obj[key]);\n    }\n  }\n  return obj;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","parser","fast_xml_parser_1","require","parse","xmlStr","xmlParser","XMLParser","attributeNamePrefix","htmlEntities","ignoreAttributes","ignoreDeclaration","parseTagValue","trimValues","removeNSPrefix","tagValueProcessor","_","val","trim","includes","undefined","addEntity","parsedObj","textNodeName","key","keys","parsedObjToReturn","getValueFromTextNode","obj","prototype","hasOwnProperty","call"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\runtime\\xmlParser\\pureJs.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parser = void 0;\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\n/**\n * Pure JS XML parser that can be used in Non-browser environments, like React Native and Node.js. This is the same\n * XML parser implementation as used in AWS SDK S3 client. It depends on pure JavaScript XML parser library\n * `fast-xml-parser`.\n *\n * Ref: https://github.com/aws/aws-sdk-js-v3/blob/1e806ba3f4a83c9e3eb0b41a3a7092da93826b8f/clients/client-s3/src/protocols/Aws_restXml.ts#L12938-L12959\n */\nexports.parser = {\n    parse: (xmlStr) => {\n        const xmlParser = new fast_xml_parser_1.XMLParser({\n            attributeNamePrefix: '',\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            removeNSPrefix: true,\n            tagValueProcessor: (_, val) => val.trim() === '' && val.includes('\\n') ? '' : undefined,\n        });\n        xmlParser.addEntity('#xD', '\\r');\n        xmlParser.addEntity('#10', '\\n');\n        const parsedObj = xmlParser.parse(xmlStr);\n        const textNodeName = '#text';\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return getValueFromTextNode(parsedObjToReturn);\n    },\n};\n/**\n * Recursively parses object and populates value is node from \"#text\" key if it's available\n *\n * Ref: https://github.com/aws/aws-sdk-js-v3/blob/6b4bde6f338720abf28b931f8a4506613bd64d3f/packages/smithy-client/src/get-value-from-text-node.ts#L1\n */\nconst getValueFromTextNode = (obj) => {\n    const textNodeName = '#text';\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) &&\n            obj[key][textNodeName] !== undefined) {\n            obj[key] = obj[key][textNodeName];\n        }\n        else if (typeof obj[key] === 'object' && obj[key] !== null) {\n            obj[key] = getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n};\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,MAAM;AACvB,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACE,MAAM,GAAG;EACbG,KAAK,EAAGC,MAAM,IAAK;IACf,MAAMC,SAAS,GAAG,IAAIJ,iBAAiB,CAACK,SAAS,CAAC;MAC9CC,mBAAmB,EAAE,EAAE;MACvBC,YAAY,EAAE,IAAI;MAClBC,gBAAgB,EAAE,KAAK;MACvBC,iBAAiB,EAAE,IAAI;MACvBC,aAAa,EAAE,KAAK;MACpBC,UAAU,EAAE,KAAK;MACjBC,cAAc,EAAE,IAAI;MACpBC,iBAAiB,EAAEA,CAACC,CAAC,EAAEC,GAAG,KAAKA,GAAG,CAACC,IAAI,EAAE,KAAK,EAAE,IAAID,GAAG,CAACE,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,GAAGC;IAC1F,CAAS,CAAC;IACFd,SAAS,CAACe,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC;IAChCf,SAAS,CAACe,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC;IAChC,MAAMC,SAAS,GAAGhB,SAAS,CAACF,KAAK,CAACC,MAAM,CAAC;IACzC,MAAMkB,YAAY,GAAG,OAAO;IAC5B,MAAMC,GAAG,GAAG3B,MAAM,CAAC4B,IAAI,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMI,iBAAiB,GAAGJ,SAAS,CAACE,GAAG,CAAC;IACxC,IAAIE,iBAAiB,CAACH,YAAY,CAAC,EAAE;MACjCG,iBAAiB,CAACF,GAAG,CAAC,GAAGE,iBAAiB,CAACH,YAAY,CAAC;MACxD,OAAOG,iBAAiB,CAACH,YAAY,CAAC;IAClD;IACQ,OAAOI,oBAAoB,CAACD,iBAAiB,CAAC;EACtD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAIC,GAAG,IAAK;EAClC,MAAML,YAAY,GAAG,OAAO;EAC5B,KAAK,MAAMC,GAAG,IAAII,GAAG,EAAE;IACnB,IAAI/B,MAAM,CAACgC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACH,GAAG,EAAEJ,GAAG,CAAC,IAC9CI,GAAG,CAACJ,GAAG,CAAC,CAACD,YAAY,CAAC,KAAKH,SAAS,EAAE;MACtCQ,GAAG,CAACJ,GAAG,CAAC,GAAGI,GAAG,CAACJ,GAAG,CAAC,CAACD,YAAY,CAAC;IAC7C,OACa,IAAI,OAAOK,GAAG,CAACJ,GAAG,CAAC,KAAK,QAAQ,IAAII,GAAG,CAACJ,GAAG,CAAC,KAAK,IAAI,EAAE;MACxDI,GAAG,CAACJ,GAAG,CAAC,GAAGG,oBAAoB,CAACC,GAAG,CAACJ,GAAG,CAAC,CAAC;IACrD;EACA;EACI,OAAOI,GAAG;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}