{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uploadPart = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst uploadPartSerializer = async (input, endpoint) => {\n  const headers = {\n    ...(0, utils_2.assignStringVariables)({\n      'x-amz-checksum-crc32': input.ChecksumCRC32,\n      'content-md5': input.ContentMD5,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner\n    }),\n    'content-type': 'application/octet-stream'\n  };\n  const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n  (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n  url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n  (0, utils_2.validateS3RequiredParameter)(!!input.PartNumber, 'PartNumber');\n  (0, utils_2.validateS3RequiredParameter)(!!input.UploadId, 'UploadId');\n  url.search = new utils_1.AmplifyUrlSearchParams({\n    partNumber: input.PartNumber + '',\n    uploadId: input.UploadId\n  }).toString();\n  (0, validateObjectUrl_1.validateObjectUrl)({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body: input.Body\n  };\n};\nconst uploadPartDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw (0, utils_2.buildStorageServiceError)(await (0, base_1.parseXmlError)(response));\n  } else {\n    return {\n      ...(0, utils_2.map)(response.headers, {\n        ETag: 'etag'\n      }),\n      $metadata: (0, aws_client_utils_1.parseMetadata)(response)\n    };\n  }\n};\nexports.uploadPart = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, {\n  ...base_1.defaultConfig,\n  responseType: 'text'\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","uploadPart","aws_client_utils_1","require","utils_1","composers_1","utils_2","validateObjectUrl_1","base_1","uploadPartSerializer","input","endpoint","headers","assignStringVariables","ChecksumCRC32","ContentMD5","ExpectedBucketOwner","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","PartNumber","UploadId","search","AmplifyUrlSearchParams","partNumber","uploadId","validateObjectUrl","bucketName","Bucket","key","objectURL","method","body","Body","uploadPartDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","map","ETag","$metadata","parseMetadata","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\uploadPart.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uploadPart = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst uploadPartSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(0, utils_2.assignStringVariables)({\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'content-md5': input.ContentMD5,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n        }),\n        'content-type': 'application/octet-stream',\n    };\n    const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n    (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n    url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n    (0, utils_2.validateS3RequiredParameter)(!!input.PartNumber, 'PartNumber');\n    (0, utils_2.validateS3RequiredParameter)(!!input.UploadId, 'UploadId');\n    url.search = new utils_1.AmplifyUrlSearchParams({\n        partNumber: input.PartNumber + '',\n        uploadId: input.UploadId,\n    }).toString();\n    (0, validateObjectUrl_1.validateObjectUrl)({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst uploadPartDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw (0, utils_2.buildStorageServiceError)((await (0, base_1.parseXmlError)(response)));\n    }\n    else {\n        return {\n            ...(0, utils_2.map)(response.headers, {\n                ETag: 'etag',\n            }),\n            $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n        };\n    }\n};\nexports.uploadPart = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, { ...base_1.defaultConfig, responseType: 'text' });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}