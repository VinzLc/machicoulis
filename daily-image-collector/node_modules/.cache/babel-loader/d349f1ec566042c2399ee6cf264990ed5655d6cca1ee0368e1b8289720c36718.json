{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.putObject = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst putObjectSerializer = async (input, endpoint) => {\n  const headers = {\n    ...(await (0, utils_2.serializeObjectConfigsToHeaders)({\n      ...input,\n      ContentType: input.ContentType ?? 'application/octet-stream'\n    })),\n    ...(0, utils_2.assignStringVariables)({\n      'content-md5': input.ContentMD5,\n      'x-amz-checksum-crc32': input.ChecksumCRC32,\n      'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n      'If-None-Match': input.IfNoneMatch\n    })\n  };\n  const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n  (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n  url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n  url.search = new utils_1.AmplifyUrlSearchParams({\n    'x-id': 'PutObject'\n  }).toString();\n  (0, validateObjectUrl_1.validateObjectUrl)({\n    bucketName: input.Bucket,\n    key: input.Key,\n    objectURL: url\n  });\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body: input.Body\n  };\n};\nconst putObjectDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    // error is always set when statusCode >= 300\n    throw (0, utils_2.buildStorageServiceError)(await (0, base_1.parseXmlError)(response));\n  } else {\n    return {\n      ...(0, utils_2.map)(response.headers, {\n        ETag: 'etag',\n        VersionId: 'x-amz-version-id'\n      }),\n      $metadata: (0, aws_client_utils_1.parseMetadata)(response)\n    };\n  }\n};\nexports.putObject = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, putObjectSerializer, putObjectDeserializer, {\n  ...base_1.defaultConfig,\n  responseType: 'text'\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","putObject","aws_client_utils_1","require","utils_1","composers_1","utils_2","validateObjectUrl_1","base_1","putObjectSerializer","input","endpoint","headers","serializeObjectConfigsToHeaders","ContentType","assignStringVariables","ContentMD5","ChecksumCRC32","ExpectedBucketOwner","IfNoneMatch","url","AmplifyUrl","toString","validateS3RequiredParameter","Key","pathname","serializePathnameObjectKey","search","AmplifyUrlSearchParams","validateObjectUrl","bucketName","Bucket","key","objectURL","method","body","Body","putObjectDeserializer","response","statusCode","buildStorageServiceError","parseXmlError","map","ETag","VersionId","$metadata","parseMetadata","composeServiceApi","s3TransferHandler","defaultConfig","responseType"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\client\\s3data\\putObject.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.putObject = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst composers_1 = require(\"@aws-amplify/core/internals/aws-client-utils/composers\");\nconst utils_2 = require(\"../utils\");\nconst validateObjectUrl_1 = require(\"../../validateObjectUrl\");\nconst base_1 = require(\"./base\");\nconst putObjectSerializer = async (input, endpoint) => {\n    const headers = {\n        ...(await (0, utils_2.serializeObjectConfigsToHeaders)({\n            ...input,\n            ContentType: input.ContentType ?? 'application/octet-stream',\n        })),\n        ...(0, utils_2.assignStringVariables)({\n            'content-md5': input.ContentMD5,\n            'x-amz-checksum-crc32': input.ChecksumCRC32,\n            'x-amz-expected-bucket-owner': input.ExpectedBucketOwner,\n            'If-None-Match': input.IfNoneMatch,\n        }),\n    };\n    const url = new utils_1.AmplifyUrl(endpoint.url.toString());\n    (0, utils_2.validateS3RequiredParameter)(!!input.Key, 'Key');\n    url.pathname = (0, utils_2.serializePathnameObjectKey)(url, input.Key);\n    url.search = new utils_1.AmplifyUrlSearchParams({\n        'x-id': 'PutObject',\n    }).toString();\n    (0, validateObjectUrl_1.validateObjectUrl)({\n        bucketName: input.Bucket,\n        key: input.Key,\n        objectURL: url,\n    });\n    return {\n        method: 'PUT',\n        headers,\n        url,\n        body: input.Body,\n    };\n};\nconst putObjectDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        // error is always set when statusCode >= 300\n        throw (0, utils_2.buildStorageServiceError)((await (0, base_1.parseXmlError)(response)));\n    }\n    else {\n        return {\n            ...(0, utils_2.map)(response.headers, {\n                ETag: 'etag',\n                VersionId: 'x-amz-version-id',\n            }),\n            $metadata: (0, aws_client_utils_1.parseMetadata)(response),\n        };\n    }\n};\nexports.putObject = (0, composers_1.composeServiceApi)(utils_2.s3TransferHandler, putObjectSerializer, putObjectDeserializer, { ...base_1.defaultConfig, responseType: 'text' });\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,MAAM;AAC1B,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AAClF,MAAMC,OAAO,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAC5D,MAAME,WAAW,GAAGF,OAAO,CAAC,wDAAwD,CAAC;AACrF,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMI,mBAAmB,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAC9D,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMM,mBAAmB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAMC,OAAO,GAAG;IACZ,IAAI,MAAM,IAAIN,OAAO,CAACO,+BAA+B,EAAE;MACnD,GAAGH,KAAK;MACRI,WAAW,EAAEJ,KAAK,CAACI,WAAW,IAAI;IAC9C,CAAS,CAAC,CAAC;IACH,GAAG,IAAIR,OAAO,CAACS,qBAAqB,EAAE;MAClC,aAAa,EAAEL,KAAK,CAACM,UAAU;MAC/B,sBAAsB,EAAEN,KAAK,CAACO,aAAa;MAC3C,6BAA6B,EAAEP,KAAK,CAACQ,mBAAmB;MACxD,eAAe,EAAER,KAAK,CAACS;IACnC,CAAS;EACT,CAAK;EACD,MAAMC,GAAG,GAAG,IAAIhB,OAAO,CAACiB,UAAU,CAACV,QAAQ,CAACS,GAAG,CAACE,QAAQ,EAAE,CAAC;EAC3D,IAAIhB,OAAO,CAACiB,2BAA2B,EAAE,CAAC,CAACb,KAAK,CAACc,GAAG,EAAE,KAAK,CAAC;EAC5DJ,GAAG,CAACK,QAAQ,GAAG,IAAInB,OAAO,CAACoB,0BAA0B,EAAEN,GAAG,EAAEV,KAAK,CAACc,GAAG,CAAC;EACtEJ,GAAG,CAACO,MAAM,GAAG,IAAIvB,OAAO,CAACwB,sBAAsB,CAAC;IAC5C,MAAM,EAAE;EAChB,CAAK,CAAC,CAACN,QAAQ,EAAE;EACb,IAAIf,mBAAmB,CAACsB,iBAAiB,EAAE;IACvCC,UAAU,EAAEpB,KAAK,CAACqB,MAAM;IACxBC,GAAG,EAAEtB,KAAK,CAACc,GAAG;IACdS,SAAS,EAAEb;EACnB,CAAK,CAAC;EACF,OAAO;IACHc,MAAM,EAAE,KAAK;IACbtB,OAAO;IACPQ,GAAG;IACHe,IAAI,EAAEzB,KAAK,CAAC0B;EACpB,CAAK;AACL,CAAC;AACD,MAAMC,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IACpC;IACQ,MAAM,IAAIjC,OAAO,CAACkC,wBAAwB,EAAG,MAAM,IAAIhC,MAAM,CAACiC,aAAa,EAAEH,QAAQ,CAAC,CAAE;EAChG,OACS;IACD,OAAO;MACH,GAAG,IAAIhC,OAAO,CAACoC,GAAG,EAAEJ,QAAQ,CAAC1B,OAAO,EAAE;QAClC+B,IAAI,EAAE,MAAM;QACZC,SAAS,EAAE;MAC3B,CAAa,CAAC;MACFC,SAAS,EAAE,IAAI3C,kBAAkB,CAAC4C,aAAa,EAAER,QAAQ;IACrE,CAAS;EACT;AACA,CAAC;AACDvC,OAAO,CAACE,SAAS,GAAG,IAAII,WAAW,CAAC0C,iBAAiB,EAAEzC,OAAO,CAAC0C,iBAAiB,EAAEvC,mBAAmB,EAAE4B,qBAAqB,EAAE;EAAE,GAAG7B,MAAM,CAACyC,aAAa;EAAEC,YAAY,EAAE;AAAM,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}