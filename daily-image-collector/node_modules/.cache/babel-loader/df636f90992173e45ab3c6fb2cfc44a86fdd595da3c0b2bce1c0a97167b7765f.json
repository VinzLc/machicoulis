{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInAppMessages = void 0;\nconst authenticated_1 = require(\"../../clients/handlers/aws/authenticated\");\nconst composeServiceApi_1 = require(\"../../clients/internal/composeServiceApi\");\nconst extendedEncodeURIComponent_1 = require(\"../../clients/middleware/signing/utils/extendedEncodeURIComponent\");\nconst serde_1 = require(\"../../clients/serde\");\nconst amplifyUrl_1 = require(\"../../utils/amplifyUrl\");\nconst base_1 = require(\"./base\");\nconst getInAppMessagesSerializer = ({\n  ApplicationId = '',\n  EndpointId = ''\n}, endpoint) => {\n  const headers = (0, base_1.getSharedHeaders)();\n  const url = new amplifyUrl_1.AmplifyUrl(endpoint.url);\n  url.pathname = `v1/apps/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(ApplicationId)}/endpoints/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(EndpointId)}/inappmessages`;\n  return {\n    method: 'GET',\n    headers,\n    url\n  };\n};\nconst getInAppMessagesDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await (0, serde_1.parseJsonError)(response);\n    throw error;\n  } else {\n    const {\n      InAppMessageCampaigns\n    } = await (0, serde_1.parseJsonBody)(response);\n    return {\n      InAppMessagesResponse: {\n        InAppMessageCampaigns\n      },\n      $metadata: (0, serde_1.parseMetadata)(response)\n    };\n  }\n};\n/**\n * @internal\n */\nexports.getInAppMessages = (0, composeServiceApi_1.composeServiceApi)(authenticated_1.authenticatedHandler, getInAppMessagesSerializer, getInAppMessagesDeserializer, base_1.defaultConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","getInAppMessages","authenticated_1","require","composeServiceApi_1","extendedEncodeURIComponent_1","serde_1","amplifyUrl_1","base_1","getInAppMessagesSerializer","ApplicationId","EndpointId","endpoint","headers","getSharedHeaders","url","AmplifyUrl","pathname","extendedEncodeURIComponent","method","getInAppMessagesDeserializer","response","statusCode","error","parseJsonError","InAppMessageCampaigns","parseJsonBody","InAppMessagesResponse","$metadata","parseMetadata","composeServiceApi","authenticatedHandler","defaultConfig"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\core\\src\\awsClients\\pinpoint\\getInAppMessages.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getInAppMessages = void 0;\nconst authenticated_1 = require(\"../../clients/handlers/aws/authenticated\");\nconst composeServiceApi_1 = require(\"../../clients/internal/composeServiceApi\");\nconst extendedEncodeURIComponent_1 = require(\"../../clients/middleware/signing/utils/extendedEncodeURIComponent\");\nconst serde_1 = require(\"../../clients/serde\");\nconst amplifyUrl_1 = require(\"../../utils/amplifyUrl\");\nconst base_1 = require(\"./base\");\nconst getInAppMessagesSerializer = ({ ApplicationId = '', EndpointId = '' }, endpoint) => {\n    const headers = (0, base_1.getSharedHeaders)();\n    const url = new amplifyUrl_1.AmplifyUrl(endpoint.url);\n    url.pathname = `v1/apps/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(ApplicationId)}/endpoints/${(0, extendedEncodeURIComponent_1.extendedEncodeURIComponent)(EndpointId)}/inappmessages`;\n    return { method: 'GET', headers, url };\n};\nconst getInAppMessagesDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await (0, serde_1.parseJsonError)(response);\n        throw error;\n    }\n    else {\n        const { InAppMessageCampaigns } = await (0, serde_1.parseJsonBody)(response);\n        return {\n            InAppMessagesResponse: { InAppMessageCampaigns },\n            $metadata: (0, serde_1.parseMetadata)(response),\n        };\n    }\n};\n/**\n * @internal\n */\nexports.getInAppMessages = (0, composeServiceApi_1.composeServiceApi)(authenticated_1.authenticatedHandler, getInAppMessagesSerializer, getInAppMessagesDeserializer, base_1.defaultConfig);\n"],"mappings":";;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,MAAM;AACjC,MAAMC,eAAe,GAAGC,OAAO,CAAC,0CAA0C,CAAC;AAC3E,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,0CAA0C,CAAC;AAC/E,MAAME,4BAA4B,GAAGF,OAAO,CAAC,mEAAmE,CAAC;AACjH,MAAMG,OAAO,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAC9C,MAAMI,YAAY,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMM,0BAA0B,GAAGA,CAAC;EAAEC,aAAa,GAAG,EAAE;EAAEC,UAAU,GAAG;AAAE,CAAE,EAAEC,QAAQ,KAAK;EACtF,MAAMC,OAAO,GAAG,IAAIL,MAAM,CAACM,gBAAgB,GAAG;EAC9C,MAAMC,GAAG,GAAG,IAAIR,YAAY,CAACS,UAAU,CAACJ,QAAQ,CAACG,GAAG,CAAC;EACrDA,GAAG,CAACE,QAAQ,GAAG,WAAW,IAAIZ,4BAA4B,CAACa,0BAA0B,EAAER,aAAa,CAAC,cAAc,IAAIL,4BAA4B,CAACa,0BAA0B,EAAEP,UAAU,CAAC,gBAAgB;EAC3M,OAAO;IAAEQ,MAAM,EAAE,KAAK;IAAEN,OAAO;IAAEE;EAAG,CAAE;AAC1C,CAAC;AACD,MAAMK,4BAA4B,GAAG,MAAOC,QAAQ,IAAK;EACrD,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAM,IAAIjB,OAAO,CAACkB,cAAc,EAAEH,QAAQ,CAAC;IACzD,MAAME,KAAK;EACnB,OACS;IACD,MAAM;MAAEE;IAAqB,CAAE,GAAG,MAAM,IAAInB,OAAO,CAACoB,aAAa,EAAEL,QAAQ,CAAC;IAC5E,OAAO;MACHM,qBAAqB,EAAE;QAAEF;MAAqB,CAAE;MAChDG,SAAS,EAAE,IAAItB,OAAO,CAACuB,aAAa,EAAER,QAAQ;IAC1D,CAAS;EACT;AACA,CAAC;AACD;AACA;AACA;AACAtB,OAAO,CAACE,gBAAgB,GAAG,IAAIG,mBAAmB,CAAC0B,iBAAiB,EAAE5B,eAAe,CAAC6B,oBAAoB,EAAEtB,0BAA0B,EAAEW,4BAA4B,EAAEZ,MAAM,CAACwB,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}