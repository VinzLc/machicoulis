{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyWithKey = exports.copy = void 0;\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst utils_2 = require(\"../../utils\");\nconst validation_1 = require(\"../../../../errors/types/validation\");\nconst assertValidationError_1 = require(\"../../../../errors/utils/assertValidationError\");\nconst s3data_1 = require(\"../../utils/client/s3data\");\nconst userAgent_1 = require(\"../../utils/userAgent\");\nconst utils_3 = require(\"../../../../utils\");\nconst isCopyInputWithPath = input => (0, utils_2.isInputWithPath)(input.source);\nconst storageBucketAssertion = (sourceBucket, destBucket) => {\n  /**  For multi-bucket, both source and destination bucket needs to be passed in\n   *   or both can be undefined and we fallback to singleton's default value\n   */\n  (0, assertValidationError_1.assertValidationError)(\n  // Both src & dest bucket option is present is acceptable\n  sourceBucket !== undefined && destBucket !== undefined ||\n  // or both are undefined is also acceptable\n  !destBucket && !sourceBucket, validation_1.StorageValidationErrorCode.InvalidCopyOperationStorageBucket);\n};\nconst copy = async (amplify, input) => {\n  return isCopyInputWithPath(input) ? copyWithPath(amplify, input) : (0, exports.copyWithKey)(amplify, input);\n};\nexports.copy = copy;\nconst copyWithPath = async (amplify, input) => {\n  const {\n    source,\n    destination\n  } = input;\n  storageBucketAssertion(source.bucket, destination.bucket);\n  const {\n    bucket: sourceBucket\n  } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n    path: input.source.path,\n    options: {\n      locationCredentialsProvider: input.options?.locationCredentialsProvider,\n      ...input.source\n    }\n  });\n  // The bucket, region, credentials of s3 client are resolved from destination.\n  // Whereas the source bucket and path are a input parameter of S3 copy operation.\n  const {\n    s3Config,\n    bucket: destBucket,\n    identityId\n  } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n    path: input.destination.path,\n    options: {\n      locationCredentialsProvider: input.options?.locationCredentialsProvider,\n      customEndpoint: input.options?.customEndpoint,\n      ...input.destination\n    }\n  }); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n  (0, assertValidationError_1.assertValidationError)(!!source.path, validation_1.StorageValidationErrorCode.NoSourcePath);\n  (0, assertValidationError_1.assertValidationError)(!!destination.path, validation_1.StorageValidationErrorCode.NoDestinationPath);\n  const {\n    objectKey: sourcePath\n  } = (0, utils_2.validateStorageOperationInput)(source, identityId);\n  const {\n    objectKey: destinationPath\n  } = (0, utils_2.validateStorageOperationInput)(destination, identityId);\n  (0, utils_2.validateBucketOwnerID)(source.expectedBucketOwner);\n  (0, utils_2.validateBucketOwnerID)(destination.expectedBucketOwner);\n  const finalCopySource = `${sourceBucket}/${sourcePath}`;\n  const finalCopyDestination = destinationPath;\n  utils_3.logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n  await serviceCopy({\n    source: finalCopySource,\n    destination: finalCopyDestination,\n    bucket: destBucket,\n    s3Config,\n    notModifiedSince: input.source.notModifiedSince,\n    eTag: input.source.eTag,\n    expectedSourceBucketOwner: input.source?.expectedBucketOwner,\n    expectedBucketOwner: input.destination?.expectedBucketOwner\n  });\n  return {\n    path: finalCopyDestination\n  };\n};\n/** @deprecated Use {@link copyWithPath} instead. */\nconst copyWithKey = async (amplify, input) => {\n  const {\n    source,\n    destination\n  } = input;\n  storageBucketAssertion(source.bucket, destination.bucket);\n  (0, assertValidationError_1.assertValidationError)(!!source.key, validation_1.StorageValidationErrorCode.NoSourceKey);\n  (0, assertValidationError_1.assertValidationError)(!!destination.key, validation_1.StorageValidationErrorCode.NoDestinationKey);\n  (0, utils_2.validateBucketOwnerID)(source.expectedBucketOwner);\n  (0, utils_2.validateBucketOwnerID)(destination.expectedBucketOwner);\n  const {\n    bucket: sourceBucket,\n    keyPrefix: sourceKeyPrefix\n  } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n    ...input,\n    options: {\n      // @ts-expect-error: 'options' does not exist on type 'CopyInput'. In case of JS users set the location\n      // credentials provider option, resolveS3ConfigAndInput will throw validation error.\n      locationCredentialsProvider: input.options?.locationCredentialsProvider,\n      ...input.source\n    }\n  });\n  // The bucket, region, credentials of s3 client are resolved from destination.\n  // Whereas the source bucket and path are a input parameter of S3 copy operation.\n  const {\n    s3Config,\n    bucket: destBucket,\n    keyPrefix: destinationKeyPrefix\n  } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n    ...input,\n    options: {\n      // @ts-expect-error: 'options' does not exist on type 'CopyInput'. In case of JS users set the location\n      // credentials provider option, resolveS3ConfigAndInput will throw validation error.\n      locationCredentialsProvider: input.options?.locationCredentialsProvider,\n      ...input.destination\n    }\n  }); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n  // TODO(ashwinkumar6) V6-logger: warn `You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n  const finalCopySource = `${sourceBucket}/${sourceKeyPrefix}${source.key}`;\n  const finalCopyDestination = `${destinationKeyPrefix}${destination.key}`;\n  utils_3.logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n  await serviceCopy({\n    source: finalCopySource,\n    destination: finalCopyDestination,\n    bucket: destBucket,\n    s3Config,\n    notModifiedSince: input.source.notModifiedSince,\n    eTag: input.source.eTag,\n    expectedSourceBucketOwner: input.source?.expectedBucketOwner,\n    expectedBucketOwner: input.destination?.expectedBucketOwner\n  });\n  return {\n    key: destination.key\n  };\n};\nexports.copyWithKey = copyWithKey;\nconst serviceCopy = async ({\n  source,\n  destination,\n  bucket,\n  s3Config,\n  notModifiedSince,\n  eTag,\n  expectedSourceBucketOwner,\n  expectedBucketOwner\n}) => {\n  await (0, s3data_1.copyObject)({\n    ...s3Config,\n    userAgentValue: (0, userAgent_1.getStorageUserAgentValue)(utils_1.StorageAction.Copy)\n  }, {\n    Bucket: bucket,\n    CopySource: source,\n    Key: destination,\n    MetadataDirective: 'COPY',\n    // Copies over metadata like contentType as well\n    CopySourceIfMatch: eTag,\n    CopySourceIfUnmodifiedSince: notModifiedSince,\n    ExpectedSourceBucketOwner: expectedSourceBucketOwner,\n    ExpectedBucketOwner: expectedBucketOwner\n  });\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","copyWithKey","copy","utils_1","require","utils_2","validation_1","assertValidationError_1","s3data_1","userAgent_1","utils_3","isCopyInputWithPath","input","isInputWithPath","source","storageBucketAssertion","sourceBucket","destBucket","assertValidationError","undefined","StorageValidationErrorCode","InvalidCopyOperationStorageBucket","amplify","copyWithPath","destination","bucket","resolveS3ConfigAndInput","path","options","locationCredentialsProvider","s3Config","identityId","customEndpoint","NoSourcePath","NoDestinationPath","objectKey","sourcePath","validateStorageOperationInput","destinationPath","validateBucketOwnerID","expectedBucketOwner","finalCopySource","finalCopyDestination","logger","debug","serviceCopy","notModifiedSince","eTag","expectedSourceBucketOwner","key","NoSourceKey","NoDestinationKey","keyPrefix","sourceKeyPrefix","destinationKeyPrefix","copyObject","userAgentValue","getStorageUserAgentValue","StorageAction","Copy","Bucket","CopySource","Key","MetadataDirective","CopySourceIfMatch","CopySourceIfUnmodifiedSince","ExpectedSourceBucketOwner","ExpectedBucketOwner"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\copy.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.copyWithKey = exports.copy = void 0;\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\nconst utils_2 = require(\"../../utils\");\nconst validation_1 = require(\"../../../../errors/types/validation\");\nconst assertValidationError_1 = require(\"../../../../errors/utils/assertValidationError\");\nconst s3data_1 = require(\"../../utils/client/s3data\");\nconst userAgent_1 = require(\"../../utils/userAgent\");\nconst utils_3 = require(\"../../../../utils\");\nconst isCopyInputWithPath = (input) => (0, utils_2.isInputWithPath)(input.source);\nconst storageBucketAssertion = (sourceBucket, destBucket) => {\n    /**  For multi-bucket, both source and destination bucket needs to be passed in\n     *   or both can be undefined and we fallback to singleton's default value\n     */\n    (0, assertValidationError_1.assertValidationError)(\n    // Both src & dest bucket option is present is acceptable\n    (sourceBucket !== undefined && destBucket !== undefined) ||\n        // or both are undefined is also acceptable\n        (!destBucket && !sourceBucket), validation_1.StorageValidationErrorCode.InvalidCopyOperationStorageBucket);\n};\nconst copy = async (amplify, input) => {\n    return isCopyInputWithPath(input)\n        ? copyWithPath(amplify, input)\n        : (0, exports.copyWithKey)(amplify, input);\n};\nexports.copy = copy;\nconst copyWithPath = async (amplify, input) => {\n    const { source, destination } = input;\n    storageBucketAssertion(source.bucket, destination.bucket);\n    const { bucket: sourceBucket } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n        path: input.source.path,\n        options: {\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            ...input.source,\n        },\n    });\n    // The bucket, region, credentials of s3 client are resolved from destination.\n    // Whereas the source bucket and path are a input parameter of S3 copy operation.\n    const { s3Config, bucket: destBucket, identityId, } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n        path: input.destination.path,\n        options: {\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            customEndpoint: input.options?.customEndpoint,\n            ...input.destination,\n        },\n    }); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n    (0, assertValidationError_1.assertValidationError)(!!source.path, validation_1.StorageValidationErrorCode.NoSourcePath);\n    (0, assertValidationError_1.assertValidationError)(!!destination.path, validation_1.StorageValidationErrorCode.NoDestinationPath);\n    const { objectKey: sourcePath } = (0, utils_2.validateStorageOperationInput)(source, identityId);\n    const { objectKey: destinationPath } = (0, utils_2.validateStorageOperationInput)(destination, identityId);\n    (0, utils_2.validateBucketOwnerID)(source.expectedBucketOwner);\n    (0, utils_2.validateBucketOwnerID)(destination.expectedBucketOwner);\n    const finalCopySource = `${sourceBucket}/${sourcePath}`;\n    const finalCopyDestination = destinationPath;\n    utils_3.logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n    await serviceCopy({\n        source: finalCopySource,\n        destination: finalCopyDestination,\n        bucket: destBucket,\n        s3Config,\n        notModifiedSince: input.source.notModifiedSince,\n        eTag: input.source.eTag,\n        expectedSourceBucketOwner: input.source?.expectedBucketOwner,\n        expectedBucketOwner: input.destination?.expectedBucketOwner,\n    });\n    return { path: finalCopyDestination };\n};\n/** @deprecated Use {@link copyWithPath} instead. */\nconst copyWithKey = async (amplify, input) => {\n    const { source, destination } = input;\n    storageBucketAssertion(source.bucket, destination.bucket);\n    (0, assertValidationError_1.assertValidationError)(!!source.key, validation_1.StorageValidationErrorCode.NoSourceKey);\n    (0, assertValidationError_1.assertValidationError)(!!destination.key, validation_1.StorageValidationErrorCode.NoDestinationKey);\n    (0, utils_2.validateBucketOwnerID)(source.expectedBucketOwner);\n    (0, utils_2.validateBucketOwnerID)(destination.expectedBucketOwner);\n    const { bucket: sourceBucket, keyPrefix: sourceKeyPrefix } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n        ...input,\n        options: {\n            // @ts-expect-error: 'options' does not exist on type 'CopyInput'. In case of JS users set the location\n            // credentials provider option, resolveS3ConfigAndInput will throw validation error.\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            ...input.source,\n        },\n    });\n    // The bucket, region, credentials of s3 client are resolved from destination.\n    // Whereas the source bucket and path are a input parameter of S3 copy operation.\n    const { s3Config, bucket: destBucket, keyPrefix: destinationKeyPrefix, } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, {\n        ...input,\n        options: {\n            // @ts-expect-error: 'options' does not exist on type 'CopyInput'. In case of JS users set the location\n            // credentials provider option, resolveS3ConfigAndInput will throw validation error.\n            locationCredentialsProvider: input.options?.locationCredentialsProvider,\n            ...input.destination,\n        },\n    }); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.\n    // TODO(ashwinkumar6) V6-logger: warn `You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n    const finalCopySource = `${sourceBucket}/${sourceKeyPrefix}${source.key}`;\n    const finalCopyDestination = `${destinationKeyPrefix}${destination.key}`;\n    utils_3.logger.debug(`copying \"${finalCopySource}\" to \"${finalCopyDestination}\".`);\n    await serviceCopy({\n        source: finalCopySource,\n        destination: finalCopyDestination,\n        bucket: destBucket,\n        s3Config,\n        notModifiedSince: input.source.notModifiedSince,\n        eTag: input.source.eTag,\n        expectedSourceBucketOwner: input.source?.expectedBucketOwner,\n        expectedBucketOwner: input.destination?.expectedBucketOwner,\n    });\n    return {\n        key: destination.key,\n    };\n};\nexports.copyWithKey = copyWithKey;\nconst serviceCopy = async ({ source, destination, bucket, s3Config, notModifiedSince, eTag, expectedSourceBucketOwner, expectedBucketOwner, }) => {\n    await (0, s3data_1.copyObject)({\n        ...s3Config,\n        userAgentValue: (0, userAgent_1.getStorageUserAgentValue)(utils_1.StorageAction.Copy),\n    }, {\n        Bucket: bucket,\n        CopySource: source,\n        Key: destination,\n        MetadataDirective: 'COPY', // Copies over metadata like contentType as well\n        CopySourceIfMatch: eTag,\n        CopySourceIfUnmodifiedSince: notModifiedSince,\n        ExpectedSourceBucketOwner: expectedSourceBucketOwner,\n        ExpectedBucketOwner: expectedBucketOwner,\n    });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}