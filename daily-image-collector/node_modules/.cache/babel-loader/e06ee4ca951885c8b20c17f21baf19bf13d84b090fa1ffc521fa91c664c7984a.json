{"ast":null,"code":"'use strict';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveS3ConfigAndInput = void 0;\nconst assertValidationError_1 = require(\"../../../errors/utils/assertValidationError\");\nconst validation_1 = require(\"../../../errors/types/validation\");\nconst resolvePrefix_1 = require(\"../../../utils/resolvePrefix\");\nconst StorageError_1 = require(\"../../../errors/StorageError\");\nconst constants_1 = require(\"../../../errors/constants\");\nconst constants_2 = require(\"./constants\");\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A `StorageError` with `error.name` from `StorageValidationErrorCode` indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nconst resolveS3ConfigAndInput = async (amplify, apiInput) => {\n  const {\n    options: apiOptions\n  } = apiInput ?? {};\n  /**\n   * IdentityId is always cached in memory so we can safely make calls here. It\n   * should be stable even for unauthenticated users, regardless of credentials.\n   */\n  const {\n    identityId\n  } = await amplify.Auth.fetchAuthSession();\n  /**\n   * A credentials provider function instead of a static credentials object is\n   * used because the long-running tasks like multipart upload may span over the\n   * credentials expiry. Auth.fetchAuthSession() automatically refreshes the\n   * credentials if they are expired.\n   *\n   * The optional forceRefresh option is set when the S3 service returns expired\n   * tokens error in the previous API call attempt.\n   */\n  const credentialsProvider = async options => {\n    if (isLocationCredentialsProvider(apiOptions)) {\n      assertStorageInput(apiInput);\n    }\n    // TODO: forceRefresh option of fetchAuthSession would refresh both tokens and\n    // AWS credentials. So we do not support forceRefreshing from the Auth until\n    // we support refreshing only the credentials.\n    const {\n      credentials\n    } = isLocationCredentialsProvider(apiOptions) ? await apiOptions.locationCredentialsProvider(options) : await amplify.Auth.fetchAuthSession();\n    (0, assertValidationError_1.assertValidationError)(!!credentials, validation_1.StorageValidationErrorCode.NoCredentials);\n    return credentials;\n  };\n  const {\n    bucket: defaultBucket,\n    region: defaultRegion,\n    dangerouslyConnectToHttpEndpointForTesting,\n    buckets\n  } = amplify.getConfig()?.Storage?.S3 ?? {};\n  const {\n    bucket = defaultBucket,\n    region = defaultRegion\n  } = apiOptions?.bucket && resolveBucketConfig(apiOptions, buckets) || {};\n  (0, assertValidationError_1.assertValidationError)(!!bucket, validation_1.StorageValidationErrorCode.NoBucket);\n  (0, assertValidationError_1.assertValidationError)(!!region, validation_1.StorageValidationErrorCode.NoRegion);\n  const {\n    defaultAccessLevel,\n    prefixResolver = resolvePrefix_1.resolvePrefix,\n    isObjectLockEnabled\n  } = amplify.libraryOptions?.Storage?.S3 ?? {};\n  const accessLevel = apiOptions?.accessLevel ?? defaultAccessLevel ?? constants_2.DEFAULT_ACCESS_LEVEL;\n  const targetIdentityId = accessLevel === 'protected' ? apiOptions?.targetIdentityId ?? identityId : identityId;\n  const keyPrefix = await prefixResolver({\n    accessLevel,\n    targetIdentityId\n  });\n  return {\n    s3Config: {\n      credentials: credentialsProvider,\n      region,\n      useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n      ...(apiOptions?.customEndpoint ? {\n        customEndpoint: apiOptions.customEndpoint\n      } : {}),\n      ...(dangerouslyConnectToHttpEndpointForTesting ? {\n        customEndpoint: constants_2.LOCAL_TESTING_S3_ENDPOINT,\n        forcePathStyle: true\n      } : {})\n    },\n    bucket,\n    keyPrefix,\n    identityId,\n    isObjectLockEnabled\n  };\n};\nexports.resolveS3ConfigAndInput = resolveS3ConfigAndInput;\nconst isLocationCredentialsProvider = options => {\n  return !!options?.locationCredentialsProvider;\n};\nconst isInputWithCallbackPath = input => {\n  return input?.path && typeof input.path === 'function' || input?.destination?.path && typeof input.destination?.path === 'function' || input?.source?.path && typeof input.source?.path === 'function';\n};\nconst isDeprecatedInput = input => {\n  return isInputWithKey(input) || isInputWithPrefix(input) || isInputWithCopySourceOrDestination(input);\n};\nconst assertStorageInput = input => {\n  if (isDeprecatedInput(input) || isInputWithCallbackPath(input)) {\n    throw new StorageError_1.StorageError({\n      name: constants_1.INVALID_STORAGE_INPUT,\n      message: 'The input needs to have a path as a string value.',\n      recoverySuggestion: 'Please provide a valid path as a string value for the input.'\n    });\n  }\n};\nconst isInputWithKey = input => {\n  return !!(typeof input.key === 'string');\n};\nconst isInputWithPrefix = input => {\n  return !!(typeof input.prefix === 'string');\n};\nconst isInputWithCopySourceOrDestination = input => {\n  return !!(typeof input.source?.key === 'string' || typeof input.destination?.key === 'string');\n};\nconst resolveBucketConfig = (apiOptions, buckets) => {\n  if (typeof apiOptions.bucket === 'string') {\n    const bucketConfig = buckets?.[apiOptions.bucket];\n    (0, assertValidationError_1.assertValidationError)(!!bucketConfig, validation_1.StorageValidationErrorCode.InvalidStorageBucket);\n    return {\n      bucket: bucketConfig.bucketName,\n      region: bucketConfig.region\n    };\n  }\n  if (typeof apiOptions.bucket === 'object') {\n    return {\n      bucket: apiOptions.bucket.bucketName,\n      region: apiOptions.bucket.region\n    };\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveS3ConfigAndInput","assertValidationError_1","require","validation_1","resolvePrefix_1","StorageError_1","constants_1","constants_2","amplify","apiInput","options","apiOptions","identityId","Auth","fetchAuthSession","credentialsProvider","isLocationCredentialsProvider","assertStorageInput","credentials","locationCredentialsProvider","assertValidationError","StorageValidationErrorCode","NoCredentials","bucket","defaultBucket","region","defaultRegion","dangerouslyConnectToHttpEndpointForTesting","buckets","getConfig","Storage","S3","resolveBucketConfig","NoBucket","NoRegion","defaultAccessLevel","prefixResolver","resolvePrefix","isObjectLockEnabled","libraryOptions","accessLevel","DEFAULT_ACCESS_LEVEL","targetIdentityId","keyPrefix","s3Config","useAccelerateEndpoint","customEndpoint","LOCAL_TESTING_S3_ENDPOINT","forcePathStyle","isInputWithCallbackPath","input","path","destination","source","isDeprecatedInput","isInputWithKey","isInputWithPrefix","isInputWithCopySourceOrDestination","StorageError","name","INVALID_STORAGE_INPUT","message","recoverySuggestion","key","prefix","bucketConfig","InvalidStorageBucket","bucketName"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\resolveS3ConfigAndInput.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveS3ConfigAndInput = void 0;\nconst assertValidationError_1 = require(\"../../../errors/utils/assertValidationError\");\nconst validation_1 = require(\"../../../errors/types/validation\");\nconst resolvePrefix_1 = require(\"../../../utils/resolvePrefix\");\nconst StorageError_1 = require(\"../../../errors/StorageError\");\nconst constants_1 = require(\"../../../errors/constants\");\nconst constants_2 = require(\"./constants\");\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A `StorageError` with `error.name` from `StorageValidationErrorCode` indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nconst resolveS3ConfigAndInput = async (amplify, apiInput) => {\n    const { options: apiOptions } = apiInput ?? {};\n    /**\n     * IdentityId is always cached in memory so we can safely make calls here. It\n     * should be stable even for unauthenticated users, regardless of credentials.\n     */\n    const { identityId } = await amplify.Auth.fetchAuthSession();\n    /**\n     * A credentials provider function instead of a static credentials object is\n     * used because the long-running tasks like multipart upload may span over the\n     * credentials expiry. Auth.fetchAuthSession() automatically refreshes the\n     * credentials if they are expired.\n     *\n     * The optional forceRefresh option is set when the S3 service returns expired\n     * tokens error in the previous API call attempt.\n     */\n    const credentialsProvider = async (options) => {\n        if (isLocationCredentialsProvider(apiOptions)) {\n            assertStorageInput(apiInput);\n        }\n        // TODO: forceRefresh option of fetchAuthSession would refresh both tokens and\n        // AWS credentials. So we do not support forceRefreshing from the Auth until\n        // we support refreshing only the credentials.\n        const { credentials } = isLocationCredentialsProvider(apiOptions)\n            ? await apiOptions.locationCredentialsProvider(options)\n            : await amplify.Auth.fetchAuthSession();\n        (0, assertValidationError_1.assertValidationError)(!!credentials, validation_1.StorageValidationErrorCode.NoCredentials);\n        return credentials;\n    };\n    const { bucket: defaultBucket, region: defaultRegion, dangerouslyConnectToHttpEndpointForTesting, buckets, } = amplify.getConfig()?.Storage?.S3 ?? {};\n    const { bucket = defaultBucket, region = defaultRegion } = (apiOptions?.bucket && resolveBucketConfig(apiOptions, buckets)) || {};\n    (0, assertValidationError_1.assertValidationError)(!!bucket, validation_1.StorageValidationErrorCode.NoBucket);\n    (0, assertValidationError_1.assertValidationError)(!!region, validation_1.StorageValidationErrorCode.NoRegion);\n    const { defaultAccessLevel, prefixResolver = resolvePrefix_1.resolvePrefix, isObjectLockEnabled, } = amplify.libraryOptions?.Storage?.S3 ?? {};\n    const accessLevel = apiOptions?.accessLevel ?? defaultAccessLevel ?? constants_2.DEFAULT_ACCESS_LEVEL;\n    const targetIdentityId = accessLevel === 'protected'\n        ? (apiOptions?.targetIdentityId ?? identityId)\n        : identityId;\n    const keyPrefix = await prefixResolver({ accessLevel, targetIdentityId });\n    return {\n        s3Config: {\n            credentials: credentialsProvider,\n            region,\n            useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n            ...(apiOptions?.customEndpoint\n                ? { customEndpoint: apiOptions.customEndpoint }\n                : {}),\n            ...(dangerouslyConnectToHttpEndpointForTesting\n                ? {\n                    customEndpoint: constants_2.LOCAL_TESTING_S3_ENDPOINT,\n                    forcePathStyle: true,\n                }\n                : {}),\n        },\n        bucket,\n        keyPrefix,\n        identityId,\n        isObjectLockEnabled,\n    };\n};\nexports.resolveS3ConfigAndInput = resolveS3ConfigAndInput;\nconst isLocationCredentialsProvider = (options) => {\n    return !!options?.locationCredentialsProvider;\n};\nconst isInputWithCallbackPath = (input) => {\n    return ((input?.path &&\n        typeof input.path === 'function') ||\n        (input?.destination?.path &&\n            typeof input.destination?.path === 'function') ||\n        (input?.source?.path &&\n            typeof input.source?.path === 'function'));\n};\nconst isDeprecatedInput = (input) => {\n    return (isInputWithKey(input) ||\n        isInputWithPrefix(input) ||\n        isInputWithCopySourceOrDestination(input));\n};\nconst assertStorageInput = (input) => {\n    if (isDeprecatedInput(input) || isInputWithCallbackPath(input)) {\n        throw new StorageError_1.StorageError({\n            name: constants_1.INVALID_STORAGE_INPUT,\n            message: 'The input needs to have a path as a string value.',\n            recoverySuggestion: 'Please provide a valid path as a string value for the input.',\n        });\n    }\n};\nconst isInputWithKey = (input) => {\n    return !!(typeof input.key === 'string');\n};\nconst isInputWithPrefix = (input) => {\n    return !!(typeof input.prefix === 'string');\n};\nconst isInputWithCopySourceOrDestination = (input) => {\n    return !!(typeof input.source?.key === 'string' ||\n        typeof input.destination?.key === 'string');\n};\nconst resolveBucketConfig = (apiOptions, buckets) => {\n    if (typeof apiOptions.bucket === 'string') {\n        const bucketConfig = buckets?.[apiOptions.bucket];\n        (0, assertValidationError_1.assertValidationError)(!!bucketConfig, validation_1.StorageValidationErrorCode.InvalidStorageBucket);\n        return { bucket: bucketConfig.bucketName, region: bucketConfig.region };\n    }\n    if (typeof apiOptions.bucket === 'object') {\n        return {\n            bucket: apiOptions.bucket.bucketName,\n            region: apiOptions.bucket.region,\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}