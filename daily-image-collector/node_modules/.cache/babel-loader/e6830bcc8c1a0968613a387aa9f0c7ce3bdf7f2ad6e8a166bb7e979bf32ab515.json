{"ast":null,"code":"import { toBase64 } from '@smithy/util-base64';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst serializeAiContext = aiContext => JSON.stringify(aiContext);\nconst serializeContent = content => content.map(block => {\n  if (block.image) {\n    return serializeImageBlock(block);\n  }\n  if (block.document) {\n    return serializeDocumentBlock(block);\n  }\n  if (block.toolResult) {\n    return serializeToolResultBlock(block);\n  }\n  return block;\n});\nconst serializeToolConfiguration = ({\n  tools\n}) => ({\n  tools: Object.entries(tools).map(([name, tool]) => ({\n    toolSpec: {\n      name,\n      description: tool.description,\n      inputSchema: {\n        json: JSON.stringify(tool.inputSchema.json)\n      }\n    }\n  }))\n});\nconst serializeImageBlock = ({\n  image\n}) => ({\n  image: {\n    ...image,\n    source: {\n      ...image.source,\n      bytes: toBase64(image.source.bytes)\n    }\n  }\n});\nconst serializeDocumentBlock = ({\n  document\n}) => ({\n  document: {\n    ...document,\n    source: {\n      ...document.source,\n      bytes: toBase64(document.source.bytes)\n    }\n  }\n});\nconst serializeJsonBlock = ({\n  json\n}) => ({\n  json: JSON.stringify(json)\n});\nconst serializeToolResultBlock = ({\n  toolResult\n}) => ({\n  toolResult: {\n    ...toolResult,\n    content: toolResult.content.map(toolResultBlock => {\n      if (toolResultBlock.image) {\n        return serializeImageBlock(toolResultBlock);\n      }\n      if (toolResultBlock.json) {\n        return serializeJsonBlock(toolResultBlock);\n      }\n      return toolResultBlock;\n    })\n  }\n});\nexport { serializeAiContext, serializeContent, serializeToolConfiguration };","map":{"version":3,"names":["serializeAiContext","aiContext","JSON","stringify","serializeContent","content","map","block","image","serializeImageBlock","document","serializeDocumentBlock","toolResult","serializeToolResultBlock","serializeToolConfiguration","tools","Object","entries","name","tool","toolSpec","description","inputSchema","json","source","bytes","toBase64","serializeJsonBlock","toolResultBlock"],"sources":["C:\\Users\\vinzl\\workspace\\machicoulis\\daily-image-collector\\node_modules\\@aws-amplify\\data-schema\\src\\runtime\\internals\\ai\\conversationMessageSerializers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { toBase64 } from '@smithy/util-base64';\nexport const serializeAiContext = (aiContext) => JSON.stringify(aiContext);\nexport const serializeContent = (content) => content.map((block) => {\n    if (block.image) {\n        return serializeImageBlock(block);\n    }\n    if (block.document) {\n        return serializeDocumentBlock(block);\n    }\n    if (block.toolResult) {\n        return serializeToolResultBlock(block);\n    }\n    return block;\n});\nexport const serializeToolConfiguration = ({ tools }) => ({\n    tools: Object.entries(tools).map(([name, tool]) => ({\n        toolSpec: {\n            name,\n            description: tool.description,\n            inputSchema: {\n                json: JSON.stringify(tool.inputSchema.json),\n            },\n        },\n    })),\n});\nconst serializeImageBlock = ({ image }) => ({\n    image: {\n        ...image,\n        source: {\n            ...image.source,\n            bytes: toBase64(image.source.bytes),\n        },\n    },\n});\nconst serializeDocumentBlock = ({ document, }) => ({\n    document: {\n        ...document,\n        source: {\n            ...document.source,\n            bytes: toBase64(document.source.bytes),\n        },\n    },\n});\nconst serializeJsonBlock = ({ json }) => ({\n    json: JSON.stringify(json),\n});\nconst serializeToolResultBlock = ({ toolResult, }) => ({\n    toolResult: {\n        ...toolResult,\n        content: toolResult.content.map((toolResultBlock) => {\n            if (toolResultBlock.image) {\n                return serializeImageBlock(toolResultBlock);\n            }\n            if (toolResultBlock.json) {\n                return serializeJsonBlock(toolResultBlock);\n            }\n            return toolResultBlock;\n        }),\n    },\n});\n"],"mappings":";;AAAA;AACA;AAEY,MAACA,kBAAkB,GAAIC,SAAS,IAAKC,IAAI,CAACC,SAAS,CAACF,SAAS;AAC7D,MAACG,gBAAgB,GAAIC,OAAO,IAAKA,OAAO,CAACC,GAAG,CAAEC,KAAK,IAAK;EAChE,IAAIA,KAAK,CAACC,KAAK,EAAE;IACb,OAAOC,mBAAmB,CAACF,KAAK,CAAC;EACzC;EACI,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAChB,OAAOC,sBAAsB,CAACJ,KAAK,CAAC;EAC5C;EACI,IAAIA,KAAK,CAACK,UAAU,EAAE;IAClB,OAAOC,wBAAwB,CAACN,KAAK,CAAC;EAC9C;EACI,OAAOA,KAAK;AAChB,CAAC;AACW,MAACO,0BAA0B,GAAGA,CAAC;EAAEC;AAAK,CAAE,MAAM;EACtDA,KAAK,EAAEC,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CAACT,GAAG,CAAC,CAAC,CAACY,IAAI,EAAEC,IAAI,CAAC,MAAM;IAChDC,QAAQ,EAAE;MACNF,IAAI;MACJG,WAAW,EAAEF,IAAI,CAACE,WAAW;MAC7BC,WAAW,EAAE;QACTC,IAAI,EAAErB,IAAI,CAACC,SAAS,CAACgB,IAAI,CAACG,WAAW,CAACC,IAAI;MAC1D;IACA;EACA,CAAK,CAAC;AACN,CAAC;AACD,MAAMd,mBAAmB,GAAGA,CAAC;EAAED;AAAK,CAAE,MAAM;EACxCA,KAAK,EAAE;IACH,GAAGA,KAAK;IACRgB,MAAM,EAAE;MACJ,GAAGhB,KAAK,CAACgB,MAAM;MACfC,KAAK,EAAEC,QAAQ,CAAClB,KAAK,CAACgB,MAAM,CAACC,KAAK;IAC9C;EACA;AACA,CAAC,CAAC;AACF,MAAMd,sBAAsB,GAAGA,CAAC;EAAED;AAAQ,CAAG,MAAM;EAC/CA,QAAQ,EAAE;IACN,GAAGA,QAAQ;IACXc,MAAM,EAAE;MACJ,GAAGd,QAAQ,CAACc,MAAM;MAClBC,KAAK,EAAEC,QAAQ,CAAChB,QAAQ,CAACc,MAAM,CAACC,KAAK;IACjD;EACA;AACA,CAAC,CAAC;AACF,MAAME,kBAAkB,GAAGA,CAAC;EAAEJ;AAAI,CAAE,MAAM;EACtCA,IAAI,EAAErB,IAAI,CAACC,SAAS,CAACoB,IAAI;AAC7B,CAAC,CAAC;AACF,MAAMV,wBAAwB,GAAGA,CAAC;EAAED;AAAU,CAAG,MAAM;EACnDA,UAAU,EAAE;IACR,GAAGA,UAAU;IACbP,OAAO,EAAEO,UAAU,CAACP,OAAO,CAACC,GAAG,CAAEsB,eAAe,IAAK;MACjD,IAAIA,eAAe,CAACpB,KAAK,EAAE;QACvB,OAAOC,mBAAmB,CAACmB,eAAe,CAAC;MAC3D;MACY,IAAIA,eAAe,CAACL,IAAI,EAAE;QACtB,OAAOI,kBAAkB,CAACC,eAAe,CAAC;MAC1D;MACY,OAAOA,eAAe;IAClC,CAAS;EACT;AACA,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}